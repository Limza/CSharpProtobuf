// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: session.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Network.Packet {

  /// <summary>Holder for reflection information generated from session.proto</summary>
  public static partial class SessionReflection {

    #region Descriptor
    /// <summary>File descriptor for session.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SessionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zZXNzaW9uLnByb3RvEg5OZXR3b3JrLnBhY2tldCLlAQoJQ0xvZ2luUmVx",
            "Eg4KBnVzZXJpZBgBIAIoCRIMCgRuYW1lGAIgASgJEg0KBWVtYWlsGAMgASgJ",
            "Eg0KBXRva2VuGAQgASgJEg0KBXN0YW1wGAUgASgFEg4KBmJpblZlchgGIAIo",
            "CRIPCgdkYXRhVmVyGAcgAigJEg4KBm1hcmtldBgIIAIoCRISCgpzZXNzaW9u",
            "S2V5GAkgASgFEhMKC3JlY3ZDb3VudGVyGAogASgFEg0KBXBhcnRzGAsgAygJ",
            "EhgKEGNhbmNlbFVucmVnaXN0ZXIYDCABKAgSCgoCb3MYDSABKAkilwEKCVNM",
            "b2dpblJlcxIoCgNyZXMYASACKA4yGy5OZXR3b3JrLnBhY2tldC5Mb2dpblJl",
            "c3VsdBIOCgZlbmNLZXkYAiABKAUSEgoKc2Vzc2lvbktleRgDIAEoBRITCgtz",
            "ZW50Q291bnRlchgEIAEoBRIMCgRqc29uGAUgASgJEhkKEXRlcm1zQWdyZWVt",
            "ZW50VmVyGAYgASgFKuEBCgtMb2dpblJlc3VsdBILCgdTdWNjZXNzEAASDQoJ",
            "Tm9BY2NvdW50EAESDAoIQXV0aEZhaWwQAhINCglOZWVkUGF0Y2gQAxISCg5S",
            "ZXN0YXJ0U2Vzc2lvbhAEEhAKDFVua25vd25FcnJvchAFEhEKDUludmFsaWRB",
            "Y2Nlc3MQBhILCgdCbG9ja2VkEAcSHAoYVW5yZWdpc3RyYXRpb25JblByb2dy",
            "ZXNzEAgSEAoMVG9rZW5FeHBpcmVkEAkSEgoOUmVsb2NhdGVTZXJ2ZXIQChIP",
            "CgtEdWFsQ29ubmVjdBALQglCB1Nlc3Npb24="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Network.Packet.LoginResult), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CLoginReq), global::Network.Packet.CLoginReq.Parser, new[]{ "Userid", "Name", "Email", "Token", "Stamp", "BinVer", "DataVer", "Market", "SessionKey", "RecvCounter", "Parts", "CancelUnregister", "Os" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.SLoginRes), global::Network.Packet.SLoginRes.Parser, new[]{ "Res", "EncKey", "SessionKey", "SentCounter", "Json", "TermsAgreementVer" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LoginResult {
    [pbr::OriginalName("Success")] Success = 0,
    [pbr::OriginalName("NoAccount")] NoAccount = 1,
    [pbr::OriginalName("AuthFail")] AuthFail = 2,
    [pbr::OriginalName("NeedPatch")] NeedPatch = 3,
    [pbr::OriginalName("RestartSession")] RestartSession = 4,
    [pbr::OriginalName("UnknownError")] UnknownError = 5,
    [pbr::OriginalName("InvalidAccess")] InvalidAccess = 6,
    [pbr::OriginalName("Blocked")] Blocked = 7,
    [pbr::OriginalName("UnregistrationInProgress")] UnregistrationInProgress = 8,
    [pbr::OriginalName("TokenExpired")] TokenExpired = 9,
    [pbr::OriginalName("RelocateServer")] RelocateServer = 10,
    [pbr::OriginalName("DualConnect")] DualConnect = 11,
  }

  #endregion

  #region Messages
  public sealed partial class CLoginReq : pb::IMessage<CLoginReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLoginReq> _parser = new pb::MessageParser<CLoginReq>(() => new CLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.SessionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLoginReq(CLoginReq other) : this() {
      _hasBits0 = other._hasBits0;
      userid_ = other.userid_;
      name_ = other.name_;
      email_ = other.email_;
      token_ = other.token_;
      stamp_ = other.stamp_;
      binVer_ = other.binVer_;
      dataVer_ = other.dataVer_;
      market_ = other.market_;
      sessionKey_ = other.sessionKey_;
      recvCounter_ = other.recvCounter_;
      parts_ = other.parts_.Clone();
      cancelUnregister_ = other.cancelUnregister_;
      os_ = other.os_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLoginReq Clone() {
      return new CLoginReq(this);
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 1;
    private readonly static string UseridDefaultValue = "";

    private string userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userid {
      get { return userid_ ?? UseridDefaultValue; }
      set {
        userid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "userid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserid {
      get { return userid_ != null; }
    }
    /// <summary>Clears the value of the "userid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserid() {
      userid_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private readonly static string EmailDefaultValue = "";

    private string email_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_ ?? EmailDefaultValue; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "email" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEmail {
      get { return email_ != null; }
    }
    /// <summary>Clears the value of the "email" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEmail() {
      email_ = null;
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private readonly static string TokenDefaultValue = "";

    private string token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_ ?? TokenDefaultValue; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToken {
      get { return token_ != null; }
    }
    /// <summary>Clears the value of the "token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToken() {
      token_ = null;
    }

    /// <summary>Field number for the "stamp" field.</summary>
    public const int StampFieldNumber = 5;
    private readonly static int StampDefaultValue = 0;

    private int stamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stamp {
      get { if ((_hasBits0 & 1) != 0) { return stamp_; } else { return StampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stamp_ = value;
      }
    }
    /// <summary>Gets whether the "stamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "binVer" field.</summary>
    public const int BinVerFieldNumber = 6;
    private readonly static string BinVerDefaultValue = "";

    private string binVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BinVer {
      get { return binVer_ ?? BinVerDefaultValue; }
      set {
        binVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "binVer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBinVer {
      get { return binVer_ != null; }
    }
    /// <summary>Clears the value of the "binVer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBinVer() {
      binVer_ = null;
    }

    /// <summary>Field number for the "dataVer" field.</summary>
    public const int DataVerFieldNumber = 7;
    private readonly static string DataVerDefaultValue = "";

    private string dataVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataVer {
      get { return dataVer_ ?? DataVerDefaultValue; }
      set {
        dataVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dataVer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDataVer {
      get { return dataVer_ != null; }
    }
    /// <summary>Clears the value of the "dataVer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataVer() {
      dataVer_ = null;
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 8;
    private readonly static string MarketDefaultValue = "";

    private string market_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Market {
      get { return market_ ?? MarketDefaultValue; }
      set {
        market_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "market" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarket {
      get { return market_ != null; }
    }
    /// <summary>Clears the value of the "market" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarket() {
      market_ = null;
    }

    /// <summary>Field number for the "sessionKey" field.</summary>
    public const int SessionKeyFieldNumber = 9;
    private readonly static int SessionKeyDefaultValue = 0;

    private int sessionKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionKey {
      get { if ((_hasBits0 & 2) != 0) { return sessionKey_; } else { return SessionKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sessionKey_ = value;
      }
    }
    /// <summary>Gets whether the "sessionKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSessionKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sessionKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSessionKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "recvCounter" field.</summary>
    public const int RecvCounterFieldNumber = 10;
    private readonly static int RecvCounterDefaultValue = 0;

    private int recvCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecvCounter {
      get { if ((_hasBits0 & 4) != 0) { return recvCounter_; } else { return RecvCounterDefaultValue; } }
      set {
        _hasBits0 |= 4;
        recvCounter_ = value;
      }
    }
    /// <summary>Gets whether the "recvCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecvCounter {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "recvCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecvCounter() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "parts" field.</summary>
    public const int PartsFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_parts_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> parts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Parts {
      get { return parts_; }
    }

    /// <summary>Field number for the "cancelUnregister" field.</summary>
    public const int CancelUnregisterFieldNumber = 12;
    private readonly static bool CancelUnregisterDefaultValue = false;

    private bool cancelUnregister_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancelUnregister {
      get { if ((_hasBits0 & 8) != 0) { return cancelUnregister_; } else { return CancelUnregisterDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cancelUnregister_ = value;
      }
    }
    /// <summary>Gets whether the "cancelUnregister" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCancelUnregister {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cancelUnregister" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCancelUnregister() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "os" field.</summary>
    public const int OsFieldNumber = 13;
    private readonly static string OsDefaultValue = "";

    private string os_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Os {
      get { return os_ ?? OsDefaultValue; }
      set {
        os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "os" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOs {
      get { return os_ != null; }
    }
    /// <summary>Clears the value of the "os" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOs() {
      os_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userid != other.Userid) return false;
      if (Name != other.Name) return false;
      if (Email != other.Email) return false;
      if (Token != other.Token) return false;
      if (Stamp != other.Stamp) return false;
      if (BinVer != other.BinVer) return false;
      if (DataVer != other.DataVer) return false;
      if (Market != other.Market) return false;
      if (SessionKey != other.SessionKey) return false;
      if (RecvCounter != other.RecvCounter) return false;
      if(!parts_.Equals(other.parts_)) return false;
      if (CancelUnregister != other.CancelUnregister) return false;
      if (Os != other.Os) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserid) hash ^= Userid.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasEmail) hash ^= Email.GetHashCode();
      if (HasToken) hash ^= Token.GetHashCode();
      if (HasStamp) hash ^= Stamp.GetHashCode();
      if (HasBinVer) hash ^= BinVer.GetHashCode();
      if (HasDataVer) hash ^= DataVer.GetHashCode();
      if (HasMarket) hash ^= Market.GetHashCode();
      if (HasSessionKey) hash ^= SessionKey.GetHashCode();
      if (HasRecvCounter) hash ^= RecvCounter.GetHashCode();
      hash ^= parts_.GetHashCode();
      if (HasCancelUnregister) hash ^= CancelUnregister.GetHashCode();
      if (HasOs) hash ^= Os.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUserid) {
        output.WriteRawTag(10);
        output.WriteString(Userid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasEmail) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      if (HasToken) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (HasStamp) {
        output.WriteRawTag(40);
        output.WriteInt32(Stamp);
      }
      if (HasBinVer) {
        output.WriteRawTag(50);
        output.WriteString(BinVer);
      }
      if (HasDataVer) {
        output.WriteRawTag(58);
        output.WriteString(DataVer);
      }
      if (HasMarket) {
        output.WriteRawTag(66);
        output.WriteString(Market);
      }
      if (HasSessionKey) {
        output.WriteRawTag(72);
        output.WriteInt32(SessionKey);
      }
      if (HasRecvCounter) {
        output.WriteRawTag(80);
        output.WriteInt32(RecvCounter);
      }
      parts_.WriteTo(output, _repeated_parts_codec);
      if (HasCancelUnregister) {
        output.WriteRawTag(96);
        output.WriteBool(CancelUnregister);
      }
      if (HasOs) {
        output.WriteRawTag(106);
        output.WriteString(Os);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUserid) {
        output.WriteRawTag(10);
        output.WriteString(Userid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasEmail) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      if (HasToken) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (HasStamp) {
        output.WriteRawTag(40);
        output.WriteInt32(Stamp);
      }
      if (HasBinVer) {
        output.WriteRawTag(50);
        output.WriteString(BinVer);
      }
      if (HasDataVer) {
        output.WriteRawTag(58);
        output.WriteString(DataVer);
      }
      if (HasMarket) {
        output.WriteRawTag(66);
        output.WriteString(Market);
      }
      if (HasSessionKey) {
        output.WriteRawTag(72);
        output.WriteInt32(SessionKey);
      }
      if (HasRecvCounter) {
        output.WriteRawTag(80);
        output.WriteInt32(RecvCounter);
      }
      parts_.WriteTo(ref output, _repeated_parts_codec);
      if (HasCancelUnregister) {
        output.WriteRawTag(96);
        output.WriteBool(CancelUnregister);
      }
      if (HasOs) {
        output.WriteRawTag(106);
        output.WriteString(Os);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUserid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userid);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasEmail) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (HasToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (HasStamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stamp);
      }
      if (HasBinVer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BinVer);
      }
      if (HasDataVer) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataVer);
      }
      if (HasMarket) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Market);
      }
      if (HasSessionKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionKey);
      }
      if (HasRecvCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecvCounter);
      }
      size += parts_.CalculateSize(_repeated_parts_codec);
      if (HasCancelUnregister) {
        size += 1 + 1;
      }
      if (HasOs) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Os);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.HasUserid) {
        Userid = other.Userid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasEmail) {
        Email = other.Email;
      }
      if (other.HasToken) {
        Token = other.Token;
      }
      if (other.HasStamp) {
        Stamp = other.Stamp;
      }
      if (other.HasBinVer) {
        BinVer = other.BinVer;
      }
      if (other.HasDataVer) {
        DataVer = other.DataVer;
      }
      if (other.HasMarket) {
        Market = other.Market;
      }
      if (other.HasSessionKey) {
        SessionKey = other.SessionKey;
      }
      if (other.HasRecvCounter) {
        RecvCounter = other.RecvCounter;
      }
      parts_.Add(other.parts_);
      if (other.HasCancelUnregister) {
        CancelUnregister = other.CancelUnregister;
      }
      if (other.HasOs) {
        Os = other.Os;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Userid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
          case 40: {
            Stamp = input.ReadInt32();
            break;
          }
          case 50: {
            BinVer = input.ReadString();
            break;
          }
          case 58: {
            DataVer = input.ReadString();
            break;
          }
          case 66: {
            Market = input.ReadString();
            break;
          }
          case 72: {
            SessionKey = input.ReadInt32();
            break;
          }
          case 80: {
            RecvCounter = input.ReadInt32();
            break;
          }
          case 90: {
            parts_.AddEntriesFrom(input, _repeated_parts_codec);
            break;
          }
          case 96: {
            CancelUnregister = input.ReadBool();
            break;
          }
          case 106: {
            Os = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Userid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
          case 40: {
            Stamp = input.ReadInt32();
            break;
          }
          case 50: {
            BinVer = input.ReadString();
            break;
          }
          case 58: {
            DataVer = input.ReadString();
            break;
          }
          case 66: {
            Market = input.ReadString();
            break;
          }
          case 72: {
            SessionKey = input.ReadInt32();
            break;
          }
          case 80: {
            RecvCounter = input.ReadInt32();
            break;
          }
          case 90: {
            parts_.AddEntriesFrom(ref input, _repeated_parts_codec);
            break;
          }
          case 96: {
            CancelUnregister = input.ReadBool();
            break;
          }
          case 106: {
            Os = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SLoginRes : pb::IMessage<SLoginRes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SLoginRes> _parser = new pb::MessageParser<SLoginRes>(() => new SLoginRes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SLoginRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.SessionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLoginRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLoginRes(SLoginRes other) : this() {
      _hasBits0 = other._hasBits0;
      res_ = other.res_;
      encKey_ = other.encKey_;
      sessionKey_ = other.sessionKey_;
      sentCounter_ = other.sentCounter_;
      json_ = other.json_;
      termsAgreementVer_ = other.termsAgreementVer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLoginRes Clone() {
      return new SLoginRes(this);
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 1;
    private readonly static global::Network.Packet.LoginResult ResDefaultValue = global::Network.Packet.LoginResult.Success;

    private global::Network.Packet.LoginResult res_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.Packet.LoginResult Res {
      get { if ((_hasBits0 & 1) != 0) { return res_; } else { return ResDefaultValue; } }
      set {
        _hasBits0 |= 1;
        res_ = value;
      }
    }
    /// <summary>Gets whether the "res" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRes {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "res" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRes() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "encKey" field.</summary>
    public const int EncKeyFieldNumber = 2;
    private readonly static int EncKeyDefaultValue = 0;

    private int encKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncKey {
      get { if ((_hasBits0 & 2) != 0) { return encKey_; } else { return EncKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        encKey_ = value;
      }
    }
    /// <summary>Gets whether the "encKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "encKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "sessionKey" field.</summary>
    public const int SessionKeyFieldNumber = 3;
    private readonly static int SessionKeyDefaultValue = 0;

    private int sessionKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionKey {
      get { if ((_hasBits0 & 4) != 0) { return sessionKey_; } else { return SessionKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sessionKey_ = value;
      }
    }
    /// <summary>Gets whether the "sessionKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSessionKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "sessionKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSessionKey() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "sentCounter" field.</summary>
    public const int SentCounterFieldNumber = 4;
    private readonly static int SentCounterDefaultValue = 0;

    private int sentCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SentCounter {
      get { if ((_hasBits0 & 8) != 0) { return sentCounter_; } else { return SentCounterDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sentCounter_ = value;
      }
    }
    /// <summary>Gets whether the "sentCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSentCounter {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "sentCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSentCounter() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 5;
    private readonly static string JsonDefaultValue = "";

    private string json_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Json {
      get { return json_ ?? JsonDefaultValue; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "json" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJson {
      get { return json_ != null; }
    }
    /// <summary>Clears the value of the "json" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJson() {
      json_ = null;
    }

    /// <summary>Field number for the "termsAgreementVer" field.</summary>
    public const int TermsAgreementVerFieldNumber = 6;
    private readonly static int TermsAgreementVerDefaultValue = 0;

    private int termsAgreementVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TermsAgreementVer {
      get { if ((_hasBits0 & 16) != 0) { return termsAgreementVer_; } else { return TermsAgreementVerDefaultValue; } }
      set {
        _hasBits0 |= 16;
        termsAgreementVer_ = value;
      }
    }
    /// <summary>Gets whether the "termsAgreementVer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTermsAgreementVer {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "termsAgreementVer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTermsAgreementVer() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SLoginRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SLoginRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Res != other.Res) return false;
      if (EncKey != other.EncKey) return false;
      if (SessionKey != other.SessionKey) return false;
      if (SentCounter != other.SentCounter) return false;
      if (Json != other.Json) return false;
      if (TermsAgreementVer != other.TermsAgreementVer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRes) hash ^= Res.GetHashCode();
      if (HasEncKey) hash ^= EncKey.GetHashCode();
      if (HasSessionKey) hash ^= SessionKey.GetHashCode();
      if (HasSentCounter) hash ^= SentCounter.GetHashCode();
      if (HasJson) hash ^= Json.GetHashCode();
      if (HasTermsAgreementVer) hash ^= TermsAgreementVer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRes) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Res);
      }
      if (HasEncKey) {
        output.WriteRawTag(16);
        output.WriteInt32(EncKey);
      }
      if (HasSessionKey) {
        output.WriteRawTag(24);
        output.WriteInt32(SessionKey);
      }
      if (HasSentCounter) {
        output.WriteRawTag(32);
        output.WriteInt32(SentCounter);
      }
      if (HasJson) {
        output.WriteRawTag(42);
        output.WriteString(Json);
      }
      if (HasTermsAgreementVer) {
        output.WriteRawTag(48);
        output.WriteInt32(TermsAgreementVer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRes) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Res);
      }
      if (HasEncKey) {
        output.WriteRawTag(16);
        output.WriteInt32(EncKey);
      }
      if (HasSessionKey) {
        output.WriteRawTag(24);
        output.WriteInt32(SessionKey);
      }
      if (HasSentCounter) {
        output.WriteRawTag(32);
        output.WriteInt32(SentCounter);
      }
      if (HasJson) {
        output.WriteRawTag(42);
        output.WriteString(Json);
      }
      if (HasTermsAgreementVer) {
        output.WriteRawTag(48);
        output.WriteInt32(TermsAgreementVer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRes) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Res);
      }
      if (HasEncKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncKey);
      }
      if (HasSessionKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionKey);
      }
      if (HasSentCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SentCounter);
      }
      if (HasJson) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (HasTermsAgreementVer) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TermsAgreementVer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SLoginRes other) {
      if (other == null) {
        return;
      }
      if (other.HasRes) {
        Res = other.Res;
      }
      if (other.HasEncKey) {
        EncKey = other.EncKey;
      }
      if (other.HasSessionKey) {
        SessionKey = other.SessionKey;
      }
      if (other.HasSentCounter) {
        SentCounter = other.SentCounter;
      }
      if (other.HasJson) {
        Json = other.Json;
      }
      if (other.HasTermsAgreementVer) {
        TermsAgreementVer = other.TermsAgreementVer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Res = (global::Network.Packet.LoginResult) input.ReadEnum();
            break;
          }
          case 16: {
            EncKey = input.ReadInt32();
            break;
          }
          case 24: {
            SessionKey = input.ReadInt32();
            break;
          }
          case 32: {
            SentCounter = input.ReadInt32();
            break;
          }
          case 42: {
            Json = input.ReadString();
            break;
          }
          case 48: {
            TermsAgreementVer = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Res = (global::Network.Packet.LoginResult) input.ReadEnum();
            break;
          }
          case 16: {
            EncKey = input.ReadInt32();
            break;
          }
          case 24: {
            SessionKey = input.ReadInt32();
            break;
          }
          case 32: {
            SentCounter = input.ReadInt32();
            break;
          }
          case 42: {
            Json = input.ReadString();
            break;
          }
          case 48: {
            TermsAgreementVer = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
