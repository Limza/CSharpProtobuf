// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Network {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIHTmV0d29yayJtCg1DbGllbnRNZXNzYWdlEiQK",
            "BXBjb2RlGAEgAigOMhUuTmV0d29yay5Qcm90b2NvbENvZGUSEAoIcGFja2V0",
            "SWQYAiACKAUSDwoHcGF5bG9hZBgDIAIoDBITCgtyZWN2Q291bnRlchgEIAEo",
            "BSJGCg1TZXJ2ZXJNZXNzYWdlEiQKBXBjb2RlGAEgAigOMhUuTmV0d29yay5Q",
            "cm90b2NvbENvZGUSDwoHcGF5bG9hZBgCIAIoDCJFCgxBZG1pbk1lc3NhZ2US",
            "JAoFcGNvZGUYASACKA4yFS5OZXR3b3JrLlByb3RvY29sQ29kZRIPCgdwYXls",
            "b2FkGAIgAigMKoRPCgxQcm90b2NvbENvZGUSCwoHQ19FUlJPUhABEg8KC0Nf",
            "TE9HSU5fUkVREAoSDwoLU19MT0dJTl9SRVMQCxIQCgxDX0tFRVBfQUxJVkUQ",
            "DBIRCg1DX0pPSU5FRF9HQU1FEA0SGAoUQ19VUERBVEVfREVWSUNFX0lORk8Q",
            "DhIVChFDX1VOUkVHSVNURVJfR0FNRRAPEhMKD0NfR0VUX0NBU0hfSU5GTxAQ",
            "EhsKF0NfVVBEQVRFX1NMRUVQX1NFVFRJTkdTEBESFwoTQ19DSEFOR0VfQ0FG",
            "RV9USVRMRRASEh4KGkNfQ0hBTkdFX0ZJUlNUX1ZJU0lUX1NUT1JFEBMSDwoL",
            "Q19MT0FEX0RBVEEQFBINCglDX09CSl9BREQQFRIOCgpDX09CSl9NT1ZFEBYS",
            "DgoKQ19PQkpfU0VMTBAXEgwKCENfRVhQQU5EEBgSDgoKQ19USUxFX0FERBAZ",
            "Eg8KC0NfVElMRV9TV0FQEBoSDwoLQ19PQkpfU1RPUkUQGxITCg9DX09CSl9T",
            "VE9SRV9BTEwQHBIQCgxDX1NFTExfSU5WRU4QHRIRCg1DX09CSl9SRVBMQUNF",
            "ECISDQoJQ19PQkpfQlVZECMSEQoNQ19PQkpfREVDT19VUBAkEhYKEkNfT0JK",
            "X0NIQU5HRV9DT0xPUhAnEhwKGENfSU5WRU5fT0JKX0NIQU5HRV9DT0xPUhBe",
            "EhYKEkNfQ0FSX0NIQU5HRV9DT0xPUhBfEhoKFkNfT0JKX0VYVEVOU0lPTl9Q",
            "RVJJT0QQYBIYChRDX09CSl9CVVlfVFdPUExVU09ORRBhEhIKDkNfT0JKX0VY",
            "Q0hBTkdFEGISCwoHQ19ST0FTVBAeEg8KC0NfUk9BU1RfRklOEB8SFQoRQ19S",
            "T0FTVF9JTU1FRElBVEUQIBISCg5DX1JPQVNUX1JFVklWRRAhEhsKF0NfQ0hB",
            "UkdFRF9ST0FTVF9IQVJWRVNUECUSFgoSQ19ST0FTVF9GVUxMQ0hBUkdFECYS",
            "DAoIQ19DT0ZGRUUQKBIRCg1DX0NPRkZFRV9TRUxMECkSEAoMQ19DT0ZGRUVf",
            "RklOECoSFwoTQ19DT0ZGRUVfSU1NRURJQVRURRArEhUKEUNfRkxPT1JfQURE",
            "X1RSQVNIECwSEQoNQ19DTEVBTl9GTE9PUhAtEhMKD0NfQ0xFQU5fUkVDWUNM",
            "RRAuEhEKDUNfQ0xFQU5fVEFCTEUQLxITCg9DX0NMRUFOX01BQ0hJTkUQMBIR",
            "Cg1DX0NBTkNFTF9XT1JLEDESEQoNQ19RVUVTVF9TVEFSVBAyEhQKEENfUVVF",
            "U1RfUFJPR1JFU1MQMxISCg5DX1FVRVNUX0ZJTklTSBA0EhMKD0NfUVVFU1Rf",
            "UkVRVUVTVBA1EhQKEENfUVVFU1RfUkVTUE9OU0UQNhIeChpDX1FVRVNUX0lO",
            "U1RBTlRfQ09NUExFVElPThA3EhsKF0NfUVVFU1RfUkVNT1ZFX05FV19GTEFH",
            "EDgSKwonQ19SRVFVRVNUX0lOU1RBTlRfQ09NUExFVElPTl9CWV9JTlZJVEVF",
            "EDkSEAoMQ19TVEFGRl9ISVJFEDwSEwoPQ19TVEFGRl9EUkVTU1VQED0SFwoT",
            "Q19TVEFGRl9CT0RZQU5ETkFNRRBBEhYKEkNfU1RBRkZfRlVMTENIQVJHRRBC",
            "EhEKDUNfU1RBRkZfQk9PU1QQQxIQCgxDX0FWQVRBUl9CVVkQRhIOCgpTX1JF",
            "U1BPTlNFEFASFAoQQ19PUEVOX05FV19TVE9SRRBaEhwKGENfT1BFTl9ORVdf",
            "U1RPUkVfQVRfT05DRRBbEhkKFUNfU0FWRV9ERVNJR05fSElTVE9SWRBkEiEK",
            "HUNfUkVRVUVTVF9ERVNJR05fSElTVE9SWV9EQVRBEGUSEgoOQ19WSVNJVF9G",
            "UklFTkQQbhISCg5DX1ZJU0lUX0FDVElPThBwEhQKEENfVklTSVRfUkVTUE9O",
            "U0UQcRIVChFDX1ZJU0lUX1JFVklWRUFMTBByEhgKFENfUkVTUE9OU0VfUkVW",
            "SVZFQUxMEHMSGAoUQ19BZGRfRmF2b3JpdGVGcmllbmQQdBIbChdDX1JlbW92",
            "ZV9GYXZvcml0ZUZyaWVuZBB1EhAKDENfSU5WSVRFX1NNUxB5EhMKD0NfSU5W",
            "SVRFX0ZSSUVORBB6EhgKFENfSU5WSVRFX0tBS0FPX0VWRU5UEHsSFAoQQ19J",
            "TlZJVEVfRE9STUFOVBB8EhUKEUNfSU5WSVRFX0NPTUVCQUNLEH0SJAogQ19J",
            "TlZJVEVfQ09NRUJBQ0tfQ09NUExFVEVfQ09VTlQQfhIYChNDX0VYUEFOU0lP",
            "Tl9SRVFVRVNUEIIBEhkKFENfRVhQQU5TSU9OX1JFU1BPTlNFEIMBEh4KGUNf",
            "RVhQQU5TSU9OX0JVWVBFUk1JU1NJT04QhAESIQocQ19FWFBBTlNJT05fQlVZ",
            "QUxMUEVSTUlTU0lPThCFARIZChRDX0VYUEFOU0lPTl9DT01QTEVURRCGARIm",
            "CiFDX0VYUEFOU0lPTl9QRVJNSVNTSU9OX0JZX0lOVklURUUQhwESHgoZQ19D",
            "SEFJTl9FWFBBTlNJT05fU0hPUlRFThCJARIjCh5DX1NQRUNJQUxfUkVRVUVT",
            "VF9GT1JfVFVUT1JJQUwQjAESEwoOQ19OUENfUkVBQ1RJT04QlgESFQoQQ19U",
            "T1VUSU5HX1JFU1VMVBCgARIRCgxDX1JFVFJZX1RPVVQQoQESHAoXQ19QQVRS",
            "T05fVE9VVElOR19SRVNVTFQQogESIgodQ19QQVRST05fRVZFTlRfVE9VVElO",
            "R19SRVNVTFQQowESEgoNQ19DTEVBTl9DSEFJUhCqARIVChBDX1JFTE9BRF9C",
            "QUxBTkNFELQBEhQKD0NfRlJFRUdJRlRfU0VORBC+ARIYChNDX0ZSRUVHSUZU",
            "X1JFU1BPTlNFEL8BEhMKDkNfTlBDR0lGVF9TRU5EEMgBEhYKEUNfSU5DX0RB",
            "SUxZX0xJTUlUENIBEhcKEkNfSU5DX1dFRUtMWV9MSU1JVBDTARIRCgxDX1RS",
            "WV9FWFBJUkUQ3AESFwoSQ19HRVRfREFJTFlfUkVXQVJEEOYBEhUKEENfU0lE",
            "RURJU0hfU1RBUlQQ+gESFAoPQ19TSURFRElTSF9TRUxMEPsBEhMKDkNfU0lE",
            "RURJU0hfRklOEPwBEhwKF0NfU0VMTF9TSURFRElTSF9TSE9SVEVOEP0BEh8K",
            "GkNfQ0hBUkdFRF9TSURFRElTSF9IQVJWRVNUEP4BEhoKFUNfU0lERURJU0hf",
            "RlVMTENIQVJHRRD/ARIkCh9DX0NIQVJHSU5HX1NJREVESVNIX01FTlVfQ0hB",
            "TkdFEIACEg8KCkNfTUlYX0lURU0QhAISEwoOQ19NSVhfSVRFTV9GSU4QhQIS",
            "FwoSQ19NSVhfSVRFTV9TSE9SVEVOEIYCEhsKFkNfSVNfSVRFTU1JWEVSX1dP",
            "UktJTkcQhwISFAoPQ19CVVlfQ0FTSF9CRUFOEI4CEhUKEENfSU5DX0JFQU5f",
            "TEVWRUwQjwISFwoSQ19CVVlfUk9BU1RfVElDS0VUEJACEhUKEENfQlVZX0JB",
            "Q0tHUk9VTkQQkwISGAoTQ19DSEFOR0VfQkFDS0dST1VORBCUAhIkCh9DX0NI",
            "QU5HRV9TRUNPTkRGTE9PUl9CQUNLR1JPVU5EEJUCEhIKDUNfVU5MT0NLX0JF",
            "QU4QmAISFAoPQ19VTkxPQ0tfQ09GRkVFEJkCEhYKEUNfVU5MT0NLX1NJREVE",
            "SVNIEJoCEhAKC0NfV1JJVEVfTE9HEKwCEhEKDENfVVNFX0NPVVBPThC2AhId",
            "ChhDX0dFVF9GSVJTVF9DSEFSR0VfQk9OVVMQtwISGAoTU19VU0VfQ09VUE9O",
            "X1JFU1VMVBC4AhIWChFDX0xPVkVMWUdJRlRfU0VORBDAAhIOCglDX0JVWV9B",
            "TEwQzgISFAoPQ19SRVZFUlRfREVTSUdOEM8CEhoKFUNfUk9BU1RUSUNLRVRf",
            "SEFSVkVTVBDTAhIXChJDX0NBU0hUUkVFX0hBUlZFU1QQ1AISGwoWQ19DQVNI",
            "VFJFRV9QVVNIX0VOQUJMRRDVAhIWChFDX0NIRVJSWVRSRUVfSEVMUBDWAhIb",
            "ChZDX0NIRVJSWVRSRUVfSEVMUF9MSVNUENcCEhkKFENfQ0hFUlJZVFJFRV9I",
            "QVJWRVNUENgCEhsKFkNfQ0hFUlJZVFJFRV9JTklUX0hFTFAQ2QISHQoYQ19F",
            "WElTVF9DSEVSUllUUkVFX0lOVkVOENoCEhUKEENfRVhQQU5EX0FUX09OQ0UQ",
            "3gISFgoRQ19USUxFX1RPX1NFVF9BTEwQ6AISFwoSQ19USUxFX1RPX1NFVF9E",
            "UkFXEOkCEiIKHUNfVElMRV9UT19TRVRfQUxMX1RISVJEX1NUT1JFEOoCEiUK",
            "IENfUEFUUk9OX1RPVVRfSU5TVEFOVF9DT01QTEVUSU9OEPICEhYKEUNfQlVZ",
            "X1BBVFJPTl9JVEVNEPMCEhsKFkNfRlVMRklMTF9QQVRST05fRkFWT1IQ9AIS",
            "GQoUQ19HRVRfUEFUUk9OX1BSRVNFTlQQ9QISHwoaQ19QQVRST05fVE9VVF9J",
            "TlNUQU5UX0NBTEwQ9gISIQocQ19HRVRfU1BFQ0lBTF9QQVRST05fUFJFU0VO",
            "VBD3AhIYChNDX1NLSVBfUEFUUk9OX0VWRU5UEPgCEhIKDUNfVEFMS19QQVRS",
            "T04Q+QISIQocQ19TUEVDSUFMX1RBTEtfUEFUUk9OX1JFU1VMVBD6AhIcChdD",
            "X0JBUklTVEFfVEVTVF9QUk9HUkVTUxD8AhIYChNDX0JBUklTVEFfVEVTVF9R",
            "VUlUEP0CEhsKFkNfQkFSSVNUQV9URVNUX1VQR1JBREUQ/gISGQoUQ19CQVJJ",
            "U1RBX0dVSURFX0RPTkUQ/wISGgoVQ19CQVJJU1RBX1RFU1RfU1RBVFVTEIAD",
            "EhgKE0NfUEFUUk9OX09SREVSX0RPTkUQgQMSHAoXQ19QQVRST05fT1JERVJf",
            "RVZBTFVBVEUQggMSIwoeQ19CQVJJU1RBX1RFU1RfVVBHUkFERV9CWV9DQVNI",
            "EIMDEhkKFENfQkFSSVNUQV9URVNUX1JFVFJZEIQDEiIKHUNfUkVGUkVTSF9E",
            "QVRBX0FGVEVSX0xFVkVMX1VQEIYDEiMKHkNfUEFUUk9OX09SREVSX0RPTkVf",
            "QllfTUFDSElORRCHAxIWChFDX0dFVF9SRUNZQ0xFX1RJUBCQAxInCiJDX1JF",
            "U1BPTlNFX0FMTF9RVUVTVF9BTkRfRVhQQU5TSU9OEJoDEhYKEUNfR0VUX0ZS",
            "SUVORF9JTkZPEKQDEhgKE0NfR0VUX0NIQVJHRV9PQkpFQ1QQpQMSHQoYQ19N",
            "SUdSQVRFX0dVRVNUX1RPX0tBS0FPEK4DEhUKEENfSU5EVUNFRF9BQ1RJT04Q",
            "uAMSFAoPQ19QVVJDSEFTRV9HT0xEEMIDEiAKG0NfQVVUT19DT0ZGRUVfTUFD",
            "SElORV9TVEFSVBDMAxIeChlDX0FVVE9fQ09GRkVFX01BQ0hJTkVfRklOEM0D",
            "EiIKHUNfQVVUT19DT0ZGRUVfTUFDSElORV9TSE9SVEVOEM4DEhYKEUNfQ09G",
            "RkVFX0ZJTl9BVVRPEM8DEhUKEENfQlVZX1BPSU5UX0lURU0Q1gMSFQoQQ19C",
            "VVlfU0hPUF9QT0lOVBDXAxIUCg9DX1NUT1JFX0JFQU5CT1gQ4AMSGAoTQ19V",
            "UEdSQURFX0JFQU5ERVBPVBDhAxIhChxDX0NPTkZJUk1fRVhQSVJFRF9TQUxF",
            "X0VWRU5UEPQDEhIKDUNfU0VORF9DTE9WRVIQ/gMSGAoTQ19HRVRfQ0xPVkVS",
            "X1JFV0FSRBD/AxIjCh5DX0NPTkZJUk1fUkVGUkVTSF9DSEFSR0VfRVZFTlQQ",
            "iAQSEAoLQ19YUF9SRVdBUkQQkgQSGQoUQ19SRUZSRVNIX0RBSVNPX0lURU0Q",
            "nAQSFQoQQ19CVVlfREFJU09fSVRFTRCdBBISCg1DX0NBUl9SRVBMQUNFENgE",
            "EiIKHUNfQ0hBTkdFX1JBTkRPTV9GUklFTkRfQ09ORklHELwFEiAKG0NfQ0hB",
            "TkdFX1JBTkRPTV9GUklFTkRfTkFNRRC9BRIiCh1DX0hJREVfUkFORE9NX0ZS",
            "SUVORF9GT0xMT1dFUhC+BRIbChZDX1JFTU9WRV9ISURFX0ZPTExPV0VSEL8F",
            "EiYKIUNfR0VUX0hJREVfUkFORE9NX0ZSSUVORF9GT0xMT1dFUhDABRIdChhD",
            "X0lOX0FQUF9QVVJDSEFTRV9SRVNVTFQQhAcSEwoOQ19HRVRfVFJBTlhfSUQQ",
            "hQcSGQoUU19QVVJDSEFTRV9DT05GSVJNRUQQhgcSHAoXQ19HRVRfREFOQUxf",
            "U0VSVkVSX0lORk8QhwcSFQoQQ19EQU5BTF9TSU1fQklMTBCIBxIXChJDX0RB",
            "TkFMX1JFU0VORF9PVFAQiQcSFgoRQ19EQU5BTF9SRUJJTExfV1AQigcSHAoX",
            "U19EQU5BTF9SRVNVTFRfUkVDRUlWRUQQiwcSGAoTQ19EQU5BTF9ERUxfQVVU",
            "SEtFWRCMBxIjCh5DX0ZPUkNFX0lOX0FQUF9QVVJDSEFTRV9SRVNVTFQQjQcS",
            "FgoRU19HSUZUX0JPWF9MT0FERUQQ6QcSEwoOQ19HSUZUX1JFQ0VJVkUQ6gcS",
            "FgoRQ19SRUxPQURfR0lGVF9CT1gQ6wcSHAoXQ19HSUZUX1JFQ0VJVkVfTVVM",
            "VElQTEUQ7AcSFwoSQ19HRVRfQUxMX1dSSVRJTkdTEPIHEhMKDkNfUFVTSF9X",
            "UklUSU5HEPMHEhoKFUNfR1VFU1RCT09LX0FMTFNFQ1JFVBD0BxITCg5DX1BV",
            "U0hfQ09NTUVOVBD1BxIaChVDX0dVRVNUQk9PS19TRVRfVElUTEUQ9gcSFQoQ",
            "Q19SRU1PVkVfV1JJVElORxD3BxIVChBDX1JFTU9WRV9DT01NRU5UEPgHEhUK",
            "EENfTU9ESUZZX1dSSVRJTkcQ+QcSFQoQQ19NT0RJRllfQ09NTUVOVBD6BxIT",
            "Cg5DX0JVWV9MVUNLWUJPWBCGCBIUCg9DX09QRU5fTFVDS1lCT1gQhwgSFgoR",
            "Q19PUEVOX1NQRUNJQUxCT1gQiAgSFQoQQ19CVVlfUEFDS0FHRUJPWBCJCBIW",
            "ChFDX09QRU5fUEFDS0FHRUJPWBCKCBIVChBDX0JVWV9JVEVNQ09VUE9OEIsI",
            "EhUKEENfVVNFX0lURU1DT1VQT04QjAgSGAoTQ19CVVlfT1BFTl9MVUNLWUJP",
            "WBCOCBISCg1DX0JVWV9OUENHSUZUEJAIEhsKFkNfUkVQT1JUX0ZSSUVORFNf",
            "Q09VTlQQmggSFgoRQ19TRU5EX0VWRU5UX0dJRlQQpAgSFAoPU19FVkVOVF9V",
            "UERBVEVEEK4IEhMKDkNfUkVEVUNFX0VWRU5UEK8IEhIKDUNfU1RBTVBfRVZF",
            "TlQQswgSHwoaQ19TVEFNUF9FVkVOVF9DTEFJTV9SRVdBUkQQtAgSHQoYQ19T",
            "VEFNUF9FVkVOVF9DQVNIX1NUQU1QELUIEh4KGUNfSU5WSVRFX0tBS0FPX0VW",
            "RU5UX1NFTkQQuAgSIAobQ19JTlZJVEVfS0FLQU9fRVZFTlRfVEhBTktTELkI",
            "EhMKDkNfSE9UX0RFQUxfQlVZEMIIEhQKD0NfSE9UX0RFQUxfUE9MTBDDCBIX",
            "ChJDX1NFVF9DQUxFTkRBUl9HTVQQzAgSEwoOQ19VU0VfSlVLRV9CT1gQsAkS",
            "GgoVQ19NQUtFX1NJREVESVNIX1NUQVJUENAPEhgKE0NfTUFLRV9TSURFRElT",
            "SF9GSU4Q0Q8SHAoXQ19NQUtFX1NJREVESVNIX1NIT1JURU4Q0g8SGwoWQ19N",
            "QUtFX1NJREVESVNIX1JFVklWRRDTDxIfChpDX01BS0VfRk9SVFVORUNPT0tJ",
            "RV9TVEFSVBCCEBIdChhDX01BS0VfRk9SVFVORUNPT0tJRV9GSU4QgxASHAoX",
            "Q19HUkFOVF9ORVdfREFJTFlfUVVFU1QQtBASGwoWQ19EQUlMWV9RVUVTVF9Q",
            "Uk9HUkVTUxC1EBIZChRDX0RBSUxZX1FVRVNUX0ZJTklTSBC2EBIlCiBDX0RB",
            "SUxZX1FVRVNUX0lOU1RBTlRfQ09NUExFVElPThC3EBIbChZDX0RBSUxZX1FV",
            "RVNUX0dFVF9EQVRBELgQEhoKFUNfUE9JTlRNSVNTSU9OX0ZJTklTSBDmEBIm",
            "CiFDX1BPSU5UTUlTU0lPTl9JTlNUQU5UX0NPTVBMRVRJT04Q5xASHQoYQ19H",
            "UkFOVF9ORVdfUE9JTlRNSVNTSU9OEOgQEh4KGUNfUE9JTlRNSVNTSU9OX0dF",
            "VFBSRVNFTlQQ6RASFQoQQ19PUEVOX1BPSU5UX0JPWBDrEBIUCg9DX0JVWV9C",
            "T1hfUE9JTlQQ7BASGwoWQ19HRVRfT05USU1FX0JPWF9QT0lOVBDtEBIWChFD",
            "X0VWRU5URElDRV9SRVNFVBDwEBIXChJDX0VWRU5URElDRV9GSU5JU0gQ8RAS",
            "GQoUQ19FVkVOVERJQ0VfVVNFX0RJQ0UQ8hASGQoUQ19FVkVOVERJQ0VfQlVZ",
            "X0RJQ0UQ8xASJwoiQ19FVkVOVERJQ0VfRk9SQ0VfTU9WRV9TVEFSVF9QT0lO",
            "VBD0EBInCiJDX0VWRU5URElDRV9GT1JDRV9NT1ZFX0JZX0dPTERDQVJEEPUQ",
            "EhoKFUNfRVZFTlRESUNFX1NFTkRfR0lGVBD2EBIaChVDX0VWRU5URElDRV9S",
            "RUNWX0dJRlQQ9xASGwoWQ19FVkVOVERJQ0VfUkVTRVRfR0lGVBD4EBIcChdD",
            "X0VWRU5URElDRV9GSVJTVF9WSVNJVBD5EBIcChdDX0VWRU5UR09NX0NIRUNL",
            "X1JFV0FSRBCEERIaChVDX0JJTkdPTUlTU0lPTl9GSU5JU0gQjhESJgohQ19C",
            "SU5HT01JU1NJT05fSU5TVEFOVF9DT01QTEVUSU9OEI8REh0KGENfR1JBTlRf",
            "TkVXX0JJTkdPTUlTU0lPThCQERIeChlDX0JJTkdPTUlTU0lPTl9HRVRQUkVT",
            "RU5UEJEREh0KGENfQklOR09NSVNTSU9OX0dFVE5VTUJFUhCSERIfChpDX0JJ",
            "TkdPTUlTU0lPTl9RVUVTVF9SRVNFVBCTERIdChhDX0dFVF9BQ0hJRVZFTUVO",
            "VF9SRVdBUkQQmBESGgoVQ19QUk9DRUVEX0FDSElFVkVNRU5UEJkREhMKDkNf",
            "VEFST1RfUkVXQVJEEJoREhgKE0NfQVBQTFlfVEFST1RfU0tJTEwQmxESFQoQ",
            "Q19UQVJPVF9RVUVTVElPThCcERIXChJDX1RBUk9UX0JVWV9USUNLRVQQnRES",
            "IwoeQ19USElSRFNUT1JFX0hPU1RfREFJTFlfUkVXQVJEEIYSEiAKG0NfVEhJ",
            "UkRTVE9SRV9DT01QTEVURV9GQVZPUhCHEhIoCiNDX1RISVJEU1RPUkVfSU5T",
            "VEFOVF9GSUxMX1NBTEVQT0lOVBCQEhIkCh9DX1RISVJEU1RPUkVfSU5TVEFO",
            "VF9GSUxMX0ZBVk9SEJESEhIKDUNfUkVMT0FEX0RBVEEQoB8SFgoRQV9TRVJW",
            "RVJfUkVTUE9OU0UQuBcSFQoQQV9OT1RJRllfTUVTU0FHRRC5FxIQCgtBX0tJ",
            "Q0tfVVNFUhC6FxIXChJBX1VQREFURV9FVkVOVF9YTUwQuxcSFQoQQV9SRUxP",
            "QURfR0lGVEJPWBC8FxIUCg9BX1BPUFVQX01FU1NBR0UQvRcSGwoWQ19IQVJW",
            "RVNUX0FMTF9XT1JLX09CShCcGBIUCg9TX1BPUFVQX01FU1NBR0UQ2DYSGgoV",
            "Q19VU0VfQ0hFUlJZX1JPVUxFVFRFEIAZEhgKE0NfQlVZX1JPVUxFVFRFX0JF",
            "QU4QgRkSFAoPQ19TVUJNSVRfU1VSVkVZEKEfEhkKFENfU1VCTUlUX1NVUlZF",
            "WV9URVNUEKIfEhgKE0NfUkVTRVRfU1VSVkVZX1RFU1QQox8SGQoUQ19FWFBB",
            "TkRfU0VDT05ERkxPT1IQhCASGAoTQ19FWFBBTkRfVEhJUkRTVE9SRRCFIBIg",
            "ChtDX0VYUEFORF9USElSRFNUT1JFX0lOU1RBTlQQhiASIQocQ19FWFBBTkRf",
            "VEhJUkRTVE9SRV9DT01QTEVURRCHIBIZChRDX1JFU1RBUlRfVEhJUkRTVE9S",
            "RRCIIBIkCh9DX1RISVJEU1RPUkVfUkVDVl9FWFBBTkRfUkVXQVJEEIkgEiYK",
            "IUNfVEhJUkRTVE9SRV9SRUNBTENfRVhQQU5EX1JFV0FSRBCKIBIiCh1DX1RI",
            "SVJEU1RPUkVfUkVDVl9SQVJFX1JFV0FSRBCLIBIjCh5DX1JFU1RBUlRfVEhJ",
            "UkRTVE9SRV9FWFBBTlNJT04QjCASFgoRQ19FWFBBTkRfVE9QRkxPT1IQjSAS",
            "EwoOQ19EVVRDSF9DT0ZGRUUQ6CASGAoTQ19EVVRDSF9MSVFVSURfTUFLRRDp",
            "IBIcChdDX0RVVENIX0xJUVVJRF9NQUtFX0ZJThDqIBIeChlDX0RVVENIX0xJ",
            "UVVJRF9TRUxMX1NUQVJUEOsgEhgKE0NfRFVUQ0hfTElRVUlEX1NFTEwQ7CAS",
            "HAoXQ19EVVRDSF9MSVFVSURfU0VMTF9GSU4Q7SASIwoeQ19EVVRDSF9MSVFV",
            "SURfTUFLRV9JTU1FRElBVFRFEO4gEhoKFUNfUEFUUk9OX01BQ0hJTkVfQ0FM",
            "TBDMIRIZChRDX1BBVFJPTl9NQUNISU5FX0ZJThDNIRIZChRDX0NPTUVCQUNL",
            "X1NFTkRfR0lGVBCxIhIZChRDX0NPTUVCQUNLX1JFQ1ZfR0lGVBCyIhIYChND",
            "X0NIQVJHRV9DT0xMRUNUSU9OEIgnEhkKFENfUkVDRUlWRV9DSEFSR0VfT0JK",
            "EIknEh4KGUNfUkVDRUlWRV9DT0xMRUNUSU9OX0dJRlQQiicSHgoZQ19SRUNF",
            "SVZFX0xFVkVMX1VQX1JFV0FSRBCSJxIQCgtDX1BFVF9BV0FLRRDwLhIVChBD",
            "X1BFVF9QVVRUT1NMRUVQEPEuEhYKEUNfUEVUX1dJVEhQTEFZSU5HEPIuEg8K",
            "CkNfUEVUX0NBUkUQ8y4SEAoLQ19QRVRfVFJFQVQQ9C4SGAoTQ19QRVRfU1RB",
            "VFVTX1VQREFURRD1LhIVChBDX1BFVF9VU0VSQUNUSU9OEPYuEhMKDkNfUEVU",
            "X0VBVF9GRUVEEPcuEhQKD0NfUEVUX0VBVF9TTkFDSxD4LhITCg5DX0JVWV9Q",
            "RVRfSVRFTRCOLxIUCg9DX0ZJTExfUEVUX0ZFRUQQjy8SFQoQQ19DTEVBUl9Q",
            "RVRfRkVFRBCQLxIXChJDX1BFVF9QTEFZX1dJVEhPQkoQkS8SHAoXQ19QRVRf",
            "UFVUX1NUQVRVU19VUERBVEUQki8SEgoNQ19QRVRfRFJFU1NVUBCiLxIdChhD",
            "X1BFVF9MRUFSTl9TRUNPTkRfU0tJTEwQti8SFwoSQ19QRVRfU0tJTExfQ0hB",
            "TkdFELcvEhQKD0NfUEVUX1VTRV9TS0lMTBC4LxIgChtDX1BFVF9VU0VfU0tJ",
            "TExfR0VUUkVTT1VSQ0UQuS8SHQoYQ19QRVRfVVNFX1NLSUxMX1RPVVRISU5U",
            "ELovEhQKD0NfUEVUX1JFX05BTUlORxDULxIbChZDX1BFVF9SRVZFUlRfQkVG",
            "T1JFX0hQEN4vEhAKC0NfUEVUX0FET1BUELgwEg4KCUNfUEVUX1BVVBDCMBIP",
            "CgpDX1BFVF9DVVJFEMMwEg8KCkNfUEVUX1RBS0UQxDASGgoVQ19QRVRfUFVU",
            "X1NJWkVfRVhQQU5EEMwwEhEKDENfUEVUX0NIQU5HRRDWMBIYChNDX1VOUkVH",
            "SVNURVJfQ0FOQ0VMEMA+EhIKDUNfREVWX0NPTU1BTkQQqEYSEgoNQ19ERVZf",
            "VElNRVNFVBCpRhIWChFDX0NIRVJSWV9ST0FTVElORxCjBBIXChJDX0NIRVJS",
            "WV9ST0FTVF9GSU4QpAQSGgoVQ19DSEVSUllfUk9BU1RfUkVWSVZFEKUEEh0K",
            "GENfQ0hFUlJZX1JPQVNUX0lNTUVESUFURRCmBBIkCh9DX1RIRU1BQ09MTEVD",
            "VElPTkxJU1RfUE9JTlRfR0VUEKcEEiUKIENfVEhFTUFDT0xMRUNUSU9OTElT",
            "VF9SRVdBUkRfR0VUEKgEEiUKIENfVEhFTUFDT0xMRUNUSU9OTElTVF9RVUVT",
            "VENIRUNLEKkEEhoKFUNfQ0hFUlJZX1JPQVNUX0NBTkNFTBCqBBIZChRDX1NQ",
            "RUNJQUxPUkRFUl9DTEVBUhCrBBIaChVDX1NQRUNJQUxPUkRFUl9DQU5DRUwQ",
            "rAQSGQoUQ19TUEVDSUFMT1JERVJfUkVORVcQrQQSHgoZQ19DQVNIVVNFUkVX",
            "QVJEX0NBU0hDSEVDSxCuBBIYChNDX0NBU0hVU0VSRVdBUkRfR0VUEK8EEhYK",
            "EUNfU1BFQ0lBTF9QQUNLQUdFELAEEhMKDkNfTFZVUFNIT1BfQlVZELEEEiUK",
            "IENfTFZVUFNIT1BfUFVSQ0hBU0VJVEVNX0JVWUNIRUNLELIEEhkKFENfTkVX",
            "QklOR09NSVNTSU9OR0VUELMEEhkKFENfTkVXUE9JTlRNSVNTSU9OR0VUELQE",
            "EhUKEENfTkVXUE9JTlRCT1hHRVQQtQQSGQoUQ19ORVdHT1RPRk1BTkFHRVJH",
            "RVQQuwQSHAoXQ19PUEVOX05FV19DT0ZGRUVfVFJVQ0sQtgQSHQoYQ19DT0ZF",
            "RVRSVUNLX0dBTUVfRklOSVNIELcEEhsKFkNfR0VUX0NPRkZFRVRSVUNLX0dJ",
            "RlQQuAQSIAobQ19CVVlfQ09GRkVFVFJVQ0tfU0hPUF9JVEVNELkEEh8KGkNf",
            "Q0hBTkdFX0NGVF9DVVNUT01FUl9JVEVNELoEEigKI0NfQ09GRkVFVFJVQ0tf",
            "U1BFQ0lBTF9PUkRFUl9NQU5BR0VSEL0EEicKIkNfQ09GRkVFVFJVQ0tfU1BF",
            "Q0lBTF9PUkRFUl9GSU5JU0gQvgQSJgohQ19DT0ZGRUVUUlVDS19TUEVDSUFM",
            "X09SREVSX1JFTkVXEL8EEh0KGENfQ09GRkVFVFJVQ0tfR0FNRV9TVEFSVBDA",
            "BBIbChZDX0dFVF9DT0ZGRUVUUlVDS19SQU5LEMEEEhcKEkNfT1BFTl9MVUNL",
            "WV9CT1hFUxDqCxIpCiRDX0FVVE9fVElDS0VUX1JPQVNUSU5HX01BQ0hJTkVf",
            "U1RBUlQQ7QsSJwoiQ19BVVRPX1RJQ0tFVF9ST0FTVElOR19NQUNISU5FX0ZJ",
            "ThDuCxIrCiZDX0FVVE9fVElDS0VUX1JPQVNUSU5HX01BQ0hJTkVfU0hPUlRF",
            "ThDvCxIqCiVDX0FVVE9fVElDS0VUX1JPQVNUSU5HX01BQ0hJTkVfUkVWSVZF",
            "EPALQgpCCFByb3RvY29s"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Network.ProtocolCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.ClientMessage), global::Network.ClientMessage.Parser, new[]{ "Pcode", "PacketId", "Payload", "RecvCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.ServerMessage), global::Network.ServerMessage.Parser, new[]{ "Pcode", "Payload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.AdminMessage), global::Network.AdminMessage.Parser, new[]{ "Pcode", "Payload" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ProtocolCode {
    [pbr::OriginalName("C_ERROR")] CError = 1,
    [pbr::OriginalName("C_LOGIN_REQ")] CLoginReq = 10,
    [pbr::OriginalName("S_LOGIN_RES")] SLoginRes = 11,
    [pbr::OriginalName("C_KEEP_ALIVE")] CKeepAlive = 12,
    [pbr::OriginalName("C_JOINED_GAME")] CJoinedGame = 13,
    [pbr::OriginalName("C_UPDATE_DEVICE_INFO")] CUpdateDeviceInfo = 14,
    [pbr::OriginalName("C_UNREGISTER_GAME")] CUnregisterGame = 15,
    [pbr::OriginalName("C_GET_CASH_INFO")] CGetCashInfo = 16,
    [pbr::OriginalName("C_UPDATE_SLEEP_SETTINGS")] CUpdateSleepSettings = 17,
    [pbr::OriginalName("C_CHANGE_CAFE_TITLE")] CChangeCafeTitle = 18,
    [pbr::OriginalName("C_CHANGE_FIRST_VISIT_STORE")] CChangeFirstVisitStore = 19,
    [pbr::OriginalName("C_LOAD_DATA")] CLoadData = 20,
    [pbr::OriginalName("C_OBJ_ADD")] CObjAdd = 21,
    [pbr::OriginalName("C_OBJ_MOVE")] CObjMove = 22,
    [pbr::OriginalName("C_OBJ_SELL")] CObjSell = 23,
    [pbr::OriginalName("C_EXPAND")] CExpand = 24,
    [pbr::OriginalName("C_TILE_ADD")] CTileAdd = 25,
    [pbr::OriginalName("C_TILE_SWAP")] CTileSwap = 26,
    [pbr::OriginalName("C_OBJ_STORE")] CObjStore = 27,
    [pbr::OriginalName("C_OBJ_STORE_ALL")] CObjStoreAll = 28,
    [pbr::OriginalName("C_SELL_INVEN")] CSellInven = 29,
    [pbr::OriginalName("C_OBJ_REPLACE")] CObjReplace = 34,
    [pbr::OriginalName("C_OBJ_BUY")] CObjBuy = 35,
    [pbr::OriginalName("C_OBJ_DECO_UP")] CObjDecoUp = 36,
    [pbr::OriginalName("C_OBJ_CHANGE_COLOR")] CObjChangeColor = 39,
    [pbr::OriginalName("C_INVEN_OBJ_CHANGE_COLOR")] CInvenObjChangeColor = 94,
    [pbr::OriginalName("C_CAR_CHANGE_COLOR")] CCarChangeColor = 95,
    [pbr::OriginalName("C_OBJ_EXTENSION_PERIOD")] CObjExtensionPeriod = 96,
    [pbr::OriginalName("C_OBJ_BUY_TWOPLUSONE")] CObjBuyTwoplusone = 97,
    [pbr::OriginalName("C_OBJ_EXCHANGE")] CObjExchange = 98,
    [pbr::OriginalName("C_ROAST")] CRoast = 30,
    [pbr::OriginalName("C_ROAST_FIN")] CRoastFin = 31,
    [pbr::OriginalName("C_ROAST_IMMEDIATE")] CRoastImmediate = 32,
    [pbr::OriginalName("C_ROAST_REVIVE")] CRoastRevive = 33,
    [pbr::OriginalName("C_CHARGED_ROAST_HARVEST")] CChargedRoastHarvest = 37,
    [pbr::OriginalName("C_ROAST_FULLCHARGE")] CRoastFullcharge = 38,
    [pbr::OriginalName("C_COFFEE")] CCoffee = 40,
    [pbr::OriginalName("C_COFFEE_SELL")] CCoffeeSell = 41,
    [pbr::OriginalName("C_COFFEE_FIN")] CCoffeeFin = 42,
    [pbr::OriginalName("C_COFFEE_IMMEDIATTE")] CCoffeeImmediatte = 43,
    [pbr::OriginalName("C_FLOOR_ADD_TRASH")] CFloorAddTrash = 44,
    [pbr::OriginalName("C_CLEAN_FLOOR")] CCleanFloor = 45,
    [pbr::OriginalName("C_CLEAN_RECYCLE")] CCleanRecycle = 46,
    [pbr::OriginalName("C_CLEAN_TABLE")] CCleanTable = 47,
    [pbr::OriginalName("C_CLEAN_MACHINE")] CCleanMachine = 48,
    [pbr::OriginalName("C_CANCEL_WORK")] CCancelWork = 49,
    [pbr::OriginalName("C_QUEST_START")] CQuestStart = 50,
    [pbr::OriginalName("C_QUEST_PROGRESS")] CQuestProgress = 51,
    [pbr::OriginalName("C_QUEST_FINISH")] CQuestFinish = 52,
    [pbr::OriginalName("C_QUEST_REQUEST")] CQuestRequest = 53,
    [pbr::OriginalName("C_QUEST_RESPONSE")] CQuestResponse = 54,
    [pbr::OriginalName("C_QUEST_INSTANT_COMPLETION")] CQuestInstantCompletion = 55,
    [pbr::OriginalName("C_QUEST_REMOVE_NEW_FLAG")] CQuestRemoveNewFlag = 56,
    [pbr::OriginalName("C_REQUEST_INSTANT_COMPLETION_BY_INVITEE")] CRequestInstantCompletionByInvitee = 57,
    [pbr::OriginalName("C_STAFF_HIRE")] CStaffHire = 60,
    [pbr::OriginalName("C_STAFF_DRESSUP")] CStaffDressup = 61,
    [pbr::OriginalName("C_STAFF_BODYANDNAME")] CStaffBodyandname = 65,
    [pbr::OriginalName("C_STAFF_FULLCHARGE")] CStaffFullcharge = 66,
    [pbr::OriginalName("C_STAFF_BOOST")] CStaffBoost = 67,
    [pbr::OriginalName("C_AVATAR_BUY")] CAvatarBuy = 70,
    [pbr::OriginalName("S_RESPONSE")] SResponse = 80,
    [pbr::OriginalName("C_OPEN_NEW_STORE")] COpenNewStore = 90,
    [pbr::OriginalName("C_OPEN_NEW_STORE_AT_ONCE")] COpenNewStoreAtOnce = 91,
    [pbr::OriginalName("C_SAVE_DESIGN_HISTORY")] CSaveDesignHistory = 100,
    [pbr::OriginalName("C_REQUEST_DESIGN_HISTORY_DATA")] CRequestDesignHistoryData = 101,
    [pbr::OriginalName("C_VISIT_FRIEND")] CVisitFriend = 110,
    [pbr::OriginalName("C_VISIT_ACTION")] CVisitAction = 112,
    [pbr::OriginalName("C_VISIT_RESPONSE")] CVisitResponse = 113,
    [pbr::OriginalName("C_VISIT_REVIVEALL")] CVisitReviveall = 114,
    [pbr::OriginalName("C_RESPONSE_REVIVEALL")] CResponseReviveall = 115,
    [pbr::OriginalName("C_Add_FavoriteFriend")] CAddFavoriteFriend = 116,
    [pbr::OriginalName("C_Remove_FavoriteFriend")] CRemoveFavoriteFriend = 117,
    [pbr::OriginalName("C_INVITE_SMS")] CInviteSms = 121,
    [pbr::OriginalName("C_INVITE_FRIEND")] CInviteFriend = 122,
    [pbr::OriginalName("C_INVITE_KAKAO_EVENT")] CInviteKakaoEvent = 123,
    [pbr::OriginalName("C_INVITE_DORMANT")] CInviteDormant = 124,
    [pbr::OriginalName("C_INVITE_COMEBACK")] CInviteComeback = 125,
    [pbr::OriginalName("C_INVITE_COMEBACK_COMPLETE_COUNT")] CInviteComebackCompleteCount = 126,
    [pbr::OriginalName("C_EXPANSION_REQUEST")] CExpansionRequest = 130,
    [pbr::OriginalName("C_EXPANSION_RESPONSE")] CExpansionResponse = 131,
    [pbr::OriginalName("C_EXPANSION_BUYPERMISSION")] CExpansionBuypermission = 132,
    [pbr::OriginalName("C_EXPANSION_BUYALLPERMISSION")] CExpansionBuyallpermission = 133,
    [pbr::OriginalName("C_EXPANSION_COMPLETE")] CExpansionComplete = 134,
    [pbr::OriginalName("C_EXPANSION_PERMISSION_BY_INVITEE")] CExpansionPermissionByInvitee = 135,
    [pbr::OriginalName("C_CHAIN_EXPANSION_SHORTEN")] CChainExpansionShorten = 137,
    [pbr::OriginalName("C_SPECIAL_REQUEST_FOR_TUTORIAL")] CSpecialRequestForTutorial = 140,
    [pbr::OriginalName("C_NPC_REACTION")] CNpcReaction = 150,
    [pbr::OriginalName("C_TOUTING_RESULT")] CToutingResult = 160,
    [pbr::OriginalName("C_RETRY_TOUT")] CRetryTout = 161,
    [pbr::OriginalName("C_PATRON_TOUTING_RESULT")] CPatronToutingResult = 162,
    [pbr::OriginalName("C_PATRON_EVENT_TOUTING_RESULT")] CPatronEventToutingResult = 163,
    [pbr::OriginalName("C_CLEAN_CHAIR")] CCleanChair = 170,
    [pbr::OriginalName("C_RELOAD_BALANCE")] CReloadBalance = 180,
    [pbr::OriginalName("C_FREEGIFT_SEND")] CFreegiftSend = 190,
    [pbr::OriginalName("C_FREEGIFT_RESPONSE")] CFreegiftResponse = 191,
    [pbr::OriginalName("C_NPCGIFT_SEND")] CNpcgiftSend = 200,
    [pbr::OriginalName("C_INC_DAILY_LIMIT")] CIncDailyLimit = 210,
    [pbr::OriginalName("C_INC_WEEKLY_LIMIT")] CIncWeeklyLimit = 211,
    [pbr::OriginalName("C_TRY_EXPIRE")] CTryExpire = 220,
    [pbr::OriginalName("C_GET_DAILY_REWARD")] CGetDailyReward = 230,
    [pbr::OriginalName("C_SIDEDISH_START")] CSidedishStart = 250,
    [pbr::OriginalName("C_SIDEDISH_SELL")] CSidedishSell = 251,
    [pbr::OriginalName("C_SIDEDISH_FIN")] CSidedishFin = 252,
    [pbr::OriginalName("C_SELL_SIDEDISH_SHORTEN")] CSellSidedishShorten = 253,
    [pbr::OriginalName("C_CHARGED_SIDEDISH_HARVEST")] CChargedSidedishHarvest = 254,
    [pbr::OriginalName("C_SIDEDISH_FULLCHARGE")] CSidedishFullcharge = 255,
    [pbr::OriginalName("C_CHARGING_SIDEDISH_MENU_CHANGE")] CChargingSidedishMenuChange = 256,
    [pbr::OriginalName("C_MIX_ITEM")] CMixItem = 260,
    [pbr::OriginalName("C_MIX_ITEM_FIN")] CMixItemFin = 261,
    [pbr::OriginalName("C_MIX_ITEM_SHORTEN")] CMixItemShorten = 262,
    [pbr::OriginalName("C_IS_ITEMMIXER_WORKING")] CIsItemmixerWorking = 263,
    [pbr::OriginalName("C_BUY_CASH_BEAN")] CBuyCashBean = 270,
    [pbr::OriginalName("C_INC_BEAN_LEVEL")] CIncBeanLevel = 271,
    [pbr::OriginalName("C_BUY_ROAST_TICKET")] CBuyRoastTicket = 272,
    [pbr::OriginalName("C_BUY_BACKGROUND")] CBuyBackground = 275,
    [pbr::OriginalName("C_CHANGE_BACKGROUND")] CChangeBackground = 276,
    [pbr::OriginalName("C_CHANGE_SECONDFLOOR_BACKGROUND")] CChangeSecondfloorBackground = 277,
    [pbr::OriginalName("C_UNLOCK_BEAN")] CUnlockBean = 280,
    [pbr::OriginalName("C_UNLOCK_COFFEE")] CUnlockCoffee = 281,
    [pbr::OriginalName("C_UNLOCK_SIDEDISH")] CUnlockSidedish = 282,
    [pbr::OriginalName("C_WRITE_LOG")] CWriteLog = 300,
    [pbr::OriginalName("C_USE_COUPON")] CUseCoupon = 310,
    [pbr::OriginalName("C_GET_FIRST_CHARGE_BONUS")] CGetFirstChargeBonus = 311,
    [pbr::OriginalName("S_USE_COUPON_RESULT")] SUseCouponResult = 312,
    [pbr::OriginalName("C_LOVELYGIFT_SEND")] CLovelygiftSend = 320,
    [pbr::OriginalName("C_BUY_ALL")] CBuyAll = 334,
    [pbr::OriginalName("C_REVERT_DESIGN")] CRevertDesign = 335,
    [pbr::OriginalName("C_ROASTTICKET_HARVEST")] CRoastticketHarvest = 339,
    [pbr::OriginalName("C_CASHTREE_HARVEST")] CCashtreeHarvest = 340,
    [pbr::OriginalName("C_CASHTREE_PUSH_ENABLE")] CCashtreePushEnable = 341,
    [pbr::OriginalName("C_CHERRYTREE_HELP")] CCherrytreeHelp = 342,
    [pbr::OriginalName("C_CHERRYTREE_HELP_LIST")] CCherrytreeHelpList = 343,
    [pbr::OriginalName("C_CHERRYTREE_HARVEST")] CCherrytreeHarvest = 344,
    [pbr::OriginalName("C_CHERRYTREE_INIT_HELP")] CCherrytreeInitHelp = 345,
    [pbr::OriginalName("C_EXIST_CHERRYTREE_INVEN")] CExistCherrytreeInven = 346,
    [pbr::OriginalName("C_EXPAND_AT_ONCE")] CExpandAtOnce = 350,
    [pbr::OriginalName("C_TILE_TO_SET_ALL")] CTileToSetAll = 360,
    [pbr::OriginalName("C_TILE_TO_SET_DRAW")] CTileToSetDraw = 361,
    [pbr::OriginalName("C_TILE_TO_SET_ALL_THIRD_STORE")] CTileToSetAllThirdStore = 362,
    [pbr::OriginalName("C_PATRON_TOUT_INSTANT_COMPLETION")] CPatronToutInstantCompletion = 370,
    [pbr::OriginalName("C_BUY_PATRON_ITEM")] CBuyPatronItem = 371,
    [pbr::OriginalName("C_FULFILL_PATRON_FAVOR")] CFulfillPatronFavor = 372,
    [pbr::OriginalName("C_GET_PATRON_PRESENT")] CGetPatronPresent = 373,
    [pbr::OriginalName("C_PATRON_TOUT_INSTANT_CALL")] CPatronToutInstantCall = 374,
    [pbr::OriginalName("C_GET_SPECIAL_PATRON_PRESENT")] CGetSpecialPatronPresent = 375,
    [pbr::OriginalName("C_SKIP_PATRON_EVENT")] CSkipPatronEvent = 376,
    [pbr::OriginalName("C_TALK_PATRON")] CTalkPatron = 377,
    [pbr::OriginalName("C_SPECIAL_TALK_PATRON_RESULT")] CSpecialTalkPatronResult = 378,
    [pbr::OriginalName("C_BARISTA_TEST_PROGRESS")] CBaristaTestProgress = 380,
    [pbr::OriginalName("C_BARISTA_TEST_QUIT")] CBaristaTestQuit = 381,
    [pbr::OriginalName("C_BARISTA_TEST_UPGRADE")] CBaristaTestUpgrade = 382,
    [pbr::OriginalName("C_BARISTA_GUIDE_DONE")] CBaristaGuideDone = 383,
    [pbr::OriginalName("C_BARISTA_TEST_STATUS")] CBaristaTestStatus = 384,
    [pbr::OriginalName("C_PATRON_ORDER_DONE")] CPatronOrderDone = 385,
    [pbr::OriginalName("C_PATRON_ORDER_EVALUATE")] CPatronOrderEvaluate = 386,
    [pbr::OriginalName("C_BARISTA_TEST_UPGRADE_BY_CASH")] CBaristaTestUpgradeByCash = 387,
    [pbr::OriginalName("C_BARISTA_TEST_RETRY")] CBaristaTestRetry = 388,
    [pbr::OriginalName("C_REFRESH_DATA_AFTER_LEVEL_UP")] CRefreshDataAfterLevelUp = 390,
    [pbr::OriginalName("C_PATRON_ORDER_DONE_BY_MACHINE")] CPatronOrderDoneByMachine = 391,
    [pbr::OriginalName("C_GET_RECYCLE_TIP")] CGetRecycleTip = 400,
    [pbr::OriginalName("C_RESPONSE_ALL_QUEST_AND_EXPANSION")] CResponseAllQuestAndExpansion = 410,
    [pbr::OriginalName("C_GET_FRIEND_INFO")] CGetFriendInfo = 420,
    [pbr::OriginalName("C_GET_CHARGE_OBJECT")] CGetChargeObject = 421,
    [pbr::OriginalName("C_MIGRATE_GUEST_TO_KAKAO")] CMigrateGuestToKakao = 430,
    [pbr::OriginalName("C_INDUCED_ACTION")] CInducedAction = 440,
    [pbr::OriginalName("C_PURCHASE_GOLD")] CPurchaseGold = 450,
    [pbr::OriginalName("C_AUTO_COFFEE_MACHINE_START")] CAutoCoffeeMachineStart = 460,
    [pbr::OriginalName("C_AUTO_COFFEE_MACHINE_FIN")] CAutoCoffeeMachineFin = 461,
    [pbr::OriginalName("C_AUTO_COFFEE_MACHINE_SHORTEN")] CAutoCoffeeMachineShorten = 462,
    [pbr::OriginalName("C_COFFEE_FIN_AUTO")] CCoffeeFinAuto = 463,
    [pbr::OriginalName("C_BUY_POINT_ITEM")] CBuyPointItem = 470,
    [pbr::OriginalName("C_BUY_SHOP_POINT")] CBuyShopPoint = 471,
    [pbr::OriginalName("C_STORE_BEANBOX")] CStoreBeanbox = 480,
    [pbr::OriginalName("C_UPGRADE_BEANDEPOT")] CUpgradeBeandepot = 481,
    [pbr::OriginalName("C_CONFIRM_EXPIRED_SALE_EVENT")] CConfirmExpiredSaleEvent = 500,
    [pbr::OriginalName("C_SEND_CLOVER")] CSendClover = 510,
    [pbr::OriginalName("C_GET_CLOVER_REWARD")] CGetCloverReward = 511,
    [pbr::OriginalName("C_CONFIRM_REFRESH_CHARGE_EVENT")] CConfirmRefreshChargeEvent = 520,
    [pbr::OriginalName("C_XP_REWARD")] CXpReward = 530,
    [pbr::OriginalName("C_REFRESH_DAISO_ITEM")] CRefreshDaisoItem = 540,
    [pbr::OriginalName("C_BUY_DAISO_ITEM")] CBuyDaisoItem = 541,
    [pbr::OriginalName("C_CAR_REPLACE")] CCarReplace = 600,
    [pbr::OriginalName("C_CHANGE_RANDOM_FRIEND_CONFIG")] CChangeRandomFriendConfig = 700,
    [pbr::OriginalName("C_CHANGE_RANDOM_FRIEND_NAME")] CChangeRandomFriendName = 701,
    [pbr::OriginalName("C_HIDE_RANDOM_FRIEND_FOLLOWER")] CHideRandomFriendFollower = 702,
    [pbr::OriginalName("C_REMOVE_HIDE_FOLLOWER")] CRemoveHideFollower = 703,
    [pbr::OriginalName("C_GET_HIDE_RANDOM_FRIEND_FOLLOWER")] CGetHideRandomFriendFollower = 704,
    [pbr::OriginalName("C_IN_APP_PURCHASE_RESULT")] CInAppPurchaseResult = 900,
    [pbr::OriginalName("C_GET_TRANX_ID")] CGetTranxId = 901,
    [pbr::OriginalName("S_PURCHASE_CONFIRMED")] SPurchaseConfirmed = 902,
    [pbr::OriginalName("C_GET_DANAL_SERVER_INFO")] CGetDanalServerInfo = 903,
    [pbr::OriginalName("C_DANAL_SIM_BILL")] CDanalSimBill = 904,
    [pbr::OriginalName("C_DANAL_RESEND_OTP")] CDanalResendOtp = 905,
    [pbr::OriginalName("C_DANAL_REBILL_WP")] CDanalRebillWp = 906,
    [pbr::OriginalName("S_DANAL_RESULT_RECEIVED")] SDanalResultReceived = 907,
    [pbr::OriginalName("C_DANAL_DEL_AUTHKEY")] CDanalDelAuthkey = 908,
    [pbr::OriginalName("C_FORCE_IN_APP_PURCHASE_RESULT")] CForceInAppPurchaseResult = 909,
    [pbr::OriginalName("S_GIFT_BOX_LOADED")] SGiftBoxLoaded = 1001,
    [pbr::OriginalName("C_GIFT_RECEIVE")] CGiftReceive = 1002,
    [pbr::OriginalName("C_RELOAD_GIFT_BOX")] CReloadGiftBox = 1003,
    [pbr::OriginalName("C_GIFT_RECEIVE_MULTIPLE")] CGiftReceiveMultiple = 1004,
    [pbr::OriginalName("C_GET_ALL_WRITINGS")] CGetAllWritings = 1010,
    [pbr::OriginalName("C_PUSH_WRITING")] CPushWriting = 1011,
    [pbr::OriginalName("C_GUESTBOOK_ALLSECRET")] CGuestbookAllsecret = 1012,
    [pbr::OriginalName("C_PUSH_COMMENT")] CPushComment = 1013,
    [pbr::OriginalName("C_GUESTBOOK_SET_TITLE")] CGuestbookSetTitle = 1014,
    [pbr::OriginalName("C_REMOVE_WRITING")] CRemoveWriting = 1015,
    [pbr::OriginalName("C_REMOVE_COMMENT")] CRemoveComment = 1016,
    [pbr::OriginalName("C_MODIFY_WRITING")] CModifyWriting = 1017,
    [pbr::OriginalName("C_MODIFY_COMMENT")] CModifyComment = 1018,
    [pbr::OriginalName("C_BUY_LUCKYBOX")] CBuyLuckybox = 1030,
    [pbr::OriginalName("C_OPEN_LUCKYBOX")] COpenLuckybox = 1031,
    [pbr::OriginalName("C_OPEN_SPECIALBOX")] COpenSpecialbox = 1032,
    [pbr::OriginalName("C_BUY_PACKAGEBOX")] CBuyPackagebox = 1033,
    [pbr::OriginalName("C_OPEN_PACKAGEBOX")] COpenPackagebox = 1034,
    [pbr::OriginalName("C_BUY_ITEMCOUPON")] CBuyItemcoupon = 1035,
    [pbr::OriginalName("C_USE_ITEMCOUPON")] CUseItemcoupon = 1036,
    [pbr::OriginalName("C_BUY_OPEN_LUCKYBOX")] CBuyOpenLuckybox = 1038,
    [pbr::OriginalName("C_BUY_NPCGIFT")] CBuyNpcgift = 1040,
    [pbr::OriginalName("C_REPORT_FRIENDS_COUNT")] CReportFriendsCount = 1050,
    [pbr::OriginalName("C_SEND_EVENT_GIFT")] CSendEventGift = 1060,
    [pbr::OriginalName("S_EVENT_UPDATED")] SEventUpdated = 1070,
    [pbr::OriginalName("C_REDUCE_EVENT")] CReduceEvent = 1071,
    [pbr::OriginalName("C_STAMP_EVENT")] CStampEvent = 1075,
    [pbr::OriginalName("C_STAMP_EVENT_CLAIM_REWARD")] CStampEventClaimReward = 1076,
    [pbr::OriginalName("C_STAMP_EVENT_CASH_STAMP")] CStampEventCashStamp = 1077,
    [pbr::OriginalName("C_INVITE_KAKAO_EVENT_SEND")] CInviteKakaoEventSend = 1080,
    [pbr::OriginalName("C_INVITE_KAKAO_EVENT_THANKS")] CInviteKakaoEventThanks = 1081,
    [pbr::OriginalName("C_HOT_DEAL_BUY")] CHotDealBuy = 1090,
    [pbr::OriginalName("C_HOT_DEAL_POLL")] CHotDealPoll = 1091,
    [pbr::OriginalName("C_SET_CALENDAR_GMT")] CSetCalendarGmt = 1100,
    [pbr::OriginalName("C_USE_JUKE_BOX")] CUseJukeBox = 1200,
    [pbr::OriginalName("C_MAKE_SIDEDISH_START")] CMakeSidedishStart = 2000,
    [pbr::OriginalName("C_MAKE_SIDEDISH_FIN")] CMakeSidedishFin = 2001,
    [pbr::OriginalName("C_MAKE_SIDEDISH_SHORTEN")] CMakeSidedishShorten = 2002,
    [pbr::OriginalName("C_MAKE_SIDEDISH_REVIVE")] CMakeSidedishRevive = 2003,
    [pbr::OriginalName("C_MAKE_FORTUNECOOKIE_START")] CMakeFortunecookieStart = 2050,
    [pbr::OriginalName("C_MAKE_FORTUNECOOKIE_FIN")] CMakeFortunecookieFin = 2051,
    [pbr::OriginalName("C_GRANT_NEW_DAILY_QUEST")] CGrantNewDailyQuest = 2100,
    [pbr::OriginalName("C_DAILY_QUEST_PROGRESS")] CDailyQuestProgress = 2101,
    [pbr::OriginalName("C_DAILY_QUEST_FINISH")] CDailyQuestFinish = 2102,
    [pbr::OriginalName("C_DAILY_QUEST_INSTANT_COMPLETION")] CDailyQuestInstantCompletion = 2103,
    [pbr::OriginalName("C_DAILY_QUEST_GET_DATA")] CDailyQuestGetData = 2104,
    [pbr::OriginalName("C_POINTMISSION_FINISH")] CPointmissionFinish = 2150,
    [pbr::OriginalName("C_POINTMISSION_INSTANT_COMPLETION")] CPointmissionInstantCompletion = 2151,
    [pbr::OriginalName("C_GRANT_NEW_POINTMISSION")] CGrantNewPointmission = 2152,
    [pbr::OriginalName("C_POINTMISSION_GETPRESENT")] CPointmissionGetpresent = 2153,
    [pbr::OriginalName("C_OPEN_POINT_BOX")] COpenPointBox = 2155,
    [pbr::OriginalName("C_BUY_BOX_POINT")] CBuyBoxPoint = 2156,
    [pbr::OriginalName("C_GET_ONTIME_BOX_POINT")] CGetOntimeBoxPoint = 2157,
    [pbr::OriginalName("C_EVENTDICE_RESET")] CEventdiceReset = 2160,
    [pbr::OriginalName("C_EVENTDICE_FINISH")] CEventdiceFinish = 2161,
    [pbr::OriginalName("C_EVENTDICE_USE_DICE")] CEventdiceUseDice = 2162,
    [pbr::OriginalName("C_EVENTDICE_BUY_DICE")] CEventdiceBuyDice = 2163,
    [pbr::OriginalName("C_EVENTDICE_FORCE_MOVE_START_POINT")] CEventdiceForceMoveStartPoint = 2164,
    [pbr::OriginalName("C_EVENTDICE_FORCE_MOVE_BY_GOLDCARD")] CEventdiceForceMoveByGoldcard = 2165,
    [pbr::OriginalName("C_EVENTDICE_SEND_GIFT")] CEventdiceSendGift = 2166,
    [pbr::OriginalName("C_EVENTDICE_RECV_GIFT")] CEventdiceRecvGift = 2167,
    [pbr::OriginalName("C_EVENTDICE_RESET_GIFT")] CEventdiceResetGift = 2168,
    [pbr::OriginalName("C_EVENTDICE_FIRST_VISIT")] CEventdiceFirstVisit = 2169,
    [pbr::OriginalName("C_EVENTGOM_CHECK_REWARD")] CEventgomCheckReward = 2180,
    [pbr::OriginalName("C_BINGOMISSION_FINISH")] CBingomissionFinish = 2190,
    [pbr::OriginalName("C_BINGOMISSION_INSTANT_COMPLETION")] CBingomissionInstantCompletion = 2191,
    [pbr::OriginalName("C_GRANT_NEW_BINGOMISSION")] CGrantNewBingomission = 2192,
    [pbr::OriginalName("C_BINGOMISSION_GETPRESENT")] CBingomissionGetpresent = 2193,
    [pbr::OriginalName("C_BINGOMISSION_GETNUMBER")] CBingomissionGetnumber = 2194,
    [pbr::OriginalName("C_BINGOMISSION_QUEST_RESET")] CBingomissionQuestReset = 2195,
    [pbr::OriginalName("C_GET_ACHIEVEMENT_REWARD")] CGetAchievementReward = 2200,
    [pbr::OriginalName("C_PROCEED_ACHIEVEMENT")] CProceedAchievement = 2201,
    [pbr::OriginalName("C_TAROT_REWARD")] CTarotReward = 2202,
    [pbr::OriginalName("C_APPLY_TAROT_SKILL")] CApplyTarotSkill = 2203,
    [pbr::OriginalName("C_TAROT_QUESTION")] CTarotQuestion = 2204,
    [pbr::OriginalName("C_TAROT_BUY_TICKET")] CTarotBuyTicket = 2205,
    [pbr::OriginalName("C_THIRDSTORE_HOST_DAILY_REWARD")] CThirdstoreHostDailyReward = 2310,
    [pbr::OriginalName("C_THIRDSTORE_COMPLETE_FAVOR")] CThirdstoreCompleteFavor = 2311,
    [pbr::OriginalName("C_THIRDSTORE_INSTANT_FILL_SALEPOINT")] CThirdstoreInstantFillSalepoint = 2320,
    [pbr::OriginalName("C_THIRDSTORE_INSTANT_FILL_FAVOR")] CThirdstoreInstantFillFavor = 2321,
    [pbr::OriginalName("C_RELOAD_DATA")] CReloadData = 4000,
    [pbr::OriginalName("A_SERVER_RESPONSE")] AServerResponse = 3000,
    [pbr::OriginalName("A_NOTIFY_MESSAGE")] ANotifyMessage = 3001,
    [pbr::OriginalName("A_KICK_USER")] AKickUser = 3002,
    [pbr::OriginalName("A_UPDATE_EVENT_XML")] AUpdateEventXml = 3003,
    [pbr::OriginalName("A_RELOAD_GIFTBOX")] AReloadGiftbox = 3004,
    [pbr::OriginalName("A_POPUP_MESSAGE")] APopupMessage = 3005,
    [pbr::OriginalName("C_HARVEST_ALL_WORK_OBJ")] CHarvestAllWorkObj = 3100,
    [pbr::OriginalName("S_POPUP_MESSAGE")] SPopupMessage = 7000,
    [pbr::OriginalName("C_USE_CHERRY_ROULETTE")] CUseCherryRoulette = 3200,
    [pbr::OriginalName("C_BUY_ROULETTE_BEAN")] CBuyRouletteBean = 3201,
    [pbr::OriginalName("C_SUBMIT_SURVEY")] CSubmitSurvey = 4001,
    [pbr::OriginalName("C_SUBMIT_SURVEY_TEST")] CSubmitSurveyTest = 4002,
    [pbr::OriginalName("C_RESET_SURVEY_TEST")] CResetSurveyTest = 4003,
    [pbr::OriginalName("C_EXPAND_SECONDFLOOR")] CExpandSecondfloor = 4100,
    [pbr::OriginalName("C_EXPAND_THIRDSTORE")] CExpandThirdstore = 4101,
    [pbr::OriginalName("C_EXPAND_THIRDSTORE_INSTANT")] CExpandThirdstoreInstant = 4102,
    [pbr::OriginalName("C_EXPAND_THIRDSTORE_COMPLETE")] CExpandThirdstoreComplete = 4103,
    [pbr::OriginalName("C_RESTART_THIRDSTORE")] CRestartThirdstore = 4104,
    [pbr::OriginalName("C_THIRDSTORE_RECV_EXPAND_REWARD")] CThirdstoreRecvExpandReward = 4105,
    [pbr::OriginalName("C_THIRDSTORE_RECALC_EXPAND_REWARD")] CThirdstoreRecalcExpandReward = 4106,
    [pbr::OriginalName("C_THIRDSTORE_RECV_RARE_REWARD")] CThirdstoreRecvRareReward = 4107,
    [pbr::OriginalName("C_RESTART_THIRDSTORE_EXPANSION")] CRestartThirdstoreExpansion = 4108,
    [pbr::OriginalName("C_EXPAND_TOPFLOOR")] CExpandTopfloor = 4109,
    [pbr::OriginalName("C_DUTCH_COFFEE")] CDutchCoffee = 4200,
    [pbr::OriginalName("C_DUTCH_LIQUID_MAKE")] CDutchLiquidMake = 4201,
    [pbr::OriginalName("C_DUTCH_LIQUID_MAKE_FIN")] CDutchLiquidMakeFin = 4202,
    [pbr::OriginalName("C_DUTCH_LIQUID_SELL_START")] CDutchLiquidSellStart = 4203,
    [pbr::OriginalName("C_DUTCH_LIQUID_SELL")] CDutchLiquidSell = 4204,
    [pbr::OriginalName("C_DUTCH_LIQUID_SELL_FIN")] CDutchLiquidSellFin = 4205,
    [pbr::OriginalName("C_DUTCH_LIQUID_MAKE_IMMEDIATTE")] CDutchLiquidMakeImmediatte = 4206,
    [pbr::OriginalName("C_PATRON_MACHINE_CALL")] CPatronMachineCall = 4300,
    [pbr::OriginalName("C_PATRON_MACHINE_FIN")] CPatronMachineFin = 4301,
    [pbr::OriginalName("C_COMEBACK_SEND_GIFT")] CComebackSendGift = 4401,
    [pbr::OriginalName("C_COMEBACK_RECV_GIFT")] CComebackRecvGift = 4402,
    [pbr::OriginalName("C_CHARGE_COLLECTION")] CChargeCollection = 5000,
    [pbr::OriginalName("C_RECEIVE_CHARGE_OBJ")] CReceiveChargeObj = 5001,
    [pbr::OriginalName("C_RECEIVE_COLLECTION_GIFT")] CReceiveCollectionGift = 5002,
    [pbr::OriginalName("C_RECEIVE_LEVEL_UP_REWARD")] CReceiveLevelUpReward = 5010,
    [pbr::OriginalName("C_PET_AWAKE")] CPetAwake = 6000,
    [pbr::OriginalName("C_PET_PUTTOSLEEP")] CPetPuttosleep = 6001,
    [pbr::OriginalName("C_PET_WITHPLAYING")] CPetWithplaying = 6002,
    [pbr::OriginalName("C_PET_CARE")] CPetCare = 6003,
    [pbr::OriginalName("C_PET_TREAT")] CPetTreat = 6004,
    [pbr::OriginalName("C_PET_STATUS_UPDATE")] CPetStatusUpdate = 6005,
    [pbr::OriginalName("C_PET_USERACTION")] CPetUseraction = 6006,
    [pbr::OriginalName("C_PET_EAT_FEED")] CPetEatFeed = 6007,
    [pbr::OriginalName("C_PET_EAT_SNACK")] CPetEatSnack = 6008,
    [pbr::OriginalName("C_BUY_PET_ITEM")] CBuyPetItem = 6030,
    [pbr::OriginalName("C_FILL_PET_FEED")] CFillPetFeed = 6031,
    [pbr::OriginalName("C_CLEAR_PET_FEED")] CClearPetFeed = 6032,
    [pbr::OriginalName("C_PET_PLAY_WITHOBJ")] CPetPlayWithobj = 6033,
    [pbr::OriginalName("C_PET_PUT_STATUS_UPDATE")] CPetPutStatusUpdate = 6034,
    [pbr::OriginalName("C_PET_DRESSUP")] CPetDressup = 6050,
    [pbr::OriginalName("C_PET_LEARN_SECOND_SKILL")] CPetLearnSecondSkill = 6070,
    [pbr::OriginalName("C_PET_SKILL_CHANGE")] CPetSkillChange = 6071,
    [pbr::OriginalName("C_PET_USE_SKILL")] CPetUseSkill = 6072,
    [pbr::OriginalName("C_PET_USE_SKILL_GETRESOURCE")] CPetUseSkillGetresource = 6073,
    [pbr::OriginalName("C_PET_USE_SKILL_TOUTHINT")] CPetUseSkillTouthint = 6074,
    [pbr::OriginalName("C_PET_RE_NAMING")] CPetReNaming = 6100,
    [pbr::OriginalName("C_PET_REVERT_BEFORE_HP")] CPetRevertBeforeHp = 6110,
    [pbr::OriginalName("C_PET_ADOPT")] CPetAdopt = 6200,
    [pbr::OriginalName("C_PET_PUT")] CPetPut = 6210,
    [pbr::OriginalName("C_PET_CURE")] CPetCure = 6211,
    [pbr::OriginalName("C_PET_TAKE")] CPetTake = 6212,
    [pbr::OriginalName("C_PET_PUT_SIZE_EXPAND")] CPetPutSizeExpand = 6220,
    [pbr::OriginalName("C_PET_CHANGE")] CPetChange = 6230,
    [pbr::OriginalName("C_UNREGISTER_CANCEL")] CUnregisterCancel = 8000,
    [pbr::OriginalName("C_DEV_COMMAND")] CDevCommand = 9000,
    [pbr::OriginalName("C_DEV_TIMESET")] CDevTimeset = 9001,
    [pbr::OriginalName("C_CHERRY_ROASTING")] CCherryRoasting = 547,
    [pbr::OriginalName("C_CHERRY_ROAST_FIN")] CCherryRoastFin = 548,
    [pbr::OriginalName("C_CHERRY_ROAST_REVIVE")] CCherryRoastRevive = 549,
    [pbr::OriginalName("C_CHERRY_ROAST_IMMEDIATE")] CCherryRoastImmediate = 550,
    [pbr::OriginalName("C_THEMACOLLECTIONLIST_POINT_GET")] CThemacollectionlistPointGet = 551,
    [pbr::OriginalName("C_THEMACOLLECTIONLIST_REWARD_GET")] CThemacollectionlistRewardGet = 552,
    [pbr::OriginalName("C_THEMACOLLECTIONLIST_QUESTCHECK")] CThemacollectionlistQuestcheck = 553,
    [pbr::OriginalName("C_CHERRY_ROAST_CANCEL")] CCherryRoastCancel = 554,
    [pbr::OriginalName("C_SPECIALORDER_CLEAR")] CSpecialorderClear = 555,
    [pbr::OriginalName("C_SPECIALORDER_CANCEL")] CSpecialorderCancel = 556,
    [pbr::OriginalName("C_SPECIALORDER_RENEW")] CSpecialorderRenew = 557,
    [pbr::OriginalName("C_CASHUSEREWARD_CASHCHECK")] CCashuserewardCashcheck = 558,
    [pbr::OriginalName("C_CASHUSEREWARD_GET")] CCashuserewardGet = 559,
    [pbr::OriginalName("C_SPECIAL_PACKAGE")] CSpecialPackage = 560,
    [pbr::OriginalName("C_LVUPSHOP_BUY")] CLvupshopBuy = 561,
    [pbr::OriginalName("C_LVUPSHOP_PURCHASEITEM_BUYCHECK")] CLvupshopPurchaseitemBuycheck = 562,
    [pbr::OriginalName("C_NEWBINGOMISSIONGET")] CNewbingomissionget = 563,
    [pbr::OriginalName("C_NEWPOINTMISSIONGET")] CNewpointmissionget = 564,
    [pbr::OriginalName("C_NEWPOINTBOXGET")] CNewpointboxget = 565,
    [pbr::OriginalName("C_NEWGOTOFMANAGERGET")] CNewgotofmanagerget = 571,
    [pbr::OriginalName("C_OPEN_NEW_COFFEE_TRUCK")] COpenNewCoffeeTruck = 566,
    [pbr::OriginalName("C_COFEETRUCK_GAME_FINISH")] CCofeetruckGameFinish = 567,
    [pbr::OriginalName("C_GET_COFFEETRUCK_GIFT")] CGetCoffeetruckGift = 568,
    [pbr::OriginalName("C_BUY_COFFEETRUCK_SHOP_ITEM")] CBuyCoffeetruckShopItem = 569,
    [pbr::OriginalName("C_CHANGE_CFT_CUSTOMER_ITEM")] CChangeCftCustomerItem = 570,
    [pbr::OriginalName("C_COFFEETRUCK_SPECIAL_ORDER_MANAGER")] CCoffeetruckSpecialOrderManager = 573,
    [pbr::OriginalName("C_COFFEETRUCK_SPECIAL_ORDER_FINISH")] CCoffeetruckSpecialOrderFinish = 574,
    [pbr::OriginalName("C_COFFEETRUCK_SPECIAL_ORDER_RENEW")] CCoffeetruckSpecialOrderRenew = 575,
    [pbr::OriginalName("C_COFFEETRUCK_GAME_START")] CCoffeetruckGameStart = 576,
    [pbr::OriginalName("C_GET_COFFEETRUCK_RANK")] CGetCoffeetruckRank = 577,
    [pbr::OriginalName("C_OPEN_LUCKY_BOXES")] COpenLuckyBoxes = 1514,
    [pbr::OriginalName("C_AUTO_TICKET_ROASTING_MACHINE_START")] CAutoTicketRoastingMachineStart = 1517,
    [pbr::OriginalName("C_AUTO_TICKET_ROASTING_MACHINE_FIN")] CAutoTicketRoastingMachineFin = 1518,
    [pbr::OriginalName("C_AUTO_TICKET_ROASTING_MACHINE_SHORTEN")] CAutoTicketRoastingMachineShorten = 1519,
    [pbr::OriginalName("C_AUTO_TICKET_ROASTING_MACHINE_REVIVE")] CAutoTicketRoastingMachineRevive = 1520,
  }

  #endregion

  #region Messages
  public sealed partial class ClientMessage : pb::IMessage<ClientMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientMessage> _parser = new pb::MessageParser<ClientMessage>(() => new ClientMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage(ClientMessage other) : this() {
      _hasBits0 = other._hasBits0;
      pcode_ = other.pcode_;
      packetId_ = other.packetId_;
      payload_ = other.payload_;
      recvCounter_ = other.recvCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage Clone() {
      return new ClientMessage(this);
    }

    /// <summary>Field number for the "pcode" field.</summary>
    public const int PcodeFieldNumber = 1;
    private readonly static global::Network.ProtocolCode PcodeDefaultValue = global::Network.ProtocolCode.CError;

    private global::Network.ProtocolCode pcode_;
    /// <summary>
    /// protocol number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.ProtocolCode Pcode {
      get { if ((_hasBits0 & 1) != 0) { return pcode_; } else { return PcodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pcode_ = value;
      }
    }
    /// <summary>Gets whether the "pcode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPcode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pcode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPcode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "packetId" field.</summary>
    public const int PacketIdFieldNumber = 2;
    private readonly static int PacketIdDefaultValue = 0;

    private int packetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketId {
      get { if ((_hasBits0 & 2) != 0) { return packetId_; } else { return PacketIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        packetId_ = value;
      }
    }
    /// <summary>Gets whether the "packetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPacketId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "packetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPacketId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private readonly static pb::ByteString PayloadDefaultValue = pb::ByteString.Empty;

    private pb::ByteString payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_ ?? PayloadDefaultValue; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "payload" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPayload {
      get { return payload_ != null; }
    }
    /// <summary>Clears the value of the "payload" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payload_ = null;
    }

    /// <summary>Field number for the "recvCounter" field.</summary>
    public const int RecvCounterFieldNumber = 4;
    private readonly static int RecvCounterDefaultValue = 0;

    private int recvCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecvCounter {
      get { if ((_hasBits0 & 4) != 0) { return recvCounter_; } else { return RecvCounterDefaultValue; } }
      set {
        _hasBits0 |= 4;
        recvCounter_ = value;
      }
    }
    /// <summary>Gets whether the "recvCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecvCounter {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "recvCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecvCounter() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pcode != other.Pcode) return false;
      if (PacketId != other.PacketId) return false;
      if (Payload != other.Payload) return false;
      if (RecvCounter != other.RecvCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPcode) hash ^= Pcode.GetHashCode();
      if (HasPacketId) hash ^= PacketId.GetHashCode();
      if (HasPayload) hash ^= Payload.GetHashCode();
      if (HasRecvCounter) hash ^= RecvCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPcode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Pcode);
      }
      if (HasPacketId) {
        output.WriteRawTag(16);
        output.WriteInt32(PacketId);
      }
      if (HasPayload) {
        output.WriteRawTag(26);
        output.WriteBytes(Payload);
      }
      if (HasRecvCounter) {
        output.WriteRawTag(32);
        output.WriteInt32(RecvCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPcode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Pcode);
      }
      if (HasPacketId) {
        output.WriteRawTag(16);
        output.WriteInt32(PacketId);
      }
      if (HasPayload) {
        output.WriteRawTag(26);
        output.WriteBytes(Payload);
      }
      if (HasRecvCounter) {
        output.WriteRawTag(32);
        output.WriteInt32(RecvCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPcode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pcode);
      }
      if (HasPacketId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketId);
      }
      if (HasPayload) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (HasRecvCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecvCounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasPcode) {
        Pcode = other.Pcode;
      }
      if (other.HasPacketId) {
        PacketId = other.PacketId;
      }
      if (other.HasPayload) {
        Payload = other.Payload;
      }
      if (other.HasRecvCounter) {
        RecvCounter = other.RecvCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pcode = (global::Network.ProtocolCode) input.ReadEnum();
            break;
          }
          case 16: {
            PacketId = input.ReadInt32();
            break;
          }
          case 26: {
            Payload = input.ReadBytes();
            break;
          }
          case 32: {
            RecvCounter = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pcode = (global::Network.ProtocolCode) input.ReadEnum();
            break;
          }
          case 16: {
            PacketId = input.ReadInt32();
            break;
          }
          case 26: {
            Payload = input.ReadBytes();
            break;
          }
          case 32: {
            RecvCounter = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ServerMessage : pb::IMessage<ServerMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServerMessage> _parser = new pb::MessageParser<ServerMessage>(() => new ServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage(ServerMessage other) : this() {
      _hasBits0 = other._hasBits0;
      pcode_ = other.pcode_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessage Clone() {
      return new ServerMessage(this);
    }

    /// <summary>Field number for the "pcode" field.</summary>
    public const int PcodeFieldNumber = 1;
    private readonly static global::Network.ProtocolCode PcodeDefaultValue = global::Network.ProtocolCode.CError;

    private global::Network.ProtocolCode pcode_;
    /// <summary>
    /// protocol number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.ProtocolCode Pcode {
      get { if ((_hasBits0 & 1) != 0) { return pcode_; } else { return PcodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pcode_ = value;
      }
    }
    /// <summary>Gets whether the "pcode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPcode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pcode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPcode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private readonly static pb::ByteString PayloadDefaultValue = pb::ByteString.Empty;

    private pb::ByteString payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_ ?? PayloadDefaultValue; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "payload" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPayload {
      get { return payload_ != null; }
    }
    /// <summary>Clears the value of the "payload" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pcode != other.Pcode) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPcode) hash ^= Pcode.GetHashCode();
      if (HasPayload) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPcode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Pcode);
      }
      if (HasPayload) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPcode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Pcode);
      }
      if (HasPayload) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPcode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pcode);
      }
      if (HasPayload) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasPcode) {
        Pcode = other.Pcode;
      }
      if (other.HasPayload) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pcode = (global::Network.ProtocolCode) input.ReadEnum();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pcode = (global::Network.ProtocolCode) input.ReadEnum();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AdminMessage : pb::IMessage<AdminMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdminMessage> _parser = new pb::MessageParser<AdminMessage>(() => new AdminMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdminMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminMessage(AdminMessage other) : this() {
      _hasBits0 = other._hasBits0;
      pcode_ = other.pcode_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdminMessage Clone() {
      return new AdminMessage(this);
    }

    /// <summary>Field number for the "pcode" field.</summary>
    public const int PcodeFieldNumber = 1;
    private readonly static global::Network.ProtocolCode PcodeDefaultValue = global::Network.ProtocolCode.CError;

    private global::Network.ProtocolCode pcode_;
    /// <summary>
    /// protocol number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Network.ProtocolCode Pcode {
      get { if ((_hasBits0 & 1) != 0) { return pcode_; } else { return PcodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pcode_ = value;
      }
    }
    /// <summary>Gets whether the "pcode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPcode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pcode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPcode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private readonly static pb::ByteString PayloadDefaultValue = pb::ByteString.Empty;

    private pb::ByteString payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_ ?? PayloadDefaultValue; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "payload" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPayload {
      get { return payload_ != null; }
    }
    /// <summary>Clears the value of the "payload" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdminMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdminMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pcode != other.Pcode) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPcode) hash ^= Pcode.GetHashCode();
      if (HasPayload) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPcode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Pcode);
      }
      if (HasPayload) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPcode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Pcode);
      }
      if (HasPayload) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPcode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pcode);
      }
      if (HasPayload) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdminMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasPcode) {
        Pcode = other.Pcode;
      }
      if (other.HasPayload) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pcode = (global::Network.ProtocolCode) input.ReadEnum();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pcode = (global::Network.ProtocolCode) input.ReadEnum();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
