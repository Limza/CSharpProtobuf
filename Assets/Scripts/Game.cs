// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Network.Packet {

  /// <summary>Holder for reflection information generated from game.proto</summary>
  public static partial class GameReflection {

    #region Descriptor
    /// <summary>File descriptor for game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpnYW1lLnByb3RvEg5OZXR3b3JrLnBhY2tldCI+CglTUmVzcG9uc2USEAoI",
            "cGFja2V0SWQYASACKAUSDAoEanNvbhgCIAEoCRIRCglkYXRhQnl0ZXMYAyAB",
            "KAwiJgoGQ0Vycm9yEg0KBWVycm9yGAEgAigJEg0KBXRyYWNlGAIgASgJIloK",
            "CkNLZWVwQWxpdmUSGAoQcmVmcmVzaFNvY2lhbEFjdBgBIAEoCBIaChJyZWZy",
            "ZXNoQ2FzaEJhbGFuY2UYAiABKAgSFgoOY29tcGVuc2F0aW9uSWQYAyADKAki",
            "4gEKCUNMb2FkRGF0YRIQCghzdG9yZUtleRgBIAIoBRIQCghmcmllbmRJZBgC",
            "IAMoCRIKCgJvcxgDIAEoCRITCgtkZXZpY2VNb2RlbBgEIAEoCRIQCghkZXZp",
            "Y2VJZBgFIAEoCRIQCghwaG9uZU51bRgGIAEoCRIPCgdjb3VudHJ5GAcgASgJ",
            "EhQKDGdsRXh0ZW5zaW9ucxgIIAMoCRINCgVndWVzdBgJIAEoCBIRCglsb2Nh",
            "bFRpbWUYCiABKAUSFgoOa2FrYW9IYXNoZWRLZXkYCyABKAkSCwoDbWlkGAwg",
            "ASgJIh8KC0NSZWxvYWREYXRhEhAKCHN0b3JlS2V5GAEgAigFIvoBCgdDT2Jq",
            "QWRkEhEKCWludmVuRWxlbRgBIAIoCRIJCgF4GAIgAigFEgkKAXkYAyACKAUS",
            "DQoFZmxvb3IYBCACKAUSDAoEZmxpcBgFIAIoBRINCgVpbnZlbhgGIAIoCBIQ",
            "CghzdG9yZUtleRgHIAIoBRITCgtpbnZhbGlkRGVjbxgIIAEoBRIYChBzYWxl",
            "RXZlbnRBdXRoS2V5GAkgASgJEg0KBXByaWNlGAogAigFEhEKCWJlYW5EZXBv",
            "dBgLIAEoCBIRCglidXlCeUNvc3QYDCABKAgSEgoKY2hlcnJ5U2hvcBgNIAEo",
            "CBIQCghjb3N0VHlwZRgOIAEoCSJxCghDT2JqTW92ZRILCgNvaWQYASACKAUS",
            "CQoBeBgCIAIoBRIJCgF5GAMgAigFEg0KBWZsb29yGAQgAigFEgwKBGZsaXAY",
            "BSACKAUSEAoIc3RvcmVLZXkYBiACKAUSEwoLaW52YWxpZERlY28YByABKAUi",
            "PgoIQ09ialNlbGwSCwoDb2lkGAEgAigFEhAKCHN0b3JlS2V5GAIgAigFEhMK",
            "C2ludmFsaWREZWNvGAMgASgFIj8KCUNPYmpTdG9yZRILCgNvaWQYASACKAUS",
            "EAoIc3RvcmVLZXkYAiACKAUSEwoLaW52YWxpZERlY28YAyABKAUikAIKC0NP",
            "YmpSZXBsYWNlEhAKCHN0b3JlT2lkGAEgAigFEhEKCWludmVuRWxlbRgCIAIo",
            "CRIJCgF4GAMgAigFEgkKAXkYBCACKAUSDQoFZmxvb3IYBSACKAUSDAoEZmxp",
            "cBgGIAIoBRINCgVpbnZlbhgHIAIoCBIQCghzdG9yZUtleRgIIAIoBRITCgtp",
            "bnZhbGlkRGVjbxgJIAEoBRIYChBzYWxlRXZlbnRBdXRoS2V5GAogASgJEg0K",
            "BXByaWNlGAsgAigFEhEKCWJlYW5EZXBvdBgMIAEoCBIRCglidXlCeUNvc3QY",
            "DSABKAgSEgoKY2hlcnJ5U2hvcBgOIAEoCBIQCghjb3N0VHlwZRgPIAEoCSKN",
            "AQoMQ09iakV4Y2hhbmdlEhEKCXBsYWNlZE9pZBgBIAIoBRIQCghtb3ZlZE9p",
            "ZBgCIAIoBRIJCgF4GAMgAigFEgkKAXkYBCACKAUSDQoFZmxvb3IYBSACKAUS",
            "DAoEZmxpcBgGIAIoBRIQCghzdG9yZUtleRgHIAIoBRITCgtpbnZhbGlkRGVj",
            "bxgIIAEoBSJkCgdDT2JqQnV5EgwKBGtpbmQYASACKAkSEAoIc3RvcmVLZXkY",
            "AiACKAUSDQoFcHJpY2UYAyACKAUSDAoEY2FzaBgEIAEoBRIMCgRjb3N0GAUg",
            "ASgFEg4KBnJlYXNvbhgGIAEoCSKTAQoMQ09ialN0b3JlQWxsEgsKA29pZBgB",
            "IAMoBRIQCghzdG9yZUtleRgCIAIoBRITCgtpbnZhbGlkRGVjbxgDIAEoBRIR",
            "CglzdG9yZVdhbGwYBCABKAgSFAoMc3RvcmVFeHRXYWxsGAUgASgIEhEKCXN0",
            "b3JlVGlsZRgGIAEoCBITCgtwcm90ZWN0QmVhbhgHIAEoCCIfCgpDU2VsbElu",
            "dmVuEhEKCWludmVuRWxlbRgBIAIoCSItCgdDRXhwYW5kEhAKCGV4cGFuZElk",
            "GAEgAigJEhAKCHN0b3JlS2V5GAIgAigFIiAKDUNPcGVuTmV3U3RvcmUSDwoH",
            "c3RvcmVJZBgBIAIoCSI1ChJDU2F2ZURlc2lnbkhpc3RvcnkSEAoIc3RvcmVL",
            "ZXkYASACKAUSDQoFZmxvb3IYAiACKAUiPAoZQ1JlcXVlc3REZXNpZ25IaXN0",
            "b3J5RGF0YRIQCghzdG9yZUtleRgBIAIoBRINCgVmbG9vchgCIAIoBSI0ChND",
            "T3Blbk5ld1N0b3JlQXRPbmNlEg8KB3N0b3JlSWQYASACKAkSDAoEY2FzaBgC",
            "IAIoBSJ/CglDVGlsZVN3YXASCgoCeDEYASACKAUSCgoCeTEYAiACKAUSDgoG",
            "Zmxvb3IxGAMgAigFEgoKAngyGAQgAigFEgoKAnkyGAUgAigFEg4KBmZsb29y",
            "MhgGIAIoBRIQCghleHRlcmlvchgHIAIoCBIQCghzdG9yZUtleRgIIAIoBSKe",
            "AQoIQ1RpbGVBZGQSDAoEa2luZBgBIAIoCRIJCgF4GAIgAigFEgkKAXkYAyAC",
            "KAUSDQoFZmxvb3IYBCACKAUSDQoFaW52ZW4YBSACKAgSEAoIZXh0ZXJpb3IY",
            "BiACKAgSEAoIc3RvcmVLZXkYByACKAUSGAoQc2FsZUV2ZW50QXV0aEtleRgI",
            "IAEoCRISCgpjaGVycnlTaG9wGAkgASgIIlgKDUNUaWxlVG9TZXRBbGwSDAoE",
            "a2luZBgBIAIoCRIQCghzdG9yZUtleRgCIAIoBRIYChBzYWxlRXZlbnRBdXRo",
            "S2V5GAMgASgJEg0KBWZsb29yGAQgAigFImIKF0NUaWxlVG9TZXRBbGxUaGly",
            "ZFN0b3JlEgwKBGtpbmQYASACKAkSEAoIc3RvcmVLZXkYAiACKAUSGAoQc2Fs",
            "ZUV2ZW50QXV0aEtleRgDIAEoCRINCgVmbG9vchgEIAIoBSJvCg5DVGlsZVRv",
            "U2V0RHJhdxIMCgRraW5kGAEgAigJEhAKCHN0b3JlS2V5GAIgAigFEhgKEHNh",
            "bGVFdmVudEF1dGhLZXkYAyABKAkSDQoFZmxvb3IYBCACKAUSCQoBeBgGIAMo",
            "BRIJCgF5GAcgAygFIjcKBkNSb2FzdBILCgNvaWQYASACKAUSDgoGZGVzY0lk",
            "GAIgAigJEhAKCHN0b3JlS2V5GAMgAigFIk8KCUNSb2FzdEZpbhILCgNvaWQY",
            "ASACKAUSEAoIb25lQ2xpY2sYAiACKAgSEQoJdHJhc2hCZWFuGAMgAigFEhAK",
            "CHN0b3JlS2V5GAQgAigFIkgKFENDaGFyZ2VkUm9hc3RIYXJ2ZXN0EgsKA29p",
            "ZBgBIAIoBRIRCgl0cmFzaEJlYW4YAiACKAUSEAoIc3RvcmVLZXkYAyACKAUi",
            "PwoQQ1JvYXN0RnVsbENoYXJnZRILCgNvaWQYASACKAUSDAoEY2FzaBgCIAIo",
            "BRIQCghzdG9yZUtleRgDIAIoBSI4ChdDQ2hhcmdlZFNpZGVEaXNoSGFydmVz",
            "dBILCgNvaWQYASACKAUSEAoIc3RvcmVLZXkYAiACKAUiQgoTQ1NpZGVEaXNo",
            "RnVsbENoYXJnZRILCgNvaWQYASACKAUSDAoEY2FzaBgCIAIoBRIQCghzdG9y",
            "ZUtleRgDIAIoBSJMChtDQ2hhcmdpbmdTaWRlRGlzaE1lbnVDaGFuZ2USCwoD",
            "b2lkGAEgAigFEg4KBmRlc2NJZBgCIAIoCRIQCghzdG9yZUtleRgDIAIoBSJa",
            "ChdDU2hvcnRlbkR1dGNoTGlxdWlkTWFrZRILCgNvaWQYASACKAUSDAoEY2Fz",
            "aBgCIAIoBRIQCghzdG9yZUtleRgDIAIoBRISCgppc1R1dG9yaWFsGAQgASgI",
            "ImIKEENEdXRjaExpcXVpZE1ha2USCwoDb2lkGAEgAigFEhAKCHN0b3JlS2V5",
            "GAIgAigFEgwKBGJlYW4YAyACKAUSDQoFd2F0ZXIYBCACKAUSEgoKaXNUdXRv",
            "cmlhbBgFIAEoCCJQCgxDRHV0Y2hDb2ZmZWUSCwoDb2lkGAEgAigFEg4KBmRl",
            "c2NJZBgCIAIoCRIRCglkdXRjaFR5cGUYAyACKAkSEAoIc3RvcmVLZXkYBCAC",
            "KAUiSgoVQ0R1dGNoTGlxdWlkU2VsbFN0YXJ0EgsKA29pZBgBIAIoBRISCgpp",
            "bnZlbkVsZW1zGAIgAygJEhAKCHN0b3JlS2V5GAMgAigFIjIKEENEdXRjaExp",
            "cXVpZFNlbGwSDwoHb2JqSW5mbxgBIAMoCRINCgVjb3VudBgCIAMoBSI0ChND",
            "RHV0Y2hMaXF1aWRNYWtlRmluEgsKA29pZBgBIAIoBRIQCghzdG9yZUtleRgC",
            "IAIoBSI0ChNDRHV0Y2hMaXF1aWRTZWxsRmluEgsKA29pZBgBIAIoBRIQCghz",
            "dG9yZUtleRgCIAIoBSI4CgdDQ29mZmVlEgsKA29pZBgBIAIoBRIOCgZkZXNj",
            "SWQYAiACKAkSEAoIc3RvcmVLZXkYAyACKAUiLQoLQ0NvZmZlZVNlbGwSDwoH",
            "b2JqSW5mbxgBIAMoCRINCgVjb3VudBgCIAMoBSIrCgpDQ29mZmVlRmluEgsK",
            "A29pZBgBIAIoBRIQCghzdG9yZUtleRgCIAIoBSJBChJDU2hvcnRlbkNvZmZl",
            "ZVNlbGwSCwoDb2lkGAEgAigFEgwKBGNhc2gYAiACKAUSEAoIc3RvcmVLZXkY",
            "AyACKAUiIwoRQ0JhcmlzdGFHdWlkZURvbmUSDgoGZGVzY0lkGAEgAigJIkYK",
            "FENCYXJpc3RhVGVzdFByb2dyZXNzEg4KBmRlc2NJZBgBIAIoCRIPCgd0ZXN0",
            "SWR4GAIgAigFEg0KBXNjb3JlGAMgAigFIhIKEENCYXJpc3RhVGVzdFF1aXQi",
            "FQoTQ0JhcmlzdGFUZXN0VXBncmFkZSI5ChlDQmFyaXN0YVRlc3RVcGdyYWRl",
            "QnlDYXNoEg4KBmRlc2NJZBgBIAIoCRIMCgRjYXNoGAIgAigFIjQKEUNCYXJp",
            "c3RhVGVzdFJldHJ5Eg4KBmRlc2NJZBgBIAIoCRIPCgd0ZXN0SWR4GAIgAigF",
            "IhQKEkNCYXJpc3RhVGVzdFN0YXR1cyJEChBDUGF0cm9uT3JkZXJEb25lEhAK",
            "CHBhdHJvbklkGAEgAigJEg8KB29yZGVySWQYAiACKAkSDQoFc2NvcmUYAyAC",
            "KAUiSwoZQ1BhdHJvbk9yZGVyRG9uZUJ5TWFjaGluZRILCgNvaWQYASACKAUS",
            "EAoIcGF0cm9uSWQYAiACKAkSDwoHb3JkZXJJZBgDIAIoCSJIChRDUGF0cm9u",
            "T3JkZXJFdmFsdWF0ZRIQCghwYXRyb25JZBgBIAIoCRIPCgdvcmRlcklkGAIg",
            "AigJEg0KBXNjb3JlGAMgAigFIiwKGENHZXRTcGVjaWFsUGF0cm9uUHJlc2Vu",
            "dBIQCghwYXRyb25JZBgBIAIoCSIkChBDU2tpcFBhdHJvbkV2ZW50EhAKCHBh",
            "dHJvbklkGAEgAigJIjIKDkNCdXlQYXRyb25JdGVtEhAKCHBhdHJvbklkGAEg",
            "AigJEg4KBml0ZW1JZBgCIAIoCSInChNDRnVsZmlsbFBhdHJvbkZhdm9yEhAK",
            "CHBhdHJvbklkGAEgAigJIiUKEUNHZXRQYXRyb25QcmVzZW50EhAKCHBhdHJv",
            "bklkGAEgAigJIiIKDkNGbG9vckFkZFRyYXNoEhAKCHN0b3JlS2V5GAEgAigF",
            "IiwKC0NDbGVhblRhYmxlEgsKA29pZBgBIAIoBRIQCghzdG9yZUtleRgCIAIo",
            "BSIuCg1DQ2xlYW5SZWN5Y2xlEgsKA29pZBgBIAIoBRIQCghzdG9yZUtleRgC",
            "IAIoBSIfCgtDQ2xlYW5GbG9vchIQCghzdG9yZUtleRgBIAIoBSIuCg1DQ2xl",
            "YW5NYWNoaW5lEgsKA29pZBgBIAIoBRIQCghzdG9yZUtleRgCIAIoBSIoCgdD",
            "Q2FuY2VsEgsKA29pZBgBIAIoBRIQCghzdG9yZUtleRgCIAIoBSJNCg1DUm9h",
            "c3RTaG9ydGVuEgsKA29pZBgBIAIoBRIPCgdsZWZ0U2VjGAIgAigFEgwKBGNh",
            "c2gYAyACKAUSEAoIc3RvcmVLZXkYBCACKAUiLQoMQ1JvYXN0UmV2aXZlEgsK",
            "A29pZBgBIAIoBRIQCghzdG9yZUtleRgCIAIoBSJLCgpDU3RhZmZIaXJlEg8K",
            "B3N0YWZmSWQYASACKAUSDAoEYm9keRgCIAIoCRIMCgRuYW1lGAMgAigJEhAK",
            "CHN0b3JlS2V5GAQgAigFIoEBCg1DU3RhZmZEcmVzc1VwEg8KB3N0YWZmSWQY",
            "ASACKAUSDQoFcGFydHMYAiADKAkSEgoKZnJvbUludmVucxgDIAMoCBIOCgZt",
            "b3Rpb24YBCACKAkSEAoIc3RvcmVLZXkYBSACKAUSDAoEY29zdBgGIAIoBRIM",
            "CgRjYXNoGAcgAigFImYKEUNTdGFmZkJvZHlBbmROYW1lEg8KB3N0YWZmSWQY",
            "ASACKAUSDAoEYm9keRgCIAIoCRIMCgRuYW1lGAMgAigJEhAKCHN0b3JlS2V5",
            "GAQgAigFEhIKCnN5bmNNeU5hbWUYBSACKAgiRQoQQ1N0YWZmRnVsbENoYXJn",
            "ZRIPCgdzdGFmZklkGAEgAigFEg4KBmluY0V4cBgCIAIoCBIQCghzdG9yZUtl",
            "eRgDIAIoBSIwCgtDU3RhZmZCb29zdBIPCgdzdGFmZklkGAEgAigFEhAKCHN0",
            "b3JlS2V5GAIgAigFIikKCkNBdmF0YXJCdXkSDAoEa2luZBgBIAIoCRINCgVw",
            "cmljZRgCIAIoBSIwCgtDUXVlc3RTdGFydBIPCgdxdWVzdElkGAEgAygFEhAK",
            "CHN0b3JlS2V5GAIgAigFImEKDkNRdWVzdFByb2dyZXNzEg8KB3F1ZXN0SWQY",
            "ASACKAUSDAoEZ29hbBgCIAIoBRINCgVzdGF0ZRgDIAIoBRIQCghzdG9yZUtl",
            "eRgEIAIoBRIPCgdpc1N0dWNrGAUgASgIIjEKDENRdWVzdEZpbmlzaBIPCgdx",
            "dWVzdElkGAEgAigFEhAKCHN0b3JlS2V5GAIgAigFIkAKDUNRdWVzdFJlcXVl",
            "c3QSDwoHcXVlc3RJZBgBIAIoBRIMCgRnb2FsGAIgAigFEhAKCGZyaWVuZElk",
            "GAMgAygJIlEKDkNRdWVzdFJlc3BvbnNlEg4KBmFjY2VwdBgBIAIoCBIQCghm",
            "cmllbmRJZBgCIAIoCRIPCgdxdWVzdElkGAMgAigFEgwKBGdvYWwYBCACKAUi",
            "ugEKF0NRdWVzdEluc3RhbnRDb21wbGV0aW9uEg8KB3F1ZXN0SWQYASACKAUS",
            "DAoEZ29hbBgCIAIoBRILCgNhbGwYAyACKAgSDAoEY2FzaBgEIAIoBRIUCgxj",
            "dXJyZW50U3RhdGUYBSACKAUSEAoIc3RvcmVLZXkYBiACKAUSGQoRaXNFdmVu",
            "dENhc2hBbW91bnQYByACKAgSDgoGcGV0T2lkGAggASgFEhIKCnBldFNraWxs",
            "SWQYCSABKAkiJgoTQ1F1ZXN0UmVtb3ZlTmV3RmxhZxIPCgdxdWVzdElkGAEg",
            "AigFIlUKIkNSZXF1ZXN0SW5zdGFudENvbXBsZXRpb25CeUludml0ZWUSDwoH",
            "cXVlc3RJZBgBIAIoBRIMCgRnb2FsGAIgAigFEhAKCGZyaWVuZElkGAMgAigJ",
            "ImEKEUNFeHBhbnNpb25SZXF1ZXN0EhAKCGV4cGFuZElkGAEgAigJEhAKCGZy",
            "aWVuZElkGAIgAygJEhYKDmlzRW1pbHlDaGVja2VkGAMgAigIEhAKCHN0b3Jl",
            "S2V5GAQgAigFIjYKEkNFeHBhbnNpb25SZXNwb25zZRIOCgZhY2NlcHQYASAC",
            "KAgSEAoIZnJpZW5kSWQYAiACKAkiPQoXQ0V4cGFuc2lvbkJ1eVBlcm1pc3Np",
            "b24SEAoIZXhwYW5kSWQYASACKAkSEAoIc3RvcmVLZXkYAiACKAUiQAoaQ0V4",
            "cGFuc2lvbkJ1eUFsbFBlcm1pc3Npb24SEAoIZXhwYW5kSWQYASACKAkSEAoI",
            "c3RvcmVLZXkYAiACKAUiJgoSQ0V4cGFuc2lvbkNvbXBsZXRlEhAKCHN0b3Jl",
            "S2V5GAEgAigFIlUKHUNFeHBhbnNpb25QZXJtaXNzaW9uQnlJbnZpdGVlEhAK",
            "CGV4cGFuZElkGAEgAigJEhAKCGZyaWVuZElkGAIgAigJEhAKCHN0b3JlS2V5",
            "GAMgAigFIisKF0NDaGFpbkV4cGFuc2lvbkNvbXBsZXRlEhAKCHN0b3JlS2V5",
            "GAEgAigFIlsKFkNDaGFpbkV4cGFuc2lvblNob3J0ZW4SEAoIc3RvcmVLZXkY",
            "ASACKAUSEAoIZXhwYW5kSWQYAiACKAkSDwoHbGVmdFNlYxgDIAIoBRIMCgRj",
            "YXNoGAQgAigFIkUKC0NDYXJSZXBsYWNlEg0KBWNhcklkGAEgAigJEg0KBWlu",
            "dmVuGAIgAigIEhgKEHNhbGVFdmVudEF1dGhLZXkYAyABKAkidQoMQ1Zpc2l0",
            "RnJpZW5kEgoKAmlkGAEgAigJEhAKCHN0b3JlS2V5GAIgAigFEhwKFGlzTm90",
            "RnJpZW5kRWFjaE90aGVyGAMgAigIEg8KB2ltaXRhdGUYBCABKAgSGAoQbGFz",
            "dE1vZGlmaWVkVGltZRgFIAEoBSJECgxDVmlzaXRBY3Rpb24SEAoIZnJpZW5k",
            "SWQYASACKAkSEgoKYWN0aW9uVHlwZRgCIAIoCRIOCgZ0YXJnZXQYAyACKAUi",
            "SgoOQ1Zpc2l0UmVzcG9uc2USCwoDb2lkGAEgAigFEgsKA2ZpZBgCIAIoCRIM",
            "CgR0eXBlGAMgAigJEhAKCHN0b3JlS2V5GAQgAigFIkIKD0NWaXNpdFJldml2",
            "ZUFsbBILCgNmaWQYASACKAkSDAoEb2lkcxgCIAMoBRIUCgxwZk1zZ0Jsb2Nr",
            "ZWQYAyABKAgiMAoSQ1Jlc3BvbnNlUmV2aXZlQWxsEgwKBGZpZHMYASADKAkS",
            "DAoEb2lkcxgCIAMoBSJNChpDU3BlY2lhbFJlcXVlc3RGb3JUdXRvcmlhbBIP",
            "CgdyZXF1ZXN0GAEgAigJEhAKCHN0b3JlS2V5GAIgAigFEgwKBG9pZHMYAyAD",
            "KAUiKwoMQ05wY1JlYWN0aW9uEgwKBHR5cGUYASACKAkSDQoFZmxvb3IYAiAC",
            "KAUiRwoOQ1RvdXRpbmdSZXN1bHQSDwoHc3VjY2VzcxgBIAIoCBIQCghwYXRy",
            "b25JZBgCIAEoCRISCgppc0ZpbmlzaGVkGAMgAigIIjkKFENQYXRyb25Ub3V0",
            "aW5nUmVzdWx0Eg8KB3N1Y2Nlc3MYASACKAgSEAoIcGF0cm9uSWQYAiACKAki",
            "PQoZQ1BhdHJvbkV2ZW50VG91dGluZ1Jlc3VsdBIQCghpdGVtVHlwZRgBIAIo",
            "CRIOCgZpdGVtSWQYAiACKAkiLAoLQ0NsZWFuQ2hhaXISCwoDb2lkGAEgAigF",
            "EhAKCHN0b3JlS2V5GAIgAigFIjEKDUNGcmVlR2lmdFNlbmQSDgoGZ2lmdElk",
            "GAEgAigJEhAKCGZyaWVuZElkGAIgAygJIkUKEUNGcmVlR2lmdFJlc3BvbnNl",
            "Eg4KBmFjY2VwdBgBIAIoCBIQCghmcmVpbmRJZBgCIAIoCRIOCgZnaWZ0SWQY",
            "AyACKAkiLgoMQ05QQ0dpZnRTZW5kEg8KB2V2ZW50SWQYASACKAkSDQoFbnBj",
            "SWQYAiACKAkiIQoOQ0luY0RhaWx5TGltaXQSDwoHbGltaXRJZBgBIAIoCSIi",
            "Cg9DSW5jV2Vla2x5TGltaXQSDwoHbGltaXRJZBgBIAIoCSJQCgpDVHJ5RXhw",
            "aXJlEgoKAmlkGAEgAigJEgwKBHR5cGUYAiACKAkSEAoIc3RvcmVLZXkYAyAC",
            "KAUSFgoOY2hhbmdlSXRlbUVsZW0YBCACKAkiEQoPQ0dldERhaWx5UmV3YXJk",
            "IkcKEkNTZWxsU2lkZURpc2hTdGFydBILCgNvaWQYASACKAUSEgoKc2lkZURp",
            "c2hJZBgCIAIoCRIQCghzdG9yZUtleRgDIAIoBSIvCg1DU2lkZURpc2hTZWxs",
            "Eg8KB29iakluZm8YASADKAkSDQoFY291bnQYAiADKAUiMQoQQ1NlbGxTaWRl",
            "RGlzaEZpbhILCgNvaWQYASACKAUSEAoIc3RvcmVLZXkYAiACKAUiQwoUQ1Nl",
            "bGxTaWRlRGlzaFNob3J0ZW4SCwoDb2lkGAEgAigFEgwKBGNhc2gYAiACKAUS",
            "EAoIc3RvcmVLZXkYAyACKAUiRQoMQ0J1eUNhc2hCZWFuEgoKAmlkGAEgAigJ",
            "Eg0KBWNvdW50GAIgAigFEgwKBGJlYW4YAyABKAUSDAoEY2FzaBgEIAEoBSI+",
            "ChNDQnV5Q2FzaFJvYXN0VGlja2V0EgoKAmlkGAEgAigJEg0KBWNvdW50GAIg",
            "AigFEgwKBGNhc2gYAyACKAUiXwoOQ0J1eUJhY2tncm91bmQSCgoCaWQYASAC",
            "KAkSDAoEdHlwZRgCIAIoCRIQCghzdG9yZUtleRgDIAIoBRINCgVwcmljZRgE",
            "IAIoBRISCgpjaGVycnlTaG9wGAUgASgIIk4KEUNDaGFuZ2VCYWNrZ3JvdW5k",
            "Eg0KBXJlc2V0GAEgAigIEgoKAmlkGAIgAigJEgwKBHR5cGUYAyACKAkSEAoI",
            "c3RvcmVLZXkYBCACKAUiPgocQ0NoYW5nZVNlY29uZEZsb29yQmFja2dyb3Vu",
            "ZBIQCghzdG9yZUtleRgBIAIoBRIMCgRiZ0lkGAIgASgJIhkKC0NVbmxvY2tC",
            "ZWFuEgoKAmlkGAEgAigJIhsKDUNVbmxvY2tDb2ZmZWUSCgoCaWQYASACKAki",
            "HQoPQ1VubG9ja1NpZGVEaXNoEgoKAmlkGAEgAigJIjsKDUNFeHBhbmRBdE9u",
            "Y2USCgoCaWQYASACKAkSDAoEY2FzaBgCIAIoBRIQCghzdG9yZUtleRgDIAIo",
            "BSIeCg5TR2lmdEJveExvYWRlZBIMCgRqc29uGAEgAigJIhoKDENHaWZ0UmVj",
            "ZWl2ZRIKCgJpZBgBIAIoCSIQCg5DUmVsb2FkR2lmdEJveCIjChRDR2lmdFJl",
            "Y2VpdmVNdWx0aXBsZRILCgNpZHMYASADKAkiGwoJQ1dyaXRlTG9nEg4KBmxv",
            "Z01zZxgBIAIoCSIYCgpDVXNlQ291cG9uEgoKAmlkGAEgAigJIjcKEFNVc2VD",
            "b3Vwb25SZXN1bHQSDwoHc3VjY2VzcxgBIAIoCBISCgpmYWlsUmVzdWx0GAIg",
            "ASgJInoKD0NMb3ZlbHlHaWZ0U2VuZBIOCgZnaWZ0SWQYASACKAkSEAoIZnJp",
            "ZW5kSWQYAiACKAkSDQoFY291bnQYAyACKAUSEgoKc2VuZGVyTmFtZRgEIAIo",
            "CRIPCgdtZXNzYWdlGAUgASgJEhEKCWV2ZW50VHlwZRgGIAEoCSJDChJDTWFr",
            "ZVNpZGVEaXNoU3RhcnQSCwoDb2lkGAEgAigFEg4KBmRlc2NJZBgCIAIoCRIQ",
            "CghzdG9yZUtleRgDIAIoBSIxChBDTWFrZVNpZGVEaXNoRmluEgsKA29pZBgB",
            "IAIoBRIQCghzdG9yZUtleRgCIAIoBSJUChRDTWFrZVNpZGVEaXNoU2hvcnRl",
            "bhILCgNvaWQYASACKAUSDwoHbGVmdFNlYxgCIAIoBRIMCgRjYXNoGAMgAigF",
            "EhAKCHN0b3JlS2V5GAQgAigFIjQKE0NNYWtlU2lkZURpc2hSZXZpdmUSCwoD",
            "b2lkGAEgAigFEhAKCHN0b3JlS2V5GAIgAigFIl0KF0NNYWtlRm9ydHVuZUNv",
            "b2tpZVN0YXJ0EgsKA29pZBgBIAIoBRIOCgZkZXNjSWQYAiACKAkSEAoIc3Rv",
            "cmVLZXkYAyACKAUSEwoLcGF5bWVudFR5cGUYBCACKAkiNgoVQ01ha2VGb3J0",
            "dW5lQ29va2llRmluEgsKA29pZBgBIAIoBRIQCghzdG9yZUtleRgCIAIoBSIw",
            "ChxDUGF0cm9uVG91dEluc3RhbnRDb21wbGV0aW9uEhAKCHBhdHJvbklkGAEg",
            "AigJIioKFkNQYXRyb25Ub3V0SW5zdGFudENhbGwSEAoIcGF0cm9uSWQYASAC",
            "KAkiHwoLQ1RhbGtQYXRyb24SEAoIcGF0cm9uSWQYASACKAkiPQoYQ1NwZWNp",
            "YWxUYWxrUGF0cm9uUmVzdWx0EhAKCHBhdHJvbklkGAEgAigJEg8KB3N1Y2Nl",
            "c3MYAiACKAgiLAoYQ1JlZnJlc2hEYXRhQWZ0ZXJMZXZlbFVwEhAKCHN0b3Jl",
            "S2V5GAEgAigFIhAKDkNHZXRSZWN5Y2xlVGlwIh8KHUNSZXNwb25zZUFsbFF1",
            "ZXN0QW5kRXhwYW5zaW9uIkAKC0NHZXRUcmFueElkEg4KBmRlc2NJZBgBIAIo",
            "CRIOCgZtYXJrZXQYAiACKAkSEQoJYm9udXNSYXRlGAMgASgFIoIBChRDSW5B",
            "cHBQdXJjaGFzZVJlc3VsdBIOCgZtYXJrZXQYASACKAkSDAoEYXJnMBgCIAIo",
            "CRIMCgRhcmcxGAMgAigJEhYKDmJpbGxpbmdWZXJzaW9uGAQgASgFEhMKC3Bh",
            "Y2thZ2VOYW1lGAUgASgJEhEKCWJvbnVzUmF0ZRgGIAEoBSIzChNDR2V0RGFu",
            "YWxTZXJ2ZXJJbmZvEg4KBmRlc2NJZBgBIAIoCRIMCgRpbmZvGAIgAigJIiUK",
            "D0NEYW5hbFJlc2VuZE9UUBISCgpzZXJ2ZXJJbmZvGAEgAigJIjAKDUNEYW5h",
            "bFNpbUJpbGwSEgoKc2VydmVySW5mbxgBIAIoCRILCgNvdHAYAiACKAkiLgoO",
            "Q0RhbmFsUmVCaWxsV1ASDgoGZGVzY0lkGAEgAigJEgwKBGluZm8YAiACKAki",
            "IwoQQ0RhbmFsRGVsQXV0aEtleRIPCgdhdXRoS2V5GAEgAigJInQKGUNGb3Jj",
            "ZUluQXBwUHVyY2hhc2VSZXN1bHQSDAoEdHhJZBgBIAIoCRIOCgZpdGVtSWQY",
            "AiACKAkSDAoEYXJnMBgDIAIoCRIYChBvbmx5Q2hlY2tSZWNlaXB0GAQgAigI",
            "EhEKCWJvbnVzUmF0ZRgFIAEoBSIrChJTUHVyY2hhc2VDb25maXJtZWQSFQoN",
            "dHJhbnNhY3Rpb25JZBgBIAIoCSIkChRTRGFuYWxSZXN1bHRSZWNlaXZlZBIM",
            "CgRqc29uGAEgAigJIiIKDkNHZXRGcmllbmRJbmZvEhAKCGZyaWVuZElkGAEg",
            "AygJIisKCkNJbnZpdGVTTVMSDwoHcGhvbmVObxgBIAIoCRIMCgRuYW1lGAIg",
            "AigJIjIKDUNJbnZpdGVGcmllbmQSEAoIZnJpZW5kSWQYASACKAkSDwoHcGhv",
            "bmVObxgCIAEoCSI4Cg5DSW52aXRlRG9ybWFudBIQCghmcmllbmRJZBgBIAIo",
            "CRIUCgxwZk1zZ0Jsb2NrZWQYAiABKAgiOQoPQ0ludml0ZUNvbWVCYWNrEhAK",
            "CGZyaWVuZElkGAEgAigJEhQKDHBmTXNnQmxvY2tlZBgCIAEoCCIeChxDSW52",
            "aXRlQ29tZUJhY2tDb21wbGV0ZUNvdW50IiYKD0NHZXRBbGxXcml0aW5ncxIT",
            "CgtsYXN0UmVmcmVzaBgBIAIoBSJ1CgxDUHVzaFdyaXRpbmcSEwoLZ3Vlc3RC",
            "b29rSWQYASACKAkSDAoEbXlJZBgCIAIoCRIPCgdtZXNzYWdlGAMgAigJEhAK",
            "CGlzU2VjcmV0GAQgAigIEhMKC2xhc3RSZWZyZXNoGAUgAigFEgoKAmx2GAYg",
            "AigFIlkKDENQdXNoQ29tbWVudBIQCgh3cml0ZXJJZBgBIAIoCRIRCgl0aW1l",
            "c3RhbXAYAiACKAUSDwoHY29tbWVudBgDIAIoCRITCgtsYXN0UmVmcmVzaBgE",
            "IAIoBSI4ChJDR3Vlc3RCb29rU2V0VGl0bGUSDQoFdGl0bGUYASACKAkSEwoL",
            "bGFzdFJlZnJlc2gYAiACKAUiKwoWQ0d1ZXN0Qm9va1NldEFsbFNlY3JldBIR",
            "CglhbGxTZWNyZXQYASACKAgiXwoOQ1JlbW92ZVdyaXRpbmcSEwoLZ3Vlc3RC",
            "b29rSWQYASACKAkSEAoId3JpdGVySWQYAiACKAkSEQoJdGltZXN0YW1wGAMg",
            "AigFEhMKC2xhc3RSZWZyZXNoGAQgAigFIkoKDkNSZW1vdmVDb21tZW50EhAK",
            "CHdyaXRlcklkGAEgAigJEhEKCXRpbWVzdGFtcBgCIAIoBRITCgtsYXN0UmVm",
            "cmVzaBgDIAIoBSJwCg5DTW9kaWZ5V3JpdGluZxITCgtndWVzdEJvb2tJZBgB",
            "IAIoCRIQCgh3cml0ZXJJZBgCIAIoCRIRCgl0aW1lc3RhbXAYAyACKAUSDwoH",
            "d3JpdGluZxgEIAIoCRITCgtsYXN0UmVmcmVzaBgFIAIoBSJbCg5DTW9kaWZ5",
            "Q29tbWVudBIQCgh3cml0ZXJJZBgBIAIoCRIRCgl0aW1lc3RhbXAYAiACKAUS",
            "DwoHY29tbWVudBgDIAIoCRITCgtsYXN0UmVmcmVzaBgEIAIoBSIeCgtDSm9p",
            "bmVkR2FtZRIPCgdwaG9uZU5vGAEgAigJIhEKD0NVbnJlZ2lzdGVyR2FtZSIO",
            "CgxDR2V0Q2FzaEluZm8iRAoUQ01pZ3JhdGVHdWVzdFRvS2FrYW8SCwoDdWlk",
            "GAEgAigJEg0KBWVtYWlsGAIgAigJEhAKCG5pY2tuYW1lGAMgAigJIhwKDkNJ",
            "bmR1Y2VkQWN0aW9uEgoKAmlkGAEgAigJIhgKCkNSZXRyeVRvdXQSCgoCaWQY",
            "ASACKAkiIgoRQ0ludml0ZUtha2FvRXZlbnQSDQoFY291bnQYASACKAUiTgoK",
            "Q09iakRlY29VcBILCgNvaWQYASACKAUSDgoGbWV0aG9kGAIgAigJEhEKCWlz",
            "SW52YWxpZBgDIAIoCBIQCghzdG9yZUtleRgEIAIoBSKqAQoHQ0J1eUFsbBIP",
            "CgdidXlMaXN0GAEgAigJEhIKCmlnbm9yZUxpc3QYAiACKAkSEAoIbW92ZUxp",
            "c3QYAyACKAkSFgoOaXNJbWl0YXRlVGlsZXMYBCADKAgSDAoEY2FzaBgFIAIo",
            "BRIMCgRjb3N0GAYgAigFEhMKC2ludmFsaWREZWNvGAcgAigFEhAKCHN0b3Jl",
            "S2V5GAggAigFEg0KBWZsb29yGAkgAigFIrABCg1DUmV2ZXJ0RGVzaWduEg8K",
            "B2J1eUxpc3QYASACKAkSEgoKaWdub3JlTGlzdBgCIAIoCRIQCghtb3ZlTGlz",
            "dBgDIAIoCRIWCg5pc0ltaXRhdGVUaWxlcxgEIAMoCBIMCgRjYXNoGAUgAigF",
            "EgwKBGNvc3QYBiACKAUSEwoLaW52YWxpZERlY28YByACKAUSEAoIc3RvcmVL",
            "ZXkYCCACKAUSDQoFZmxvb3IYCSACKAUiMQoQQ0Nhc2hUcmVlSGFydmVzdBIL",
            "CgNvaWQYASACKAUSEAoIc3RvcmVLZXkYAiACKAUiNAoTQ1JvYXN0VGlja2V0",
            "SGFydmVzdBILCgNvaWQYASACKAUSEAoIc3RvcmVLZXkYAiACKAUiJQoTQ0Nh",
            "c2hUcmVlUHVzaEVuYWJsZRIOCgZlbmFibGUYASACKAgiOAoPQ0NoZXJyeVRy",
            "ZWVIZWxwEgsKA29pZBgBIAIoBRILCgN1aWQYAiACKAkSCwoDZmlkGAMgAigJ",
            "IiIKE0NDaGVycnlUcmVlSGVscExpc3QSCwoDdWlkGAEgAigJIigKEkNDaGVy",
            "cnlUcmVlSGFydmVzdBISCgphY3Rpb25UeXBlGAIgAigJIiIKE0NDaGVycnlU",
            "cmVlSW5pdEhlbHASCwoDdWlkGAIgAigJIiQKFUNFeGlzdENoZXJyeVRyZWVJ",
            "bnZlbhILCgNmaWQYASACKAkiGwoNQ1B1cmNoYXNlR29sZBIKCgJpZBgBIAIo",
            "CSJXChdDQXV0b0NvZmZlZU1hY2hpbmVTdGFydBILCgNvaWQYASACKAUSEAoI",
            "c3RvcmVLZXkYAiACKAUSDgoGZGVzY0lkGAMgAygJEg0KBWNvdW50GAQgAygF",
            "IjYKFUNBdXRvQ29mZmVlTWFjaGluZUZpbhILCgNvaWQYASACKAUSEAoIc3Rv",
            "cmVLZXkYAiACKAUiSAoZQ0F1dG9Db2ZmZWVNYWNoaW5lU2hvcnRlbhILCgNv",
            "aWQYASACKAUSDAoEY2FzaBgCIAIoBRIQCghzdG9yZUtleRgDIAIoBSI9Cg5D",
            "Q29mZmVlRmluQXV0bxILCgNvaWQYASACKAUSEAoIc3RvcmVLZXkYAiACKAUS",
            "DAoEZmlkcxgDIAMoCSIaChhDQ29uZmlybUV4cGlyZWRTYWxlRXZlbnQiGgoL",
            "Q1NlbmRDbG92ZXISCwoDdWlkGAEgAigJIhIKEENHZXRDbG92ZXJSZXdhcmQi",
            "LwoNQ0J1eVBvaW50SXRlbRIOCgZzaG9wSWQYASACKAkSDgoGaXRlbUlkGAIg",
            "AigJIi8KDUNCdXlTaG9wUG9pbnQSDgoGc2hvcElkGAEgAigJEg4KBml0ZW1J",
            "ZBgCIAIoCSIcChpDQ29uZmlybVJlZnJlc2hDaGFyZ2VFdmVudCI0ChlDQ2hh",
            "bmdlUmFuZG9tRnJpZW5kQ29uZmlnEhcKD3VzZVJhbmRvbUZyaWVuZBgBIAIo",
            "CCInChdDQ2hhbmdlUmFuZG9tRnJpZW5kTmFtZRIMCgRuYW1lGAEgAigJIigK",
            "GUNIaWRlUmFuZG9tRnJpZW5kRm9sbG93ZXISCwoDZmlkGAEgAigJIjYKE0NS",
            "ZW1vdmVIaWRlRm9sbG93ZXISCwoDdWlkGAEgAigJEhIKCnJlbW92ZUxpc3QY",
            "AiADKAkiKwocQ0dldEhpZGVSYW5kb21GcmllbmRGb2xsb3dlchILCgNmaWQY",
            "AiACKAkiSQoMQ0J1eUx1Y2t5Qm94EgoKAmlkGAEgAigJEg0KBWNvdW50GAIg",
            "AigFEg8KB2lzQ29zdDIYAyABKAgSDQoFcHJpY2UYBCACKAUiMAoNQ09wZW5M",
            "dWNreUJveBIKCgJpZBgBIAIoCRITCgttYWdDb3Vwb25JZBgCIAEoCSJPCg5D",
            "QnV5UGFja2FnZUJveBIKCgJpZBgBIAIoCRIMCgRjYXNoGAIgAigFEg8KB2l0",
            "ZW1JZHMYAyADKAkSEgoKaXRlbUNvdW50cxgEIAMoBSJSCg9DT3BlblBhY2th",
            "Z2VCb3gSCgoCaWQYASACKAkSDwoHaXRlbUlkcxgCIAMoCRISCgppdGVtQ291",
            "bnRzGAMgAygFEg4KBmV4cGlyZRgEIAIoBSI6Cg5DQnV5SXRlbUNvdXBvbhIK",
            "CgJpZBgBIAIoCRINCgVjb3VudBgCIAIoBRINCgVwcmljZRgDIAIoBSIiCg5D",
            "VXNlSXRlbUNvdXBvbhIQCghjb3Vwb25JZBgBIAIoCSIxCgtDQnV5TlBDR2lm",
            "dBIPCgdldmVudElkGAEgAigJEhEKCWl0ZW1Db3VudBgCIAIoBSIrCg1DU3Vi",
            "bWl0U3VydmV5EgoKAmlkGAEgAigJEg4KBmFuc3dlchgCIAMoBSJEChFDU3Vi",
            "bWl0U3VydmV5VGVzdBIKCgJpZBgBIAIoCRITCgtmaW5hbFN1Ym1pdBgCIAIo",
            "CBIOCgZhbnN3ZXIYAyADKAUiHgoQQ1Jlc2V0U3VydmV5VGVzdBIKCgJpZBgB",
            "IAIoCSIxCg5DU2VuZEV2ZW50R2lmdBIRCglldmVudE5hbWUYASACKAkSDAoE",
            "ZmlkcxgCIAMoCSIPCg1TRXZlbnRVcGRhdGVkIg4KDENSZWR1Y2VFdmVudCJh",
            "CgtDU3RhbXBFdmVudBIPCgdldmVudElkGAEgAigJEg4KBmdvYWxJZBgCIAIo",
            "CRIUCgxjb250cmlidXRpb24YAyABKAUSCwoDdGlwGAQgASgFEg4KBml0ZW1J",
            "ZBgFIAEoCSIYChZDU3RhbXBFdmVudENsYWltUmV3YXJkIicKFENTdGFtcEV2",
            "ZW50Q2FzaFN0YW1wEg8KB2V2ZW50SWQYASACKAkiXgoVQ0ludml0ZUtha2Fv",
            "RXZlbnRTZW5kEg8KB2V2ZW50SWQYASACKAkSDQoFbXlLZXkYAiACKAkSEQoJ",
            "ZnJpZW5kSWRzGAMgAygJEhIKCmZyaWVuZEtleXMYBCADKAkiTAoXQ0ludml0",
            "ZUtha2FvRXZlbnRUaGFua3MSDwoHZXZlbnRJZBgBIAIoCRINCgVteUtleRgC",
            "IAIoCRIRCglmcmllbmRLZXkYAyACKAkiRwoTQ1JlcG9ydEZyaWVuZHNDb3Vu",
            "dBIKCgJmchgBIAIoBRILCgNhRnIYAiACKAUSCgoCcmYYAyACKAUSCwoDYVJm",
            "GAQgAigFIjgKEENDaGFuZ2VJdGVtQ29sb3ISEQoJc3RvcmVJdGVtGAEgAygJ",
            "EhEKCWludmVuSXRlbRgCIAMoCSIaCgtDRGV2Q29tbWFuZBILCgNjbWQYASAC",
            "KAkiIAoNU1BvcHVwTWVzc2FnZRIPCgdtZXNzYWdlGAEgAigJIi0KFENVcGRh",
            "dGVTbGVlcFNldHRpbmdzEhUKDXNsZWVwU2V0dGluZ3MYASACKAkiQAoPQ09w",
            "ZW5TcGVjaWFsQm94Eg0KBWJveElkGAEgAigJEg4KBml0ZW1JZBgCIAIoCRIO",
            "CgZleHBpcmUYAyACKAkiIQoQQ0NoYW5nZUNhZmVUaXRsZRINCgV0aXRsZRgB",
            "IAIoCSIqChZDQ2hhbmdlRmlyc3RWaXNpdFN0b3JlEhAKCHN0b3JlS2V5GAEg",
            "AigFIjkKEkNIYXJ2ZXN0QWxsV29ya09iahIQCghzdG9yZUtleRgBIAIoBRIR",
            "Cgl3b3JrRmxvb3IYAiABKAUiUAoUQ0ludmVuT2JqQ2hhbmdlQ29sb3ISEgoK",
            "ZGVzdEl0ZW1JZBgBIAIoCRIRCgluZXdJdGVtSWQYAiACKAkSEQoJdXNlQ291",
            "cG9uGAMgAigIIp8BCg9DT2JqQ2hhbmdlQ29sb3ISCwoDb2lkGAEgAigFEhIK",
            "CmRlc3RJdGVtSWQYAiACKAkSCQoBeBgDIAIoBRIJCgF5GAQgAigFEg0KBWZs",
            "b29yGAUgAigFEgwKBGZsaXAYBiACKAUSEAoIc3RvcmVLZXkYByACKAUSEQoJ",
            "dXNlQ291cG9uGAggAigJEhMKC2ludmFsaWREZWNvGAkgASgFIjMKD0NDYXJD",
            "aGFuZ2VDb2xvchINCgVjYXJJZBgBIAIoCRIRCgl1c2VDb3Vwb24YAiACKAki",
            "NAoTQ09iakV4dGVuc2lvblBlcmlvZBILCgNvaWQYASACKAUSEAoIc3RvcmVL",
            "ZXkYAiACKAUiPQoIQ01peEl0ZW0SCwoDb2lkGAEgAigFEhIKCmludmVuRWxl",
            "bXMYAiADKAkSEAoIc3RvcmVLZXkYAyACKAUiLAoLQ01peEl0ZW1GaW4SCwoD",
            "b2lkGAEgAigFEhAKCHN0b3JlS2V5GAIgAigFIj4KD0NNaXhJdGVtU2hvcnRl",
            "bhILCgNvaWQYASACKAUSDAoEY2FzaBgCIAIoBRIQCghzdG9yZUtleRgDIAIo",
            "BSInChNDSXNJdGVtTWl4ZXJXb3JraW5nEhAKCHN0b3JlS2V5GAEgAigFIj0K",
            "DUNJbmNCZWFuTGV2ZWwSDgoGYmVhbklkGAEgAigJEgwKBGNhc2gYAiACKAUS",
            "DgoGaXRlbUlkGAMgASgJIiEKEUNPYmpCdXlUd29QbHVzT25lEgwKBGtpbmQY",
            "ASACKAkiWAoSQ0V4cGFuZFNlY29uZEZsb29yEhAKCHN0b3JlS2V5GAEgAigF",
            "EhAKCGV4cGFuZElkGAIgAigJEg8KB3VzZUNhc2gYAyACKAgSDQoFcHJpY2UY",
            "BCACKAUiJAoRQ0V4cGFuZFRoaXJkU3RvcmUSDwoHdXNlQ2FzaBgBIAIoCCI5",
            "ChhDRXhwYW5kVGhpcmRTdG9yZUluc3RhbnQSDAoEY2FzaBgBIAIoBRIPCgds",
            "ZWZ0U2VjGAIgAigFIhsKGUNFeHBhbmRUaGlyZFN0b3JlQ29tcGxldGUidQoS",
            "Q1Jlc3RhcnRUaGlyZFN0b3JlEg4KBmNhc2hlchgBIAIoCRIOCgZwaWNrdXAY",
            "AiACKAkSDwoHcmVjeWNsZRgDIAIoCRIWCg5uZWNlc3NhcnlTaG9wMRgEIAIo",
            "BRIWCg5uZWNlc3NhcnlTaG9wMhgFIAIoBSJrChtDUmVzdGFydFRoaXJkU3Rv",
            "cmVFeHBhbnNpb24SFgoObmVjZXNzYXJ5U2hvcDEYASACKAUSFgoObmVjZXNz",
            "YXJ5U2hvcDIYAiACKAUSCwoDb2lkGAMgAygFEg8KB3JlY3ljbGUYBCABKAki",
            "LQobQ1RoaXJkU3RvcmVSZWN2RXhwYW5kUmV3YXJkEg4KBml0ZW1JZBgBIAIo",
            "CSIfCh1DVGhpcmRTdG9yZVJlY2FsY0V4cGFuZFJld2FyZCI+ChlDVGhpcmRT",
            "dG9yZVJlY3ZSYXJlUmV3YXJkEg4KBml0ZW1JZBgBIAIoCRIRCglpdGVtQ291",
            "bnQYAiACKAUiFQoTQ0dyYW50TmV3RGFpbHlRdWVzdCJVChNDRGFpbHlRdWVz",
            "dFByb2dyZXNzEg8KB3F1ZXN0SWQYASACKAUSDAoEZ29hbBgCIAIoBRINCgVz",
            "dGF0ZRgDIAIoBRIQCghzdG9yZUtleRgEIAIoBSIkChFDRGFpbHlRdWVzdEZp",
            "bmlzaBIPCgdxdWVzdElkGAEgAigFIqABChxDRGFpbHlRdWVzdEluc3RhbnRD",
            "b21wbGV0aW9uEg8KB3F1ZXN0SWQYASACKAUSDAoEZ29hbBgCIAIoBRIMCgRj",
            "YXNoGAMgAigFEhQKDGN1cnJlbnRTdGF0ZRgEIAIoBRIZChFpc0V2ZW50Q2Fz",
            "aEFtb3VudBgFIAIoCBIOCgZwZXRPaWQYCCABKAUSEgoKcGV0U2tpbGxJZBgJ",
            "IAEoCSIUChJDRGFpbHlRdWVzdEdldERhdGEiPgoVQ0dldEFjaGlldmVtZW50",
            "UmV3YXJkEhUKDWFjaGlldmVtZW50SWQYASACKAkSDgoGZ29hbElkGAIgAigJ",
            "IlcKE0NQcm9jZWVkQWNoaWV2ZW1lbnQSFQoNYWNoaWV2ZW1lbnRJZBgBIAIo",
            "CRILCgNrZXkYAiABKAkSDQoFY291bnQYAyABKAUSDQoFaXNTZXQYBCABKAgi",
            "NAoLQ0hvdERlYWxCdXkSDgoGaXRlbUlkGAEgAigJEhUKDWlzU3BlY2lhbEl0",
            "ZW0YAiABKAgiHwoMQ0hvdERlYWxQb2xsEg8KB2V2ZW50SWQYASACKAkiEgoQ",
            "Q0dldENoYXJnZU9iamVjdCImChNDUG9pbnRNaXNzaW9uRmluaXNoEg8KB3F1",
            "ZXN0SWQYASACKAUiWQoeQ1BvaW50TWlzc2lvbkluc3RhbnRDb21wbGV0aW9u",
            "Eg8KB3F1ZXN0SWQYASACKAUSDAoEZ29hbBgCIAIoBRIMCgRjYXNoGAMgAigF",
            "EgoKAmN2GAQgAigFIhcKFUNHcmFudE5ld1BvaW50TWlzc2lvbiIoChdDUG9p",
            "bnRNaXNzaW9uR2V0UHJlc2VudBINCgVwb2ludBgBIAIoBSImChNDQmluZ29N",
            "aXNzaW9uRmluaXNoEg8KB3F1ZXN0SWQYASACKAUiWQoeQ0JpbmdvTWlzc2lv",
            "bkluc3RhbnRDb21wbGV0aW9uEg8KB3F1ZXN0SWQYASACKAUSDAoEZ29hbBgC",
            "IAIoBRIMCgRjYXNoGAMgAigFEgoKAmN2GAQgAigFIhcKFUNHcmFudE5ld0Jp",
            "bmdvTWlzc2lvbiIoChdDQmluZ29NaXNzaW9uR2V0UHJlc2VudBINCgVwb2lu",
            "dBgBIAIoBSIYChZDQmluZ29NaXNzaW9uR2V0TnVtYmVyIhkKF0NCaW5nb01p",
            "c3Npb25RdWVzdFJlc2V0IlQKDUNTdG9yZUJlYW5Cb3gSEQoJaW52ZW5FbGVt",
            "GAEgASgJEhAKCHN0b3JlS2V5GAIgAigFEhEKCWZyb21JbnZlbhgDIAIoCBIL",
            "CgNvaWQYBCABKAUiMAoRQ1VwZ3JhZGVCZWFuRGVwb3QSCgoCaWQYASACKAUS",
            "DwoHdXNlR29sZBgCIAIoCCIRCg9DRXZlbnREaWNlUmVzZXQiIwoQQ0V2ZW50",
            "RGljZUZpbmlzaBIPCgdxdWVzdElkGAEgAigJIiAKEUNFdmVudERpY2VVc2VE",
            "aWNlEgsKA251bRgBIAEoBSIfChFDRXZlbnREaWNlQnV5RGljZRIKCgJpZBgB",
            "IAIoCSIfCh1DRXZlbnREaWNlRm9yY2VNb3ZlU3RhcnRQb2ludCI9Ch1DRXZl",
            "bnREaWNlRm9yY2VNb3ZlQnlHb2xkQ2FyZBIOCgZmb3dhcmQYASACKAgSDAoE",
            "ZGlzdBgCIAIoBSIiChJDRXZlbnREaWNlU2VuZEdpZnQSDAoEZmlkcxgCIAMo",
            "CSIjChJDRXZlbnREaWNlUmVjdkdpZnQSDQoFY291bnQYASACKAUiFQoTQ0V2",
            "ZW50RGljZVJlc2V0R2lmdCIWChRDRXZlbnREaWNlRmlyc3RWaXNpdCIhChFD",
            "Q29tZUJhY2tTZW5kR2lmdBIMCgRmaWRzGAIgAygJIhMKEUNDb21lQmFja1Jl",
            "Y3ZHaWZ0IicKFENFdmVudEdvbUNoZWNrUmV3YXJkEg8KB3N0YWdlSWQYASAC",
            "KAkijwEKDkNUYXJvdFF1ZXN0aW9uEg0KBWdlbnJlGAEgAigJEgwKBG1haW4Y",
            "AiACKAkSCwoDc3ViGAMgAigJEhAKCGNhdGVnb3J5GAQgASgJEhUKDXF1ZXN0",
            "aW9uSW5kZXgYBSABKAkSFwoPcXVlc3Rpb25Db250ZW50GAYgASgJEhEKCXVz",
            "ZVRpY2tldBgHIAEoCCIOCgxDVGFyb3RSZXdhcmQiEgoQQ0FwcGx5VGFyb3RT",
            "a2lsbCIdCg9DVGFyb3RCdXlUaWNrZXQSCgoCaWQYASACKAkiGgoYQ1RoaXJk",
            "U3RvcmVHZXRBZGRpdEZhdm9yIigKGkNUaGlyZFN0b3JlSG9zdERhaWx5UmV3",
            "YXJkEgoKAmlkGAEgAigJIhoKGENUaGlyZFN0b3JlQ29tcGxldGVGYXZvciIv",
            "Ch9DVGhpcmRTdG9yZUluc3RhbnRGaWxsU2FsZVBvaW50EgwKBGNhc2gYASAC",
            "KAUiKwobQ1RoaXJkU3RvcmVJbnN0YW50RmlsbEZhdm9yEgwKBGNhc2gYASAC",
            "KAUiNgoSQ0FkZEZhdm9yaXRlRnJpZW5kEg0KBWZySWRzGAEgAigJEhEKCWxv",
            "Y2FsRGF0YRgCIAEoCCIlChVDUmVtb3ZlRmF2b3JpdGVGcmllbmQSDAoEZnJJ",
            "ZBgBIAIoCSJDChJDUGF0cm9uTWFjaGluZUNhbGwSCwoDb2lkGAEgAigFEg4K",
            "Bml0ZW1JZBgCIAEoCRIQCghwYXRyb25JZBgDIAEoCSIgChFDUGF0cm9uTWFj",
            "aGluZUZpbhILCgNvaWQYASACKAUiIQoRQ0NoYXJnZUNvbGxlY3Rpb24SDAoE",
            "dHlwZRgBIAIoCSIfChFDUmVjZWl2ZUNoYXJnZU9iahIKCgJpZBgBIAIoCSJL",
            "ChZDUmVjZWl2ZUNvbGxlY3Rpb25HaWZ0EgoKAmlkGAEgAigJEg0KBW9yZGVy",
            "GAIgAigFEhYKDmNvbGxlY3Rpb25UeXBlGAMgAigJIhcKFUNSZWNlaXZlTGV2",
            "ZWxVcFJld2FyZCIwCg1DT3BlblBvaW50Qm94Eg8KB2V2ZW50SWQYASACKAkS",
            "DgoGYm94TnVtGAIgAigFIi4KDENCdXlCb3hQb2ludBIPCgdldmVudElkGAEg",
            "AigJEg0KBXBvaW50GAIgAigFIh4KC0NEZXZUaW1lU2V0Eg8KB3NldFRpbWUY",
            "ASADKAkiKwoJQ1hwUmV3YXJkEhEKCWlzTGV2ZWxVcBgBIAIoCBILCgNleHAY",
            "AiACKAUiJQoSQ0dldE9uVGltZUJveFBvaW50Eg8KB2V2ZW50SWQYASACKAki",
            "OgoJQ1BldEF3YWtlEgsKA29pZBgBIAIoBRINCgVhd2FrZRgCIAIoCBIRCglj",
            "dXNoaW9uSWQYAyABKAkiGAoJQ1BldFRyZWF0EgsKA29pZBgBIAIoBSIlCghD",
            "UGV0Q2FyZRILCgNvaWQYASACKAUSDAoEdHlwZRgCIAIoCSIsCg9DUGV0V2l0",
            "aFBsYXlpbmcSCwoDb2lkGAEgAigFEgwKBHR5cGUYAiACKAkiHwoQQ1BldFN0",
            "YXR1c1VwZGF0ZRILCgNvaWQYASACKAUiIgoTQ1BldFB1dFN0YXR1c1VwZGF0",
            "ZRILCgNvaWQYASACKAUiKwoOQ1BldFVzZXJBY3Rpb24SCwoDb2lkGAEgAigF",
            "EgwKBHR5cGUYAiACKAkiKgoMQ1BldEVhdFNuYWNrEgsKA29pZBgBIAIoCRIN",
            "CgVwZXRJZBgCIAIoBSIwChJDUGV0UmV2ZXJ0QmVmb3JlSHASDQoFcGV0SWQY",
            "ASACKAUSCwoDb2lkGAIgASgJIikKDENQZXRSZU5hbWluZxILCgNvaWQYASAC",
            "KAUSDAoEbmFtZRgCIAIoCSIoCgtDQnV5UGV0SXRlbRIKCgJpZBgBIAIoCRIN",
            "CgVjb3VudBgCIAIoBSJUCgxDRmlsbFBldEZlZWQSDgoGZmVlZElkGAEgAigJ",
            "EhEKCWZlZWRDb3VudBgCIAIoBRIQCghzdG9yZUtleRgDIAIoBRIPCgdib3ds",
            "T2lkGAQgAigFIjIKDUNDbGVhclBldEZlZWQSEAoIc3RvcmVLZXkYASACKAUS",
            "DwoHYm93bE9pZBgCIAIoBSIwCgtDUGV0RWF0RmVlZBIQCghzdG9yZUtleRgB",
            "IAIoBRIPCgdib3dsT2lkGAIgAigFIi8KD0NQZXRQbGF5V2l0aE9iahIQCghz",
            "dG9yZUtleRgBIAIoBRIKCgJpZBgCIAIoBSJ+CgtDUGV0RHJlc3NVcBILCgNv",
            "aWQYASACKAUSDQoFcGFydHMYAiADKAkSEgoKZnJvbUludmVucxgDIAMoCBIR",
            "Cglpc1dlYXJpbmcYBCADKAgSEAoIc3RvcmVLZXkYBSACKAUSDAoEY29zdBgG",
            "IAIoBRIMCgRjYXNoGAcgAigFIjcKCUNQZXRBZG9wdBIMCgRraW5kGAEgAigJ",
            "EgwKBG5hbWUYAiACKAkSDgoGZ2VuZGVyGAMgAigJIiUKB0NQZXRQdXQSCwoD",
            "b2lkGAEgAigFEg0KBXByaWNlGAIgAigFIlQKCENQZXRDdXJlEgsKA29pZBgB",
            "IAIoBRINCgVwcmljZRgCIAIoBRIRCglpc1VzZUNhc2gYAyACKAgSGQoRaXNJ",
            "bW1lZGlhdGVseUN1cmUYBCACKAgiFwoIQ1BldFRha2USCwoDb2lkGAEgAigF",
            "IiIKEUNQZXRQdXRTaXplRXhwYW5kEg0KBXByaWNlGAEgAigFIikKCkNQZXRD",
            "aGFuZ2USDAoEdGltZRgBIAIoBRINCgVwcmljZRgCIAEoBSIjChRDUGV0TGVh",
            "cm5TZWNvbmRTa2lsbBILCgNvaWQYASACKAUiMQoPQ1BldFNraWxsQ2hhbmdl",
            "EgsKA29pZBgBIAIoBRIRCglzbG90SW5kZXgYAiACKAUiPgoMQ1BldFVzZVNr",
            "aWxsEhAKCHN0b3JlS2V5GAEgAigFEgsKA29pZBgCIAIoBRIPCgdza2lsbElk",
            "GAMgAigJIjcKF0NQZXRVc2VTa2lsbEdldFJlc291cmNlEgsKA29pZBgBIAIo",
            "BRIPCgdza2lsbElkGAIgAigJIjQKFENQZXRVc2VTa2lsbFRvdXRIaW50EgsK",
            "A29pZBgBIAIoBRIPCgdza2lsbElkGAIgAigJIjUKEkNVc2VDaGVycnlSb3Vs",
            "ZXR0ZRIPCgd1c2VGcmVlGAEgAigIEg4KBmZvcmNlZBgCIAIoCCIlChBDQnV5",
            "Um91bGV0dGVCZWFuEhEKCWJ1ZmZJbmRleBgBIAIoBSIeCg9DU2V0Q2FsZW5k",
            "YXJHTVQSCwoDR01UGAEgAigFIiwKC0NVc2VKdWtlYm94EhAKCHN0b3JlS2V5",
            "GAEgAigFEgsKA3VzZRgCIAIoCCIkChFDUmVmcmVzaERhaXNvSXRlbRIPCgdp",
            "bnN0YW50GAEgAigIIh8KDUNCdXlEYWlzb0l0ZW0SDgoGaXRlbUlkGAEgAigJ",
            "Ih4KEENCdXlPcGVuTHVja3lCb3gSCgoCaWQYASACKAkiQAoPQ0NoZXJyeVJv",
            "YXN0aW5nEgsKA29pZBgBIAIoBRIOCgZkZXNjSWQYAiACKAkSEAoIc3RvcmVL",
            "ZXkYAyACKAUiZQoPQ0NoZXJyeVJvYXN0RmluEgsKA29pZBgBIAIoBRIQCghv",
            "bmVDbGljaxgCIAIoCBIRCgl0cmFzaEJlYW4YAyACKAUSEAoIc3RvcmVLZXkY",
            "BCACKAUSDgoGZGVzY0lkGAUgAigJIkMKEkNDaGVycnlSb2FzdFJldml2ZRIL",
            "CgNvaWQYASACKAUSEAoIc3RvcmVLZXkYAiACKAUSDgoGZGVzY0lkGAMgAigJ",
            "ImMKE0NDaGVycnlSb2FzdFNob3J0ZW4SCwoDb2lkGAEgAigFEg8KB2xlZnRT",
            "ZWMYAiACKAUSDAoEY2FzaBgDIAIoBRIQCghzdG9yZUtleRgEIAIoBRIOCgZk",
            "ZXNjSWQYBSACKAkiWwocQ1RoZW1hQ29sbGVjdGlvbkxpc3RQb2ludEdldBIN",
            "CgVvcmRlchgBIAIoBRIUCgxjb2xsZWN0aW9uSWQYAiACKAkSFgoOY29sbGVj",
            "dGlvblR5cGUYAyACKAUiMQoZQ1RoZW1hQ29sbGVjdGlvblJld2FyZEdldBIU",
            "CgxyZXdhcmRJZExpc3QYASACKAkiHAoaQ1RoZW1hQ29sbGVjdGlvblF1ZXN0",
            "Q2hlY2siQwoSQ0NoZXJyeVJvYXN0Q2FuY2VsEgsKA29pZBgBIAIoBRIQCghz",
            "dG9yZUtleRgCIAIoBRIOCgZkZXNjSWQYAyACKAkiIQoSQ1NwZWNpYWxPcmRl",
            "ckNsZWFyEgsKA2lkeBgBIAIoBSIiChNDU3BlaWNhbE9yZGVyQ2FuY2VsEgsK",
            "A2lkeBgBIAIoBSJHChJDU3BlY2lhbE9yZGVyUmVuZXcSCwoDaWR4GAEgAigF",
            "EhAKCG5lZWRDYXNoGAIgAigFEhIKCnJlbWFpblRpbWUYAyACKAUiEwoRQ0Nh",
            "c2hVc2VDYXNoQ2hlY2siIgoRQ0Nhc2hVc2VSZXdhcmRHZXQSDQoFcm93SWQY",
            "ASACKAUiEQoPQ1NwZWNpYWxQYWNrYWdlIk4KDENMdlVwU2hvcEJ1eRIPCgdz",
            "aG9wS2V5GAEgAigJEgsKA2lkeBgCIAIoBRIQCghzdG9yZUtleRgDIAIoBRIO",
            "CgZpdGVtSWQYBCACKAkiPQodQ0x2VXBTaG9wUHVyY2hhc2VJdGVtQnV5Q2hl",
            "Y2sSDwoHc2hvcEtleRgBIAIoCRILCgNpZHgYAiACKAUiVQoPQ0V4cGFuZFRv",
            "cEZsb29yEhAKCHN0b3JlS2V5GAEgAigFEhAKCGV4cGFuZElkGAIgAigJEg8K",
            "B3VzZUNhc2gYAyACKAgSDQoFcHJpY2UYBCACKAUiFQoTQ05ld0JpbmdvTWlz",
            "c2lvbkdldCIVChNDTmV3UG9pbnRNaXNzaW9uR2V0IhEKD0NOZXdQb2ludEJv",
            "eEdldCIVChNDTmV3R29kT2ZNYW5hZ2VyR2V0IjEKEkNPcGVuTmV3Q29mZmVU",
            "cnVjaxIKCgJpZBgBIAIoCRIPCgd1c2VDYXNoGAIgAigIIrgBChZDQ29mZmVl",
            "VHJ1Y2tHYW1lRmluaXNoEhIKCnZpc2l0aW5nSWQYASACKAkSEgoKYmxvY2tU",
            "YWJsZRgCIAIoCRIUCgx0cmlnZ2VyVGFibGUYAyACKAkSEgoKY29tYm9UYWJs",
            "ZRgEIAIoCRINCgVmZXZlchgFIAIoCBINCgVzY29yZRgGIAIoBRIZChFjdXN0",
            "b21PcmRlclBhdHJvbhgHIAIoBRITCgtjdXN0b21PcmRlchgIIAIoBSIUChJH",
            "ZXRDb2ZmZWVUcnVja0dpZnQiJAoWQnV5Q29mZmVlVHJ1Y2tTaG9wSXRlbRIK",
            "CgJpZBgBIAIoCSIjChVDaGFuZ2VDZnRDdXN0b21lckl0ZW0SCgoCaWQYASAC",
            "KAkiNgofQ0NvZmZlZVRydWNrU3BlY2lhbE9yZGVyTWFuYWdlchITCgtpc1Rp",
            "bWVDaGVjaxgBIAIoCCItCh5DQ29mZmVlVHJ1Y2tTcGVjaWFsT3JkZXJGaW5p",
            "c2gSCwoDaWR4GAEgAigFIiwKHUNDb2ZmZWVUcnVja1NwZWNpYWxPcmRlclJl",
            "bmV3EgsKA2lkeBgBIAIoBSIXChVDQ29mZmVlVHJ1Y2tHYW1lU3RhcnQiKQoW",
            "Q0dldENvZmZlZVRydWNrUmFua2luZxIPCgd1aWRMaXN0GAEgAigJIiwKD0NP",
            "cGVuTHVja3lCb3hlcxIKCgJpZBgBIAIoCRINCgVjb3VudBgCIAIoBSJfCh9D",
            "QXV0b1RpY2tldFJvYXN0aW5nTWFjaGluZVN0YXJ0EgsKA29pZBgBIAIoBRIQ",
            "CghzdG9yZUtleRgCIAIoBRIOCgZkZXNjSWQYAyADKAkSDQoFY291bnQYBCAD",
            "KAUiPgodQ0F1dG9UaWNrZXRSb2FzdGluZ01hY2hpbmVGaW4SCwoDb2lkGAEg",
            "AigFEhAKCHN0b3JlS2V5GAIgAigFIlAKIUNBdXRvVGlja2V0Um9hc3RpbmdN",
            "YWNoaW5lU2hvcnRlbhILCgNvaWQYASACKAUSDAoEY2FzaBgCIAIoBRIQCghz",
            "dG9yZUtleRgDIAIoBSJBCiBDQXV0b1RpY2tldFJvYXN0aW5nTWFjaGluZVJl",
            "dml2ZRILCgNvaWQYASACKAUSEAoIc3RvcmVLZXkYAiACKAVCBkIER2FtZQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.SResponse), global::Network.Packet.SResponse.Parser, new[]{ "PacketId", "Json", "DataBytes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CError), global::Network.Packet.CError.Parser, new[]{ "Error", "Trace" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CKeepAlive), global::Network.Packet.CKeepAlive.Parser, new[]{ "RefreshSocialAct", "RefreshCashBalance", "CompensationId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CLoadData), global::Network.Packet.CLoadData.Parser, new[]{ "StoreKey", "FriendId", "Os", "DeviceModel", "DeviceId", "PhoneNum", "Country", "GlExtensions", "Guest", "LocalTime", "KakaoHashedKey", "Mid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CReloadData), global::Network.Packet.CReloadData.Parser, new[]{ "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjAdd), global::Network.Packet.CObjAdd.Parser, new[]{ "InvenElem", "X", "Y", "Floor", "Flip", "Inven", "StoreKey", "InvalidDeco", "SaleEventAuthKey", "Price", "BeanDepot", "BuyByCost", "CherryShop", "CostType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjMove), global::Network.Packet.CObjMove.Parser, new[]{ "Oid", "X", "Y", "Floor", "Flip", "StoreKey", "InvalidDeco" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjSell), global::Network.Packet.CObjSell.Parser, new[]{ "Oid", "StoreKey", "InvalidDeco" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjStore), global::Network.Packet.CObjStore.Parser, new[]{ "Oid", "StoreKey", "InvalidDeco" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjReplace), global::Network.Packet.CObjReplace.Parser, new[]{ "StoreOid", "InvenElem", "X", "Y", "Floor", "Flip", "Inven", "StoreKey", "InvalidDeco", "SaleEventAuthKey", "Price", "BeanDepot", "BuyByCost", "CherryShop", "CostType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjExchange), global::Network.Packet.CObjExchange.Parser, new[]{ "PlacedOid", "MovedOid", "X", "Y", "Floor", "Flip", "StoreKey", "InvalidDeco" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjBuy), global::Network.Packet.CObjBuy.Parser, new[]{ "Kind", "StoreKey", "Price", "Cash", "Cost", "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjStoreAll), global::Network.Packet.CObjStoreAll.Parser, new[]{ "Oid", "StoreKey", "InvalidDeco", "StoreWall", "StoreExtWall", "StoreTile", "ProtectBean" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSellInven), global::Network.Packet.CSellInven.Parser, new[]{ "InvenElem" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpand), global::Network.Packet.CExpand.Parser, new[]{ "ExpandId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.COpenNewStore), global::Network.Packet.COpenNewStore.Parser, new[]{ "StoreId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSaveDesignHistory), global::Network.Packet.CSaveDesignHistory.Parser, new[]{ "StoreKey", "Floor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRequestDesignHistoryData), global::Network.Packet.CRequestDesignHistoryData.Parser, new[]{ "StoreKey", "Floor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.COpenNewStoreAtOnce), global::Network.Packet.COpenNewStoreAtOnce.Parser, new[]{ "StoreId", "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTileSwap), global::Network.Packet.CTileSwap.Parser, new[]{ "X1", "Y1", "Floor1", "X2", "Y2", "Floor2", "Exterior", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTileAdd), global::Network.Packet.CTileAdd.Parser, new[]{ "Kind", "X", "Y", "Floor", "Inven", "Exterior", "StoreKey", "SaleEventAuthKey", "CherryShop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTileToSetAll), global::Network.Packet.CTileToSetAll.Parser, new[]{ "Kind", "StoreKey", "SaleEventAuthKey", "Floor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTileToSetAllThirdStore), global::Network.Packet.CTileToSetAllThirdStore.Parser, new[]{ "Kind", "StoreKey", "SaleEventAuthKey", "Floor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTileToSetDraw), global::Network.Packet.CTileToSetDraw.Parser, new[]{ "Kind", "StoreKey", "SaleEventAuthKey", "Floor", "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRoast), global::Network.Packet.CRoast.Parser, new[]{ "Oid", "DescId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRoastFin), global::Network.Packet.CRoastFin.Parser, new[]{ "Oid", "OneClick", "TrashBean", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChargedRoastHarvest), global::Network.Packet.CChargedRoastHarvest.Parser, new[]{ "Oid", "TrashBean", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRoastFullCharge), global::Network.Packet.CRoastFullCharge.Parser, new[]{ "Oid", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChargedSideDishHarvest), global::Network.Packet.CChargedSideDishHarvest.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSideDishFullCharge), global::Network.Packet.CSideDishFullCharge.Parser, new[]{ "Oid", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChargingSideDishMenuChange), global::Network.Packet.CChargingSideDishMenuChange.Parser, new[]{ "Oid", "DescId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CShortenDutchLiquidMake), global::Network.Packet.CShortenDutchLiquidMake.Parser, new[]{ "Oid", "Cash", "StoreKey", "IsTutorial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDutchLiquidMake), global::Network.Packet.CDutchLiquidMake.Parser, new[]{ "Oid", "StoreKey", "Bean", "Water", "IsTutorial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDutchCoffee), global::Network.Packet.CDutchCoffee.Parser, new[]{ "Oid", "DescId", "DutchType", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDutchLiquidSellStart), global::Network.Packet.CDutchLiquidSellStart.Parser, new[]{ "Oid", "InvenElems", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDutchLiquidSell), global::Network.Packet.CDutchLiquidSell.Parser, new[]{ "ObjInfo", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDutchLiquidMakeFin), global::Network.Packet.CDutchLiquidMakeFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDutchLiquidSellFin), global::Network.Packet.CDutchLiquidSellFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffee), global::Network.Packet.CCoffee.Parser, new[]{ "Oid", "DescId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffeeSell), global::Network.Packet.CCoffeeSell.Parser, new[]{ "ObjInfo", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffeeFin), global::Network.Packet.CCoffeeFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CShortenCoffeeSell), global::Network.Packet.CShortenCoffeeSell.Parser, new[]{ "Oid", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBaristaGuideDone), global::Network.Packet.CBaristaGuideDone.Parser, new[]{ "DescId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBaristaTestProgress), global::Network.Packet.CBaristaTestProgress.Parser, new[]{ "DescId", "TestIdx", "Score" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBaristaTestQuit), global::Network.Packet.CBaristaTestQuit.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBaristaTestUpgrade), global::Network.Packet.CBaristaTestUpgrade.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBaristaTestUpgradeByCash), global::Network.Packet.CBaristaTestUpgradeByCash.Parser, new[]{ "DescId", "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBaristaTestRetry), global::Network.Packet.CBaristaTestRetry.Parser, new[]{ "DescId", "TestIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBaristaTestStatus), global::Network.Packet.CBaristaTestStatus.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronOrderDone), global::Network.Packet.CPatronOrderDone.Parser, new[]{ "PatronId", "OrderId", "Score" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronOrderDoneByMachine), global::Network.Packet.CPatronOrderDoneByMachine.Parser, new[]{ "Oid", "PatronId", "OrderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronOrderEvaluate), global::Network.Packet.CPatronOrderEvaluate.Parser, new[]{ "PatronId", "OrderId", "Score" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetSpecialPatronPresent), global::Network.Packet.CGetSpecialPatronPresent.Parser, new[]{ "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSkipPatronEvent), global::Network.Packet.CSkipPatronEvent.Parser, new[]{ "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyPatronItem), global::Network.Packet.CBuyPatronItem.Parser, new[]{ "PatronId", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CFulfillPatronFavor), global::Network.Packet.CFulfillPatronFavor.Parser, new[]{ "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetPatronPresent), global::Network.Packet.CGetPatronPresent.Parser, new[]{ "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CFloorAddTrash), global::Network.Packet.CFloorAddTrash.Parser, new[]{ "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCleanTable), global::Network.Packet.CCleanTable.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCleanRecycle), global::Network.Packet.CCleanRecycle.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCleanFloor), global::Network.Packet.CCleanFloor.Parser, new[]{ "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCleanMachine), global::Network.Packet.CCleanMachine.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCancel), global::Network.Packet.CCancel.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRoastShorten), global::Network.Packet.CRoastShorten.Parser, new[]{ "Oid", "LeftSec", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRoastRevive), global::Network.Packet.CRoastRevive.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStaffHire), global::Network.Packet.CStaffHire.Parser, new[]{ "StaffId", "Body", "Name", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStaffDressUp), global::Network.Packet.CStaffDressUp.Parser, new[]{ "StaffId", "Parts", "FromInvens", "Motion", "StoreKey", "Cost", "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStaffBodyAndName), global::Network.Packet.CStaffBodyAndName.Parser, new[]{ "StaffId", "Body", "Name", "StoreKey", "SyncMyName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStaffFullCharge), global::Network.Packet.CStaffFullCharge.Parser, new[]{ "StaffId", "IncExp", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStaffBoost), global::Network.Packet.CStaffBoost.Parser, new[]{ "StaffId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAvatarBuy), global::Network.Packet.CAvatarBuy.Parser, new[]{ "Kind", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CQuestStart), global::Network.Packet.CQuestStart.Parser, new[]{ "QuestId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CQuestProgress), global::Network.Packet.CQuestProgress.Parser, new[]{ "QuestId", "Goal", "State", "StoreKey", "IsStuck" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CQuestFinish), global::Network.Packet.CQuestFinish.Parser, new[]{ "QuestId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CQuestRequest), global::Network.Packet.CQuestRequest.Parser, new[]{ "QuestId", "Goal", "FriendId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CQuestResponse), global::Network.Packet.CQuestResponse.Parser, new[]{ "Accept", "FriendId", "QuestId", "Goal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CQuestInstantCompletion), global::Network.Packet.CQuestInstantCompletion.Parser, new[]{ "QuestId", "Goal", "All", "Cash", "CurrentState", "StoreKey", "IsEventCashAmount", "PetOid", "PetSkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CQuestRemoveNewFlag), global::Network.Packet.CQuestRemoveNewFlag.Parser, new[]{ "QuestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRequestInstantCompletionByInvitee), global::Network.Packet.CRequestInstantCompletionByInvitee.Parser, new[]{ "QuestId", "Goal", "FriendId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpansionRequest), global::Network.Packet.CExpansionRequest.Parser, new[]{ "ExpandId", "FriendId", "IsEmilyChecked", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpansionResponse), global::Network.Packet.CExpansionResponse.Parser, new[]{ "Accept", "FriendId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpansionBuyPermission), global::Network.Packet.CExpansionBuyPermission.Parser, new[]{ "ExpandId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpansionBuyAllPermission), global::Network.Packet.CExpansionBuyAllPermission.Parser, new[]{ "ExpandId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpansionComplete), global::Network.Packet.CExpansionComplete.Parser, new[]{ "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpansionPermissionByInvitee), global::Network.Packet.CExpansionPermissionByInvitee.Parser, new[]{ "ExpandId", "FriendId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChainExpansionComplete), global::Network.Packet.CChainExpansionComplete.Parser, new[]{ "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChainExpansionShorten), global::Network.Packet.CChainExpansionShorten.Parser, new[]{ "StoreKey", "ExpandId", "LeftSec", "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCarReplace), global::Network.Packet.CCarReplace.Parser, new[]{ "CarId", "Inven", "SaleEventAuthKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CVisitFriend), global::Network.Packet.CVisitFriend.Parser, new[]{ "Id", "StoreKey", "IsNotFriendEachOther", "Imitate", "LastModifiedTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CVisitAction), global::Network.Packet.CVisitAction.Parser, new[]{ "FriendId", "ActionType", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CVisitResponse), global::Network.Packet.CVisitResponse.Parser, new[]{ "Oid", "Fid", "Type", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CVisitReviveAll), global::Network.Packet.CVisitReviveAll.Parser, new[]{ "Fid", "Oids", "PfMsgBlocked" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CResponseReviveAll), global::Network.Packet.CResponseReviveAll.Parser, new[]{ "Fids", "Oids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSpecialRequestForTutorial), global::Network.Packet.CSpecialRequestForTutorial.Parser, new[]{ "Request", "StoreKey", "Oids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CNpcReaction), global::Network.Packet.CNpcReaction.Parser, new[]{ "Type", "Floor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CToutingResult), global::Network.Packet.CToutingResult.Parser, new[]{ "Success", "PatronId", "IsFinished" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronToutingResult), global::Network.Packet.CPatronToutingResult.Parser, new[]{ "Success", "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronEventToutingResult), global::Network.Packet.CPatronEventToutingResult.Parser, new[]{ "ItemType", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCleanChair), global::Network.Packet.CCleanChair.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CFreeGiftSend), global::Network.Packet.CFreeGiftSend.Parser, new[]{ "GiftId", "FriendId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CFreeGiftResponse), global::Network.Packet.CFreeGiftResponse.Parser, new[]{ "Accept", "FreindId", "GiftId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CNPCGiftSend), global::Network.Packet.CNPCGiftSend.Parser, new[]{ "EventId", "NpcId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CIncDailyLimit), global::Network.Packet.CIncDailyLimit.Parser, new[]{ "LimitId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CIncWeeklyLimit), global::Network.Packet.CIncWeeklyLimit.Parser, new[]{ "LimitId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTryExpire), global::Network.Packet.CTryExpire.Parser, new[]{ "Id", "Type", "StoreKey", "ChangeItemElem" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetDailyReward), global::Network.Packet.CGetDailyReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSellSideDishStart), global::Network.Packet.CSellSideDishStart.Parser, new[]{ "Oid", "SideDishId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSideDishSell), global::Network.Packet.CSideDishSell.Parser, new[]{ "ObjInfo", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSellSideDishFin), global::Network.Packet.CSellSideDishFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSellSideDishShorten), global::Network.Packet.CSellSideDishShorten.Parser, new[]{ "Oid", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyCashBean), global::Network.Packet.CBuyCashBean.Parser, new[]{ "Id", "Count", "Bean", "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyCashRoastTicket), global::Network.Packet.CBuyCashRoastTicket.Parser, new[]{ "Id", "Count", "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyBackground), global::Network.Packet.CBuyBackground.Parser, new[]{ "Id", "Type", "StoreKey", "Price", "CherryShop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChangeBackground), global::Network.Packet.CChangeBackground.Parser, new[]{ "Reset", "Id", "Type", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChangeSecondFloorBackground), global::Network.Packet.CChangeSecondFloorBackground.Parser, new[]{ "StoreKey", "BgId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUnlockBean), global::Network.Packet.CUnlockBean.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUnlockCoffee), global::Network.Packet.CUnlockCoffee.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUnlockSideDish), global::Network.Packet.CUnlockSideDish.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpandAtOnce), global::Network.Packet.CExpandAtOnce.Parser, new[]{ "Id", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.SGiftBoxLoaded), global::Network.Packet.SGiftBoxLoaded.Parser, new[]{ "Json" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGiftReceive), global::Network.Packet.CGiftReceive.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CReloadGiftBox), global::Network.Packet.CReloadGiftBox.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGiftReceiveMultiple), global::Network.Packet.CGiftReceiveMultiple.Parser, new[]{ "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CWriteLog), global::Network.Packet.CWriteLog.Parser, new[]{ "LogMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUseCoupon), global::Network.Packet.CUseCoupon.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.SUseCouponResult), global::Network.Packet.SUseCouponResult.Parser, new[]{ "Success", "FailResult" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CLovelyGiftSend), global::Network.Packet.CLovelyGiftSend.Parser, new[]{ "GiftId", "FriendId", "Count", "SenderName", "Message", "EventType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMakeSideDishStart), global::Network.Packet.CMakeSideDishStart.Parser, new[]{ "Oid", "DescId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMakeSideDishFin), global::Network.Packet.CMakeSideDishFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMakeSideDishShorten), global::Network.Packet.CMakeSideDishShorten.Parser, new[]{ "Oid", "LeftSec", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMakeSideDishRevive), global::Network.Packet.CMakeSideDishRevive.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMakeFortuneCookieStart), global::Network.Packet.CMakeFortuneCookieStart.Parser, new[]{ "Oid", "DescId", "StoreKey", "PaymentType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMakeFortuneCookieFin), global::Network.Packet.CMakeFortuneCookieFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronToutInstantCompletion), global::Network.Packet.CPatronToutInstantCompletion.Parser, new[]{ "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronToutInstantCall), global::Network.Packet.CPatronToutInstantCall.Parser, new[]{ "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTalkPatron), global::Network.Packet.CTalkPatron.Parser, new[]{ "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSpecialTalkPatronResult), global::Network.Packet.CSpecialTalkPatronResult.Parser, new[]{ "PatronId", "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRefreshDataAfterLevelUp), global::Network.Packet.CRefreshDataAfterLevelUp.Parser, new[]{ "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetRecycleTip), global::Network.Packet.CGetRecycleTip.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CResponseAllQuestAndExpansion), global::Network.Packet.CResponseAllQuestAndExpansion.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetTranxId), global::Network.Packet.CGetTranxId.Parser, new[]{ "DescId", "Market", "BonusRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInAppPurchaseResult), global::Network.Packet.CInAppPurchaseResult.Parser, new[]{ "Market", "Arg0", "Arg1", "BillingVersion", "PackageName", "BonusRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetDanalServerInfo), global::Network.Packet.CGetDanalServerInfo.Parser, new[]{ "DescId", "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDanalResendOTP), global::Network.Packet.CDanalResendOTP.Parser, new[]{ "ServerInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDanalSimBill), global::Network.Packet.CDanalSimBill.Parser, new[]{ "ServerInfo", "Otp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDanalReBillWP), global::Network.Packet.CDanalReBillWP.Parser, new[]{ "DescId", "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDanalDelAuthKey), global::Network.Packet.CDanalDelAuthKey.Parser, new[]{ "AuthKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CForceInAppPurchaseResult), global::Network.Packet.CForceInAppPurchaseResult.Parser, new[]{ "TxId", "ItemId", "Arg0", "OnlyCheckReceipt", "BonusRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.SPurchaseConfirmed), global::Network.Packet.SPurchaseConfirmed.Parser, new[]{ "TransactionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.SDanalResultReceived), global::Network.Packet.SDanalResultReceived.Parser, new[]{ "Json" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetFriendInfo), global::Network.Packet.CGetFriendInfo.Parser, new[]{ "FriendId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInviteSMS), global::Network.Packet.CInviteSMS.Parser, new[]{ "PhoneNo", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInviteFriend), global::Network.Packet.CInviteFriend.Parser, new[]{ "FriendId", "PhoneNo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInviteDormant), global::Network.Packet.CInviteDormant.Parser, new[]{ "FriendId", "PfMsgBlocked" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInviteComeBack), global::Network.Packet.CInviteComeBack.Parser, new[]{ "FriendId", "PfMsgBlocked" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInviteComeBackCompleteCount), global::Network.Packet.CInviteComeBackCompleteCount.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetAllWritings), global::Network.Packet.CGetAllWritings.Parser, new[]{ "LastRefresh" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPushWriting), global::Network.Packet.CPushWriting.Parser, new[]{ "GuestBookId", "MyId", "Message", "IsSecret", "LastRefresh", "Lv" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPushComment), global::Network.Packet.CPushComment.Parser, new[]{ "WriterId", "Timestamp", "Comment", "LastRefresh" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGuestBookSetTitle), global::Network.Packet.CGuestBookSetTitle.Parser, new[]{ "Title", "LastRefresh" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGuestBookSetAllSecret), global::Network.Packet.CGuestBookSetAllSecret.Parser, new[]{ "AllSecret" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRemoveWriting), global::Network.Packet.CRemoveWriting.Parser, new[]{ "GuestBookId", "WriterId", "Timestamp", "LastRefresh" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRemoveComment), global::Network.Packet.CRemoveComment.Parser, new[]{ "WriterId", "Timestamp", "LastRefresh" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CModifyWriting), global::Network.Packet.CModifyWriting.Parser, new[]{ "GuestBookId", "WriterId", "Timestamp", "Writing", "LastRefresh" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CModifyComment), global::Network.Packet.CModifyComment.Parser, new[]{ "WriterId", "Timestamp", "Comment", "LastRefresh" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CJoinedGame), global::Network.Packet.CJoinedGame.Parser, new[]{ "PhoneNo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUnregisterGame), global::Network.Packet.CUnregisterGame.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetCashInfo), global::Network.Packet.CGetCashInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMigrateGuestToKakao), global::Network.Packet.CMigrateGuestToKakao.Parser, new[]{ "Uid", "Email", "Nickname" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInducedAction), global::Network.Packet.CInducedAction.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRetryTout), global::Network.Packet.CRetryTout.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInviteKakaoEvent), global::Network.Packet.CInviteKakaoEvent.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjDecoUp), global::Network.Packet.CObjDecoUp.Parser, new[]{ "Oid", "Method", "IsInvalid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyAll), global::Network.Packet.CBuyAll.Parser, new[]{ "BuyList", "IgnoreList", "MoveList", "IsImitateTiles", "Cash", "Cost", "InvalidDeco", "StoreKey", "Floor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRevertDesign), global::Network.Packet.CRevertDesign.Parser, new[]{ "BuyList", "IgnoreList", "MoveList", "IsImitateTiles", "Cash", "Cost", "InvalidDeco", "StoreKey", "Floor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCashTreeHarvest), global::Network.Packet.CCashTreeHarvest.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRoastTicketHarvest), global::Network.Packet.CRoastTicketHarvest.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCashTreePushEnable), global::Network.Packet.CCashTreePushEnable.Parser, new[]{ "Enable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryTreeHelp), global::Network.Packet.CCherryTreeHelp.Parser, new[]{ "Oid", "Uid", "Fid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryTreeHelpList), global::Network.Packet.CCherryTreeHelpList.Parser, new[]{ "Uid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryTreeHarvest), global::Network.Packet.CCherryTreeHarvest.Parser, new[]{ "ActionType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryTreeInitHelp), global::Network.Packet.CCherryTreeInitHelp.Parser, new[]{ "Uid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExistCherryTreeInven), global::Network.Packet.CExistCherryTreeInven.Parser, new[]{ "Fid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPurchaseGold), global::Network.Packet.CPurchaseGold.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAutoCoffeeMachineStart), global::Network.Packet.CAutoCoffeeMachineStart.Parser, new[]{ "Oid", "StoreKey", "DescId", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAutoCoffeeMachineFin), global::Network.Packet.CAutoCoffeeMachineFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAutoCoffeeMachineShorten), global::Network.Packet.CAutoCoffeeMachineShorten.Parser, new[]{ "Oid", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffeeFinAuto), global::Network.Packet.CCoffeeFinAuto.Parser, new[]{ "Oid", "StoreKey", "Fids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CConfirmExpiredSaleEvent), global::Network.Packet.CConfirmExpiredSaleEvent.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSendClover), global::Network.Packet.CSendClover.Parser, new[]{ "Uid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetCloverReward), global::Network.Packet.CGetCloverReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyPointItem), global::Network.Packet.CBuyPointItem.Parser, new[]{ "ShopId", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyShopPoint), global::Network.Packet.CBuyShopPoint.Parser, new[]{ "ShopId", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CConfirmRefreshChargeEvent), global::Network.Packet.CConfirmRefreshChargeEvent.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChangeRandomFriendConfig), global::Network.Packet.CChangeRandomFriendConfig.Parser, new[]{ "UseRandomFriend" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChangeRandomFriendName), global::Network.Packet.CChangeRandomFriendName.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CHideRandomFriendFollower), global::Network.Packet.CHideRandomFriendFollower.Parser, new[]{ "Fid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRemoveHideFollower), global::Network.Packet.CRemoveHideFollower.Parser, new[]{ "Uid", "RemoveList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetHideRandomFriendFollower), global::Network.Packet.CGetHideRandomFriendFollower.Parser, new[]{ "Fid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyLuckyBox), global::Network.Packet.CBuyLuckyBox.Parser, new[]{ "Id", "Count", "IsCost2", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.COpenLuckyBox), global::Network.Packet.COpenLuckyBox.Parser, new[]{ "Id", "MagCouponId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyPackageBox), global::Network.Packet.CBuyPackageBox.Parser, new[]{ "Id", "Cash", "ItemIds", "ItemCounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.COpenPackageBox), global::Network.Packet.COpenPackageBox.Parser, new[]{ "Id", "ItemIds", "ItemCounts", "Expire" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyItemCoupon), global::Network.Packet.CBuyItemCoupon.Parser, new[]{ "Id", "Count", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUseItemCoupon), global::Network.Packet.CUseItemCoupon.Parser, new[]{ "CouponId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyNPCGift), global::Network.Packet.CBuyNPCGift.Parser, new[]{ "EventId", "ItemCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSubmitSurvey), global::Network.Packet.CSubmitSurvey.Parser, new[]{ "Id", "Answer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSubmitSurveyTest), global::Network.Packet.CSubmitSurveyTest.Parser, new[]{ "Id", "FinalSubmit", "Answer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CResetSurveyTest), global::Network.Packet.CResetSurveyTest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSendEventGift), global::Network.Packet.CSendEventGift.Parser, new[]{ "EventName", "Fids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.SEventUpdated), global::Network.Packet.SEventUpdated.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CReduceEvent), global::Network.Packet.CReduceEvent.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStampEvent), global::Network.Packet.CStampEvent.Parser, new[]{ "EventId", "GoalId", "Contribution", "Tip", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStampEventClaimReward), global::Network.Packet.CStampEventClaimReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStampEventCashStamp), global::Network.Packet.CStampEventCashStamp.Parser, new[]{ "EventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInviteKakaoEventSend), global::Network.Packet.CInviteKakaoEventSend.Parser, new[]{ "EventId", "MyKey", "FriendIds", "FriendKeys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInviteKakaoEventThanks), global::Network.Packet.CInviteKakaoEventThanks.Parser, new[]{ "EventId", "MyKey", "FriendKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CReportFriendsCount), global::Network.Packet.CReportFriendsCount.Parser, new[]{ "Fr", "AFr", "Rf", "ARf" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChangeItemColor), global::Network.Packet.CChangeItemColor.Parser, new[]{ "StoreItem", "InvenItem" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDevCommand), global::Network.Packet.CDevCommand.Parser, new[]{ "Cmd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.SPopupMessage), global::Network.Packet.SPopupMessage.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUpdateSleepSettings), global::Network.Packet.CUpdateSleepSettings.Parser, new[]{ "SleepSettings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.COpenSpecialBox), global::Network.Packet.COpenSpecialBox.Parser, new[]{ "BoxId", "ItemId", "Expire" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChangeCafeTitle), global::Network.Packet.CChangeCafeTitle.Parser, new[]{ "Title" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChangeFirstVisitStore), global::Network.Packet.CChangeFirstVisitStore.Parser, new[]{ "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CHarvestAllWorkObj), global::Network.Packet.CHarvestAllWorkObj.Parser, new[]{ "StoreKey", "WorkFloor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CInvenObjChangeColor), global::Network.Packet.CInvenObjChangeColor.Parser, new[]{ "DestItemId", "NewItemId", "UseCoupon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjChangeColor), global::Network.Packet.CObjChangeColor.Parser, new[]{ "Oid", "DestItemId", "X", "Y", "Floor", "Flip", "StoreKey", "UseCoupon", "InvalidDeco" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCarChangeColor), global::Network.Packet.CCarChangeColor.Parser, new[]{ "CarId", "UseCoupon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjExtensionPeriod), global::Network.Packet.CObjExtensionPeriod.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMixItem), global::Network.Packet.CMixItem.Parser, new[]{ "Oid", "InvenElems", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMixItemFin), global::Network.Packet.CMixItemFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CMixItemShorten), global::Network.Packet.CMixItemShorten.Parser, new[]{ "Oid", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CIsItemMixerWorking), global::Network.Packet.CIsItemMixerWorking.Parser, new[]{ "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CIncBeanLevel), global::Network.Packet.CIncBeanLevel.Parser, new[]{ "BeanId", "Cash", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CObjBuyTwoPlusOne), global::Network.Packet.CObjBuyTwoPlusOne.Parser, new[]{ "Kind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpandSecondFloor), global::Network.Packet.CExpandSecondFloor.Parser, new[]{ "StoreKey", "ExpandId", "UseCash", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpandThirdStore), global::Network.Packet.CExpandThirdStore.Parser, new[]{ "UseCash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpandThirdStoreInstant), global::Network.Packet.CExpandThirdStoreInstant.Parser, new[]{ "Cash", "LeftSec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpandThirdStoreComplete), global::Network.Packet.CExpandThirdStoreComplete.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRestartThirdStore), global::Network.Packet.CRestartThirdStore.Parser, new[]{ "Casher", "Pickup", "Recycle", "NecessaryShop1", "NecessaryShop2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRestartThirdStoreExpansion), global::Network.Packet.CRestartThirdStoreExpansion.Parser, new[]{ "NecessaryShop1", "NecessaryShop2", "Oid", "Recycle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThirdStoreRecvExpandReward), global::Network.Packet.CThirdStoreRecvExpandReward.Parser, new[]{ "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThirdStoreRecalcExpandReward), global::Network.Packet.CThirdStoreRecalcExpandReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThirdStoreRecvRareReward), global::Network.Packet.CThirdStoreRecvRareReward.Parser, new[]{ "ItemId", "ItemCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGrantNewDailyQuest), global::Network.Packet.CGrantNewDailyQuest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDailyQuestProgress), global::Network.Packet.CDailyQuestProgress.Parser, new[]{ "QuestId", "Goal", "State", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDailyQuestFinish), global::Network.Packet.CDailyQuestFinish.Parser, new[]{ "QuestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDailyQuestInstantCompletion), global::Network.Packet.CDailyQuestInstantCompletion.Parser, new[]{ "QuestId", "Goal", "Cash", "CurrentState", "IsEventCashAmount", "PetOid", "PetSkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDailyQuestGetData), global::Network.Packet.CDailyQuestGetData.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetAchievementReward), global::Network.Packet.CGetAchievementReward.Parser, new[]{ "AchievementId", "GoalId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CProceedAchievement), global::Network.Packet.CProceedAchievement.Parser, new[]{ "AchievementId", "Key", "Count", "IsSet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CHotDealBuy), global::Network.Packet.CHotDealBuy.Parser, new[]{ "ItemId", "IsSpecialItem" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CHotDealPoll), global::Network.Packet.CHotDealPoll.Parser, new[]{ "EventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetChargeObject), global::Network.Packet.CGetChargeObject.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPointMissionFinish), global::Network.Packet.CPointMissionFinish.Parser, new[]{ "QuestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPointMissionInstantCompletion), global::Network.Packet.CPointMissionInstantCompletion.Parser, new[]{ "QuestId", "Goal", "Cash", "Cv" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGrantNewPointMission), global::Network.Packet.CGrantNewPointMission.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPointMissionGetPresent), global::Network.Packet.CPointMissionGetPresent.Parser, new[]{ "Point" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBingoMissionFinish), global::Network.Packet.CBingoMissionFinish.Parser, new[]{ "QuestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBingoMissionInstantCompletion), global::Network.Packet.CBingoMissionInstantCompletion.Parser, new[]{ "QuestId", "Goal", "Cash", "Cv" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGrantNewBingoMission), global::Network.Packet.CGrantNewBingoMission.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBingoMissionGetPresent), global::Network.Packet.CBingoMissionGetPresent.Parser, new[]{ "Point" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBingoMissionGetNumber), global::Network.Packet.CBingoMissionGetNumber.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBingoMissionQuestReset), global::Network.Packet.CBingoMissionQuestReset.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CStoreBeanBox), global::Network.Packet.CStoreBeanBox.Parser, new[]{ "InvenElem", "StoreKey", "FromInven", "Oid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUpgradeBeanDepot), global::Network.Packet.CUpgradeBeanDepot.Parser, new[]{ "Id", "UseGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceReset), global::Network.Packet.CEventDiceReset.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceFinish), global::Network.Packet.CEventDiceFinish.Parser, new[]{ "QuestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceUseDice), global::Network.Packet.CEventDiceUseDice.Parser, new[]{ "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceBuyDice), global::Network.Packet.CEventDiceBuyDice.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceForceMoveStartPoint), global::Network.Packet.CEventDiceForceMoveStartPoint.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceForceMoveByGoldCard), global::Network.Packet.CEventDiceForceMoveByGoldCard.Parser, new[]{ "Foward", "Dist" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceSendGift), global::Network.Packet.CEventDiceSendGift.Parser, new[]{ "Fids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceRecvGift), global::Network.Packet.CEventDiceRecvGift.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceResetGift), global::Network.Packet.CEventDiceResetGift.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventDiceFirstVisit), global::Network.Packet.CEventDiceFirstVisit.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CComeBackSendGift), global::Network.Packet.CComeBackSendGift.Parser, new[]{ "Fids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CComeBackRecvGift), global::Network.Packet.CComeBackRecvGift.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CEventGomCheckReward), global::Network.Packet.CEventGomCheckReward.Parser, new[]{ "StageId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTarotQuestion), global::Network.Packet.CTarotQuestion.Parser, new[]{ "Genre", "Main", "Sub", "Category", "QuestionIndex", "QuestionContent", "UseTicket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTarotReward), global::Network.Packet.CTarotReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CApplyTarotSkill), global::Network.Packet.CApplyTarotSkill.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CTarotBuyTicket), global::Network.Packet.CTarotBuyTicket.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThirdStoreGetAdditFavor), global::Network.Packet.CThirdStoreGetAdditFavor.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThirdStoreHostDailyReward), global::Network.Packet.CThirdStoreHostDailyReward.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThirdStoreCompleteFavor), global::Network.Packet.CThirdStoreCompleteFavor.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThirdStoreInstantFillSalePoint), global::Network.Packet.CThirdStoreInstantFillSalePoint.Parser, new[]{ "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThirdStoreInstantFillFavor), global::Network.Packet.CThirdStoreInstantFillFavor.Parser, new[]{ "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAddFavoriteFriend), global::Network.Packet.CAddFavoriteFriend.Parser, new[]{ "FrIds", "LocalData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRemoveFavoriteFriend), global::Network.Packet.CRemoveFavoriteFriend.Parser, new[]{ "FrId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronMachineCall), global::Network.Packet.CPatronMachineCall.Parser, new[]{ "Oid", "ItemId", "PatronId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPatronMachineFin), global::Network.Packet.CPatronMachineFin.Parser, new[]{ "Oid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CChargeCollection), global::Network.Packet.CChargeCollection.Parser, new[]{ "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CReceiveChargeObj), global::Network.Packet.CReceiveChargeObj.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CReceiveCollectionGift), global::Network.Packet.CReceiveCollectionGift.Parser, new[]{ "Id", "Order", "CollectionType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CReceiveLevelUpReward), global::Network.Packet.CReceiveLevelUpReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.COpenPointBox), global::Network.Packet.COpenPointBox.Parser, new[]{ "EventId", "BoxNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyBoxPoint), global::Network.Packet.CBuyBoxPoint.Parser, new[]{ "EventId", "Point" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CDevTimeSet), global::Network.Packet.CDevTimeSet.Parser, new[]{ "SetTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CXpReward), global::Network.Packet.CXpReward.Parser, new[]{ "IsLevelUp", "Exp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetOnTimeBoxPoint), global::Network.Packet.CGetOnTimeBoxPoint.Parser, new[]{ "EventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetAwake), global::Network.Packet.CPetAwake.Parser, new[]{ "Oid", "Awake", "CushionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetTreat), global::Network.Packet.CPetTreat.Parser, new[]{ "Oid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetCare), global::Network.Packet.CPetCare.Parser, new[]{ "Oid", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetWithPlaying), global::Network.Packet.CPetWithPlaying.Parser, new[]{ "Oid", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetStatusUpdate), global::Network.Packet.CPetStatusUpdate.Parser, new[]{ "Oid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetPutStatusUpdate), global::Network.Packet.CPetPutStatusUpdate.Parser, new[]{ "Oid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetUserAction), global::Network.Packet.CPetUserAction.Parser, new[]{ "Oid", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetEatSnack), global::Network.Packet.CPetEatSnack.Parser, new[]{ "Oid", "PetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetRevertBeforeHp), global::Network.Packet.CPetRevertBeforeHp.Parser, new[]{ "PetId", "Oid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetReNaming), global::Network.Packet.CPetReNaming.Parser, new[]{ "Oid", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyPetItem), global::Network.Packet.CBuyPetItem.Parser, new[]{ "Id", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CFillPetFeed), global::Network.Packet.CFillPetFeed.Parser, new[]{ "FeedId", "FeedCount", "StoreKey", "BowlOid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CClearPetFeed), global::Network.Packet.CClearPetFeed.Parser, new[]{ "StoreKey", "BowlOid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetEatFeed), global::Network.Packet.CPetEatFeed.Parser, new[]{ "StoreKey", "BowlOid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetPlayWithObj), global::Network.Packet.CPetPlayWithObj.Parser, new[]{ "StoreKey", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetDressUp), global::Network.Packet.CPetDressUp.Parser, new[]{ "Oid", "Parts", "FromInvens", "IsWearing", "StoreKey", "Cost", "Cash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetAdopt), global::Network.Packet.CPetAdopt.Parser, new[]{ "Kind", "Name", "Gender" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetPut), global::Network.Packet.CPetPut.Parser, new[]{ "Oid", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetCure), global::Network.Packet.CPetCure.Parser, new[]{ "Oid", "Price", "IsUseCash", "IsImmediatelyCure" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetTake), global::Network.Packet.CPetTake.Parser, new[]{ "Oid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetPutSizeExpand), global::Network.Packet.CPetPutSizeExpand.Parser, new[]{ "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetChange), global::Network.Packet.CPetChange.Parser, new[]{ "Time", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetLearnSecondSkill), global::Network.Packet.CPetLearnSecondSkill.Parser, new[]{ "Oid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetSkillChange), global::Network.Packet.CPetSkillChange.Parser, new[]{ "Oid", "SlotIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetUseSkill), global::Network.Packet.CPetUseSkill.Parser, new[]{ "StoreKey", "Oid", "SkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetUseSkillGetResource), global::Network.Packet.CPetUseSkillGetResource.Parser, new[]{ "Oid", "SkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CPetUseSkillToutHint), global::Network.Packet.CPetUseSkillToutHint.Parser, new[]{ "Oid", "SkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUseCherryRoulette), global::Network.Packet.CUseCherryRoulette.Parser, new[]{ "UseFree", "Forced" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyRouletteBean), global::Network.Packet.CBuyRouletteBean.Parser, new[]{ "BuffIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSetCalendarGMT), global::Network.Packet.CSetCalendarGMT.Parser, new[]{ "GMT" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CUseJukebox), global::Network.Packet.CUseJukebox.Parser, new[]{ "StoreKey", "Use" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CRefreshDaisoItem), global::Network.Packet.CRefreshDaisoItem.Parser, new[]{ "Instant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyDaisoItem), global::Network.Packet.CBuyDaisoItem.Parser, new[]{ "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CBuyOpenLuckyBox), global::Network.Packet.CBuyOpenLuckyBox.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryRoasting), global::Network.Packet.CCherryRoasting.Parser, new[]{ "Oid", "DescId", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryRoastFin), global::Network.Packet.CCherryRoastFin.Parser, new[]{ "Oid", "OneClick", "TrashBean", "StoreKey", "DescId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryRoastRevive), global::Network.Packet.CCherryRoastRevive.Parser, new[]{ "Oid", "StoreKey", "DescId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryRoastShorten), global::Network.Packet.CCherryRoastShorten.Parser, new[]{ "Oid", "LeftSec", "Cash", "StoreKey", "DescId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThemaCollectionListPointGet), global::Network.Packet.CThemaCollectionListPointGet.Parser, new[]{ "Order", "CollectionId", "CollectionType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThemaCollectionRewardGet), global::Network.Packet.CThemaCollectionRewardGet.Parser, new[]{ "RewardIdList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CThemaCollectionQuestCheck), global::Network.Packet.CThemaCollectionQuestCheck.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCherryRoastCancel), global::Network.Packet.CCherryRoastCancel.Parser, new[]{ "Oid", "StoreKey", "DescId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSpecialOrderClear), global::Network.Packet.CSpecialOrderClear.Parser, new[]{ "Idx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSpeicalOrderCancel), global::Network.Packet.CSpeicalOrderCancel.Parser, new[]{ "Idx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSpecialOrderRenew), global::Network.Packet.CSpecialOrderRenew.Parser, new[]{ "Idx", "NeedCash", "RemainTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCashUseCashCheck), global::Network.Packet.CCashUseCashCheck.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCashUseRewardGet), global::Network.Packet.CCashUseRewardGet.Parser, new[]{ "RowId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CSpecialPackage), global::Network.Packet.CSpecialPackage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CLvUpShopBuy), global::Network.Packet.CLvUpShopBuy.Parser, new[]{ "ShopKey", "Idx", "StoreKey", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CLvUpShopPurchaseItemBuyCheck), global::Network.Packet.CLvUpShopPurchaseItemBuyCheck.Parser, new[]{ "ShopKey", "Idx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CExpandTopFloor), global::Network.Packet.CExpandTopFloor.Parser, new[]{ "StoreKey", "ExpandId", "UseCash", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CNewBingoMissionGet), global::Network.Packet.CNewBingoMissionGet.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CNewPointMissionGet), global::Network.Packet.CNewPointMissionGet.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CNewPointBoxGet), global::Network.Packet.CNewPointBoxGet.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CNewGodOfManagerGet), global::Network.Packet.CNewGodOfManagerGet.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.COpenNewCoffeTruck), global::Network.Packet.COpenNewCoffeTruck.Parser, new[]{ "Id", "UseCash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffeeTruckGameFinish), global::Network.Packet.CCoffeeTruckGameFinish.Parser, new[]{ "VisitingId", "BlockTable", "TriggerTable", "ComboTable", "Fever", "Score", "CustomOrderPatron", "CustomOrder" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.GetCoffeeTruckGift), global::Network.Packet.GetCoffeeTruckGift.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.BuyCoffeeTruckShopItem), global::Network.Packet.BuyCoffeeTruckShopItem.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.ChangeCftCustomerItem), global::Network.Packet.ChangeCftCustomerItem.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffeeTruckSpecialOrderManager), global::Network.Packet.CCoffeeTruckSpecialOrderManager.Parser, new[]{ "IsTimeCheck" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffeeTruckSpecialOrderFinish), global::Network.Packet.CCoffeeTruckSpecialOrderFinish.Parser, new[]{ "Idx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffeeTruckSpecialOrderRenew), global::Network.Packet.CCoffeeTruckSpecialOrderRenew.Parser, new[]{ "Idx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CCoffeeTruckGameStart), global::Network.Packet.CCoffeeTruckGameStart.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CGetCoffeeTruckRanking), global::Network.Packet.CGetCoffeeTruckRanking.Parser, new[]{ "UidList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.COpenLuckyBoxes), global::Network.Packet.COpenLuckyBoxes.Parser, new[]{ "Id", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAutoTicketRoastingMachineStart), global::Network.Packet.CAutoTicketRoastingMachineStart.Parser, new[]{ "Oid", "StoreKey", "DescId", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAutoTicketRoastingMachineFin), global::Network.Packet.CAutoTicketRoastingMachineFin.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAutoTicketRoastingMachineShorten), global::Network.Packet.CAutoTicketRoastingMachineShorten.Parser, new[]{ "Oid", "Cash", "StoreKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Network.Packet.CAutoTicketRoastingMachineRevive), global::Network.Packet.CAutoTicketRoastingMachineRevive.Parser, new[]{ "Oid", "StoreKey" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SResponse : pb::IMessage<SResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SResponse> _parser = new pb::MessageParser<SResponse>(() => new SResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SResponse(SResponse other) : this() {
      _hasBits0 = other._hasBits0;
      packetId_ = other.packetId_;
      json_ = other.json_;
      dataBytes_ = other.dataBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SResponse Clone() {
      return new SResponse(this);
    }

    /// <summary>Field number for the "packetId" field.</summary>
    public const int PacketIdFieldNumber = 1;
    private readonly static int PacketIdDefaultValue = 0;

    private int packetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketId {
      get { if ((_hasBits0 & 1) != 0) { return packetId_; } else { return PacketIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        packetId_ = value;
      }
    }
    /// <summary>Gets whether the "packetId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPacketId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "packetId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPacketId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 2;
    private readonly static string JsonDefaultValue = "";

    private string json_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Json {
      get { return json_ ?? JsonDefaultValue; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "json" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJson {
      get { return json_ != null; }
    }
    /// <summary>Clears the value of the "json" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJson() {
      json_ = null;
    }

    /// <summary>Field number for the "dataBytes" field.</summary>
    public const int DataBytesFieldNumber = 3;
    private readonly static pb::ByteString DataBytesDefaultValue = pb::ByteString.Empty;

    private pb::ByteString dataBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataBytes {
      get { return dataBytes_ ?? DataBytesDefaultValue; }
      set {
        dataBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dataBytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDataBytes {
      get { return dataBytes_ != null; }
    }
    /// <summary>Clears the value of the "dataBytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataBytes() {
      dataBytes_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacketId != other.PacketId) return false;
      if (Json != other.Json) return false;
      if (DataBytes != other.DataBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPacketId) hash ^= PacketId.GetHashCode();
      if (HasJson) hash ^= Json.GetHashCode();
      if (HasDataBytes) hash ^= DataBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPacketId) {
        output.WriteRawTag(8);
        output.WriteInt32(PacketId);
      }
      if (HasJson) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
      if (HasDataBytes) {
        output.WriteRawTag(26);
        output.WriteBytes(DataBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPacketId) {
        output.WriteRawTag(8);
        output.WriteInt32(PacketId);
      }
      if (HasJson) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
      if (HasDataBytes) {
        output.WriteRawTag(26);
        output.WriteBytes(DataBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPacketId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketId);
      }
      if (HasJson) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (HasDataBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataBytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasPacketId) {
        PacketId = other.PacketId;
      }
      if (other.HasJson) {
        Json = other.Json;
      }
      if (other.HasDataBytes) {
        DataBytes = other.DataBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PacketId = input.ReadInt32();
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
          case 26: {
            DataBytes = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PacketId = input.ReadInt32();
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
          case 26: {
            DataBytes = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CError : pb::IMessage<CError>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CError> _parser = new pb::MessageParser<CError>(() => new CError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CError(CError other) : this() {
      error_ = other.error_;
      trace_ = other.trace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CError Clone() {
      return new CError(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private readonly static string ErrorDefaultValue = "";

    private string error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_ ?? ErrorDefaultValue; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return error_ != null; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      error_ = null;
    }

    /// <summary>Field number for the "trace" field.</summary>
    public const int TraceFieldNumber = 2;
    private readonly static string TraceDefaultValue = "";

    private string trace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trace {
      get { return trace_ ?? TraceDefaultValue; }
      set {
        trace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "trace" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrace {
      get { return trace_ != null; }
    }
    /// <summary>Clears the value of the "trace" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrace() {
      trace_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (Trace != other.Trace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasError) hash ^= Error.GetHashCode();
      if (HasTrace) hash ^= Trace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasError) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (HasTrace) {
        output.WriteRawTag(18);
        output.WriteString(Trace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasError) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (HasTrace) {
        output.WriteRawTag(18);
        output.WriteString(Trace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (HasTrace) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CError other) {
      if (other == null) {
        return;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasTrace) {
        Trace = other.Trace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
          case 18: {
            Trace = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
          case 18: {
            Trace = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CKeepAlive : pb::IMessage<CKeepAlive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CKeepAlive> _parser = new pb::MessageParser<CKeepAlive>(() => new CKeepAlive());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CKeepAlive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CKeepAlive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CKeepAlive(CKeepAlive other) : this() {
      _hasBits0 = other._hasBits0;
      refreshSocialAct_ = other.refreshSocialAct_;
      refreshCashBalance_ = other.refreshCashBalance_;
      compensationId_ = other.compensationId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CKeepAlive Clone() {
      return new CKeepAlive(this);
    }

    /// <summary>Field number for the "refreshSocialAct" field.</summary>
    public const int RefreshSocialActFieldNumber = 1;
    private readonly static bool RefreshSocialActDefaultValue = false;

    private bool refreshSocialAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RefreshSocialAct {
      get { if ((_hasBits0 & 1) != 0) { return refreshSocialAct_; } else { return RefreshSocialActDefaultValue; } }
      set {
        _hasBits0 |= 1;
        refreshSocialAct_ = value;
      }
    }
    /// <summary>Gets whether the "refreshSocialAct" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRefreshSocialAct {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "refreshSocialAct" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRefreshSocialAct() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "refreshCashBalance" field.</summary>
    public const int RefreshCashBalanceFieldNumber = 2;
    private readonly static bool RefreshCashBalanceDefaultValue = false;

    private bool refreshCashBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RefreshCashBalance {
      get { if ((_hasBits0 & 2) != 0) { return refreshCashBalance_; } else { return RefreshCashBalanceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        refreshCashBalance_ = value;
      }
    }
    /// <summary>Gets whether the "refreshCashBalance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRefreshCashBalance {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "refreshCashBalance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRefreshCashBalance() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "compensationId" field.</summary>
    public const int CompensationIdFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_compensationId_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> compensationId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CompensationId {
      get { return compensationId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CKeepAlive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CKeepAlive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefreshSocialAct != other.RefreshSocialAct) return false;
      if (RefreshCashBalance != other.RefreshCashBalance) return false;
      if(!compensationId_.Equals(other.compensationId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRefreshSocialAct) hash ^= RefreshSocialAct.GetHashCode();
      if (HasRefreshCashBalance) hash ^= RefreshCashBalance.GetHashCode();
      hash ^= compensationId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRefreshSocialAct) {
        output.WriteRawTag(8);
        output.WriteBool(RefreshSocialAct);
      }
      if (HasRefreshCashBalance) {
        output.WriteRawTag(16);
        output.WriteBool(RefreshCashBalance);
      }
      compensationId_.WriteTo(output, _repeated_compensationId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRefreshSocialAct) {
        output.WriteRawTag(8);
        output.WriteBool(RefreshSocialAct);
      }
      if (HasRefreshCashBalance) {
        output.WriteRawTag(16);
        output.WriteBool(RefreshCashBalance);
      }
      compensationId_.WriteTo(ref output, _repeated_compensationId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRefreshSocialAct) {
        size += 1 + 1;
      }
      if (HasRefreshCashBalance) {
        size += 1 + 1;
      }
      size += compensationId_.CalculateSize(_repeated_compensationId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CKeepAlive other) {
      if (other == null) {
        return;
      }
      if (other.HasRefreshSocialAct) {
        RefreshSocialAct = other.RefreshSocialAct;
      }
      if (other.HasRefreshCashBalance) {
        RefreshCashBalance = other.RefreshCashBalance;
      }
      compensationId_.Add(other.compensationId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefreshSocialAct = input.ReadBool();
            break;
          }
          case 16: {
            RefreshCashBalance = input.ReadBool();
            break;
          }
          case 26: {
            compensationId_.AddEntriesFrom(input, _repeated_compensationId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RefreshSocialAct = input.ReadBool();
            break;
          }
          case 16: {
            RefreshCashBalance = input.ReadBool();
            break;
          }
          case 26: {
            compensationId_.AddEntriesFrom(ref input, _repeated_compensationId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CLoadData : pb::IMessage<CLoadData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLoadData> _parser = new pb::MessageParser<CLoadData>(() => new CLoadData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLoadData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLoadData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLoadData(CLoadData other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      friendId_ = other.friendId_.Clone();
      os_ = other.os_;
      deviceModel_ = other.deviceModel_;
      deviceId_ = other.deviceId_;
      phoneNum_ = other.phoneNum_;
      country_ = other.country_;
      glExtensions_ = other.glExtensions_.Clone();
      guest_ = other.guest_;
      localTime_ = other.localTime_;
      kakaoHashedKey_ = other.kakaoHashedKey_;
      mid_ = other.mid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLoadData Clone() {
      return new CLoadData(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_friendId_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> friendId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FriendId {
      get { return friendId_; }
    }

    /// <summary>Field number for the "os" field.</summary>
    public const int OsFieldNumber = 3;
    private readonly static string OsDefaultValue = "";

    private string os_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Os {
      get { return os_ ?? OsDefaultValue; }
      set {
        os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "os" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOs {
      get { return os_ != null; }
    }
    /// <summary>Clears the value of the "os" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOs() {
      os_ = null;
    }

    /// <summary>Field number for the "deviceModel" field.</summary>
    public const int DeviceModelFieldNumber = 4;
    private readonly static string DeviceModelDefaultValue = "";

    private string deviceModel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceModel {
      get { return deviceModel_ ?? DeviceModelDefaultValue; }
      set {
        deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deviceModel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeviceModel {
      get { return deviceModel_ != null; }
    }
    /// <summary>Clears the value of the "deviceModel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeviceModel() {
      deviceModel_ = null;
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 5;
    private readonly static string DeviceIdDefaultValue = "";

    private string deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_ ?? DeviceIdDefaultValue; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deviceId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeviceId {
      get { return deviceId_ != null; }
    }
    /// <summary>Clears the value of the "deviceId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeviceId() {
      deviceId_ = null;
    }

    /// <summary>Field number for the "phoneNum" field.</summary>
    public const int PhoneNumFieldNumber = 6;
    private readonly static string PhoneNumDefaultValue = "";

    private string phoneNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNum {
      get { return phoneNum_ ?? PhoneNumDefaultValue; }
      set {
        phoneNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phoneNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhoneNum {
      get { return phoneNum_ != null; }
    }
    /// <summary>Clears the value of the "phoneNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhoneNum() {
      phoneNum_ = null;
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 7;
    private readonly static string CountryDefaultValue = "";

    private string country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_ ?? CountryDefaultValue; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "country" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCountry {
      get { return country_ != null; }
    }
    /// <summary>Clears the value of the "country" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCountry() {
      country_ = null;
    }

    /// <summary>Field number for the "glExtensions" field.</summary>
    public const int GlExtensionsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_glExtensions_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> glExtensions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GlExtensions {
      get { return glExtensions_; }
    }

    /// <summary>Field number for the "guest" field.</summary>
    public const int GuestFieldNumber = 9;
    private readonly static bool GuestDefaultValue = false;

    private bool guest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Guest {
      get { if ((_hasBits0 & 2) != 0) { return guest_; } else { return GuestDefaultValue; } }
      set {
        _hasBits0 |= 2;
        guest_ = value;
      }
    }
    /// <summary>Gets whether the "guest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuest {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "guest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuest() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "localTime" field.</summary>
    public const int LocalTimeFieldNumber = 10;
    private readonly static int LocalTimeDefaultValue = 0;

    private int localTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalTime {
      get { if ((_hasBits0 & 4) != 0) { return localTime_; } else { return LocalTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        localTime_ = value;
      }
    }
    /// <summary>Gets whether the "localTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocalTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "localTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "kakaoHashedKey" field.</summary>
    public const int KakaoHashedKeyFieldNumber = 11;
    private readonly static string KakaoHashedKeyDefaultValue = "";

    private string kakaoHashedKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KakaoHashedKey {
      get { return kakaoHashedKey_ ?? KakaoHashedKeyDefaultValue; }
      set {
        kakaoHashedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kakaoHashedKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKakaoHashedKey {
      get { return kakaoHashedKey_ != null; }
    }
    /// <summary>Clears the value of the "kakaoHashedKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKakaoHashedKey() {
      kakaoHashedKey_ = null;
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 12;
    private readonly static string MidDefaultValue = "";

    private string mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mid {
      get { return mid_ ?? MidDefaultValue; }
      set {
        mid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMid {
      get { return mid_ != null; }
    }
    /// <summary>Clears the value of the "mid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMid() {
      mid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLoadData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLoadData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if(!friendId_.Equals(other.friendId_)) return false;
      if (Os != other.Os) return false;
      if (DeviceModel != other.DeviceModel) return false;
      if (DeviceId != other.DeviceId) return false;
      if (PhoneNum != other.PhoneNum) return false;
      if (Country != other.Country) return false;
      if(!glExtensions_.Equals(other.glExtensions_)) return false;
      if (Guest != other.Guest) return false;
      if (LocalTime != other.LocalTime) return false;
      if (KakaoHashedKey != other.KakaoHashedKey) return false;
      if (Mid != other.Mid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      hash ^= friendId_.GetHashCode();
      if (HasOs) hash ^= Os.GetHashCode();
      if (HasDeviceModel) hash ^= DeviceModel.GetHashCode();
      if (HasDeviceId) hash ^= DeviceId.GetHashCode();
      if (HasPhoneNum) hash ^= PhoneNum.GetHashCode();
      if (HasCountry) hash ^= Country.GetHashCode();
      hash ^= glExtensions_.GetHashCode();
      if (HasGuest) hash ^= Guest.GetHashCode();
      if (HasLocalTime) hash ^= LocalTime.GetHashCode();
      if (HasKakaoHashedKey) hash ^= KakaoHashedKey.GetHashCode();
      if (HasMid) hash ^= Mid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      friendId_.WriteTo(output, _repeated_friendId_codec);
      if (HasOs) {
        output.WriteRawTag(26);
        output.WriteString(Os);
      }
      if (HasDeviceModel) {
        output.WriteRawTag(34);
        output.WriteString(DeviceModel);
      }
      if (HasDeviceId) {
        output.WriteRawTag(42);
        output.WriteString(DeviceId);
      }
      if (HasPhoneNum) {
        output.WriteRawTag(50);
        output.WriteString(PhoneNum);
      }
      if (HasCountry) {
        output.WriteRawTag(58);
        output.WriteString(Country);
      }
      glExtensions_.WriteTo(output, _repeated_glExtensions_codec);
      if (HasGuest) {
        output.WriteRawTag(72);
        output.WriteBool(Guest);
      }
      if (HasLocalTime) {
        output.WriteRawTag(80);
        output.WriteInt32(LocalTime);
      }
      if (HasKakaoHashedKey) {
        output.WriteRawTag(90);
        output.WriteString(KakaoHashedKey);
      }
      if (HasMid) {
        output.WriteRawTag(98);
        output.WriteString(Mid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      friendId_.WriteTo(ref output, _repeated_friendId_codec);
      if (HasOs) {
        output.WriteRawTag(26);
        output.WriteString(Os);
      }
      if (HasDeviceModel) {
        output.WriteRawTag(34);
        output.WriteString(DeviceModel);
      }
      if (HasDeviceId) {
        output.WriteRawTag(42);
        output.WriteString(DeviceId);
      }
      if (HasPhoneNum) {
        output.WriteRawTag(50);
        output.WriteString(PhoneNum);
      }
      if (HasCountry) {
        output.WriteRawTag(58);
        output.WriteString(Country);
      }
      glExtensions_.WriteTo(ref output, _repeated_glExtensions_codec);
      if (HasGuest) {
        output.WriteRawTag(72);
        output.WriteBool(Guest);
      }
      if (HasLocalTime) {
        output.WriteRawTag(80);
        output.WriteInt32(LocalTime);
      }
      if (HasKakaoHashedKey) {
        output.WriteRawTag(90);
        output.WriteString(KakaoHashedKey);
      }
      if (HasMid) {
        output.WriteRawTag(98);
        output.WriteString(Mid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      size += friendId_.CalculateSize(_repeated_friendId_codec);
      if (HasOs) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Os);
      }
      if (HasDeviceModel) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
      }
      if (HasDeviceId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (HasPhoneNum) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNum);
      }
      if (HasCountry) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      size += glExtensions_.CalculateSize(_repeated_glExtensions_codec);
      if (HasGuest) {
        size += 1 + 1;
      }
      if (HasLocalTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalTime);
      }
      if (HasKakaoHashedKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KakaoHashedKey);
      }
      if (HasMid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLoadData other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      friendId_.Add(other.friendId_);
      if (other.HasOs) {
        Os = other.Os;
      }
      if (other.HasDeviceModel) {
        DeviceModel = other.DeviceModel;
      }
      if (other.HasDeviceId) {
        DeviceId = other.DeviceId;
      }
      if (other.HasPhoneNum) {
        PhoneNum = other.PhoneNum;
      }
      if (other.HasCountry) {
        Country = other.Country;
      }
      glExtensions_.Add(other.glExtensions_);
      if (other.HasGuest) {
        Guest = other.Guest;
      }
      if (other.HasLocalTime) {
        LocalTime = other.LocalTime;
      }
      if (other.HasKakaoHashedKey) {
        KakaoHashedKey = other.KakaoHashedKey;
      }
      if (other.HasMid) {
        Mid = other.Mid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            friendId_.AddEntriesFrom(input, _repeated_friendId_codec);
            break;
          }
          case 26: {
            Os = input.ReadString();
            break;
          }
          case 34: {
            DeviceModel = input.ReadString();
            break;
          }
          case 42: {
            DeviceId = input.ReadString();
            break;
          }
          case 50: {
            PhoneNum = input.ReadString();
            break;
          }
          case 58: {
            Country = input.ReadString();
            break;
          }
          case 66: {
            glExtensions_.AddEntriesFrom(input, _repeated_glExtensions_codec);
            break;
          }
          case 72: {
            Guest = input.ReadBool();
            break;
          }
          case 80: {
            LocalTime = input.ReadInt32();
            break;
          }
          case 90: {
            KakaoHashedKey = input.ReadString();
            break;
          }
          case 98: {
            Mid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            friendId_.AddEntriesFrom(ref input, _repeated_friendId_codec);
            break;
          }
          case 26: {
            Os = input.ReadString();
            break;
          }
          case 34: {
            DeviceModel = input.ReadString();
            break;
          }
          case 42: {
            DeviceId = input.ReadString();
            break;
          }
          case 50: {
            PhoneNum = input.ReadString();
            break;
          }
          case 58: {
            Country = input.ReadString();
            break;
          }
          case 66: {
            glExtensions_.AddEntriesFrom(ref input, _repeated_glExtensions_codec);
            break;
          }
          case 72: {
            Guest = input.ReadBool();
            break;
          }
          case 80: {
            LocalTime = input.ReadInt32();
            break;
          }
          case 90: {
            KakaoHashedKey = input.ReadString();
            break;
          }
          case 98: {
            Mid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CReloadData : pb::IMessage<CReloadData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CReloadData> _parser = new pb::MessageParser<CReloadData>(() => new CReloadData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CReloadData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReloadData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReloadData(CReloadData other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReloadData Clone() {
      return new CReloadData(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CReloadData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CReloadData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CReloadData other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjAdd : pb::IMessage<CObjAdd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjAdd> _parser = new pb::MessageParser<CObjAdd>(() => new CObjAdd());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjAdd(CObjAdd other) : this() {
      _hasBits0 = other._hasBits0;
      invenElem_ = other.invenElem_;
      x_ = other.x_;
      y_ = other.y_;
      floor_ = other.floor_;
      flip_ = other.flip_;
      inven_ = other.inven_;
      storeKey_ = other.storeKey_;
      invalidDeco_ = other.invalidDeco_;
      saleEventAuthKey_ = other.saleEventAuthKey_;
      price_ = other.price_;
      beanDepot_ = other.beanDepot_;
      buyByCost_ = other.buyByCost_;
      cherryShop_ = other.cherryShop_;
      costType_ = other.costType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjAdd Clone() {
      return new CObjAdd(this);
    }

    /// <summary>Field number for the "invenElem" field.</summary>
    public const int InvenElemFieldNumber = 1;
    private readonly static string InvenElemDefaultValue = "";

    private string invenElem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvenElem {
      get { return invenElem_ ?? InvenElemDefaultValue; }
      set {
        invenElem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "invenElem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvenElem {
      get { return invenElem_ != null; }
    }
    /// <summary>Clears the value of the "invenElem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvenElem() {
      invenElem_ = null;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 4;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 4) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "flip" field.</summary>
    public const int FlipFieldNumber = 5;
    private readonly static int FlipDefaultValue = 0;

    private int flip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flip {
      get { if ((_hasBits0 & 8) != 0) { return flip_; } else { return FlipDefaultValue; } }
      set {
        _hasBits0 |= 8;
        flip_ = value;
      }
    }
    /// <summary>Gets whether the "flip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlip {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "flip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlip() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "inven" field.</summary>
    public const int InvenFieldNumber = 6;
    private readonly static bool InvenDefaultValue = false;

    private bool inven_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inven {
      get { if ((_hasBits0 & 16) != 0) { return inven_; } else { return InvenDefaultValue; } }
      set {
        _hasBits0 |= 16;
        inven_ = value;
      }
    }
    /// <summary>Gets whether the "inven" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInven {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "inven" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInven() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 7;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 32) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 8;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 64) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 64;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "saleEventAuthKey" field.</summary>
    public const int SaleEventAuthKeyFieldNumber = 9;
    private readonly static string SaleEventAuthKeyDefaultValue = "";

    private string saleEventAuthKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaleEventAuthKey {
      get { return saleEventAuthKey_ ?? SaleEventAuthKeyDefaultValue; }
      set {
        saleEventAuthKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "saleEventAuthKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSaleEventAuthKey {
      get { return saleEventAuthKey_ != null; }
    }
    /// <summary>Clears the value of the "saleEventAuthKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSaleEventAuthKey() {
      saleEventAuthKey_ = null;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 128) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 128;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "beanDepot" field.</summary>
    public const int BeanDepotFieldNumber = 11;
    private readonly static bool BeanDepotDefaultValue = false;

    private bool beanDepot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BeanDepot {
      get { if ((_hasBits0 & 256) != 0) { return beanDepot_; } else { return BeanDepotDefaultValue; } }
      set {
        _hasBits0 |= 256;
        beanDepot_ = value;
      }
    }
    /// <summary>Gets whether the "beanDepot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBeanDepot {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "beanDepot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBeanDepot() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "buyByCost" field.</summary>
    public const int BuyByCostFieldNumber = 12;
    private readonly static bool BuyByCostDefaultValue = false;

    private bool buyByCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BuyByCost {
      get { if ((_hasBits0 & 512) != 0) { return buyByCost_; } else { return BuyByCostDefaultValue; } }
      set {
        _hasBits0 |= 512;
        buyByCost_ = value;
      }
    }
    /// <summary>Gets whether the "buyByCost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuyByCost {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "buyByCost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuyByCost() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "cherryShop" field.</summary>
    public const int CherryShopFieldNumber = 13;
    private readonly static bool CherryShopDefaultValue = false;

    private bool cherryShop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CherryShop {
      get { if ((_hasBits0 & 1024) != 0) { return cherryShop_; } else { return CherryShopDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        cherryShop_ = value;
      }
    }
    /// <summary>Gets whether the "cherryShop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCherryShop {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "cherryShop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCherryShop() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "costType" field.</summary>
    public const int CostTypeFieldNumber = 14;
    private readonly static string CostTypeDefaultValue = "";

    private string costType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostType {
      get { return costType_ ?? CostTypeDefaultValue; }
      set {
        costType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "costType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostType {
      get { return costType_ != null; }
    }
    /// <summary>Clears the value of the "costType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostType() {
      costType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InvenElem != other.InvenElem) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Floor != other.Floor) return false;
      if (Flip != other.Flip) return false;
      if (Inven != other.Inven) return false;
      if (StoreKey != other.StoreKey) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      if (SaleEventAuthKey != other.SaleEventAuthKey) return false;
      if (Price != other.Price) return false;
      if (BeanDepot != other.BeanDepot) return false;
      if (BuyByCost != other.BuyByCost) return false;
      if (CherryShop != other.CherryShop) return false;
      if (CostType != other.CostType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInvenElem) hash ^= InvenElem.GetHashCode();
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (HasFlip) hash ^= Flip.GetHashCode();
      if (HasInven) hash ^= Inven.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (HasSaleEventAuthKey) hash ^= SaleEventAuthKey.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (HasBeanDepot) hash ^= BeanDepot.GetHashCode();
      if (HasBuyByCost) hash ^= BuyByCost.GetHashCode();
      if (HasCherryShop) hash ^= CherryShop.GetHashCode();
      if (HasCostType) hash ^= CostType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInvenElem) {
        output.WriteRawTag(10);
        output.WriteString(InvenElem);
      }
      if (HasX) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(40);
        output.WriteInt32(Flip);
      }
      if (HasInven) {
        output.WriteRawTag(48);
        output.WriteBool(Inven);
      }
      if (HasStoreKey) {
        output.WriteRawTag(56);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(64);
        output.WriteInt32(InvalidDeco);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(74);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasPrice) {
        output.WriteRawTag(80);
        output.WriteInt32(Price);
      }
      if (HasBeanDepot) {
        output.WriteRawTag(88);
        output.WriteBool(BeanDepot);
      }
      if (HasBuyByCost) {
        output.WriteRawTag(96);
        output.WriteBool(BuyByCost);
      }
      if (HasCherryShop) {
        output.WriteRawTag(104);
        output.WriteBool(CherryShop);
      }
      if (HasCostType) {
        output.WriteRawTag(114);
        output.WriteString(CostType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInvenElem) {
        output.WriteRawTag(10);
        output.WriteString(InvenElem);
      }
      if (HasX) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(40);
        output.WriteInt32(Flip);
      }
      if (HasInven) {
        output.WriteRawTag(48);
        output.WriteBool(Inven);
      }
      if (HasStoreKey) {
        output.WriteRawTag(56);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(64);
        output.WriteInt32(InvalidDeco);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(74);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasPrice) {
        output.WriteRawTag(80);
        output.WriteInt32(Price);
      }
      if (HasBeanDepot) {
        output.WriteRawTag(88);
        output.WriteBool(BeanDepot);
      }
      if (HasBuyByCost) {
        output.WriteRawTag(96);
        output.WriteBool(BuyByCost);
      }
      if (HasCherryShop) {
        output.WriteRawTag(104);
        output.WriteBool(CherryShop);
      }
      if (HasCostType) {
        output.WriteRawTag(114);
        output.WriteString(CostType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasInvenElem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvenElem);
      }
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (HasFlip) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flip);
      }
      if (HasInven) {
        size += 1 + 1;
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (HasSaleEventAuthKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaleEventAuthKey);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (HasBeanDepot) {
        size += 1 + 1;
      }
      if (HasBuyByCost) {
        size += 1 + 1;
      }
      if (HasCherryShop) {
        size += 1 + 1;
      }
      if (HasCostType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjAdd other) {
      if (other == null) {
        return;
      }
      if (other.HasInvenElem) {
        InvenElem = other.InvenElem;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      if (other.HasFlip) {
        Flip = other.Flip;
      }
      if (other.HasInven) {
        Inven = other.Inven;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      if (other.HasSaleEventAuthKey) {
        SaleEventAuthKey = other.SaleEventAuthKey;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasBeanDepot) {
        BeanDepot = other.BeanDepot;
      }
      if (other.HasBuyByCost) {
        BuyByCost = other.BuyByCost;
      }
      if (other.HasCherryShop) {
        CherryShop = other.CherryShop;
      }
      if (other.HasCostType) {
        CostType = other.CostType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InvenElem = input.ReadString();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
          case 40: {
            Flip = input.ReadInt32();
            break;
          }
          case 48: {
            Inven = input.ReadBool();
            break;
          }
          case 56: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 64: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 74: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 80: {
            Price = input.ReadInt32();
            break;
          }
          case 88: {
            BeanDepot = input.ReadBool();
            break;
          }
          case 96: {
            BuyByCost = input.ReadBool();
            break;
          }
          case 104: {
            CherryShop = input.ReadBool();
            break;
          }
          case 114: {
            CostType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InvenElem = input.ReadString();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
          case 40: {
            Flip = input.ReadInt32();
            break;
          }
          case 48: {
            Inven = input.ReadBool();
            break;
          }
          case 56: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 64: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 74: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 80: {
            Price = input.ReadInt32();
            break;
          }
          case 88: {
            BeanDepot = input.ReadBool();
            break;
          }
          case 96: {
            BuyByCost = input.ReadBool();
            break;
          }
          case 104: {
            CherryShop = input.ReadBool();
            break;
          }
          case 114: {
            CostType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjMove : pb::IMessage<CObjMove>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjMove> _parser = new pb::MessageParser<CObjMove>(() => new CObjMove());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjMove(CObjMove other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      x_ = other.x_;
      y_ = other.y_;
      floor_ = other.floor_;
      flip_ = other.flip_;
      storeKey_ = other.storeKey_;
      invalidDeco_ = other.invalidDeco_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjMove Clone() {
      return new CObjMove(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 2) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 2;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 4) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 4;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 4;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 8) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "flip" field.</summary>
    public const int FlipFieldNumber = 5;
    private readonly static int FlipDefaultValue = 0;

    private int flip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flip {
      get { if ((_hasBits0 & 16) != 0) { return flip_; } else { return FlipDefaultValue; } }
      set {
        _hasBits0 |= 16;
        flip_ = value;
      }
    }
    /// <summary>Gets whether the "flip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlip {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "flip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlip() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 6;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 32) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 7;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 64) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 64;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Floor != other.Floor) return false;
      if (Flip != other.Flip) return false;
      if (StoreKey != other.StoreKey) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (HasFlip) hash ^= Flip.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasX) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(40);
        output.WriteInt32(Flip);
      }
      if (HasStoreKey) {
        output.WriteRawTag(48);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(56);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasX) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(40);
        output.WriteInt32(Flip);
      }
      if (HasStoreKey) {
        output.WriteRawTag(48);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(56);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (HasFlip) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flip);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjMove other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      if (other.HasFlip) {
        Flip = other.Flip;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
          case 40: {
            Flip = input.ReadInt32();
            break;
          }
          case 48: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 56: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
          case 40: {
            Flip = input.ReadInt32();
            break;
          }
          case 48: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 56: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjSell : pb::IMessage<CObjSell>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjSell> _parser = new pb::MessageParser<CObjSell>(() => new CObjSell());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjSell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjSell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjSell(CObjSell other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      invalidDeco_ = other.invalidDeco_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjSell Clone() {
      return new CObjSell(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 3;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 4) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 4;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjSell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjSell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(24);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(24);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjSell other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjStore : pb::IMessage<CObjStore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjStore> _parser = new pb::MessageParser<CObjStore>(() => new CObjStore());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjStore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjStore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjStore(CObjStore other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      invalidDeco_ = other.invalidDeco_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjStore Clone() {
      return new CObjStore(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 3;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 4) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 4;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjStore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjStore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(24);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(24);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjStore other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjReplace : pb::IMessage<CObjReplace>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjReplace> _parser = new pb::MessageParser<CObjReplace>(() => new CObjReplace());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjReplace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjReplace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjReplace(CObjReplace other) : this() {
      _hasBits0 = other._hasBits0;
      storeOid_ = other.storeOid_;
      invenElem_ = other.invenElem_;
      x_ = other.x_;
      y_ = other.y_;
      floor_ = other.floor_;
      flip_ = other.flip_;
      inven_ = other.inven_;
      storeKey_ = other.storeKey_;
      invalidDeco_ = other.invalidDeco_;
      saleEventAuthKey_ = other.saleEventAuthKey_;
      price_ = other.price_;
      beanDepot_ = other.beanDepot_;
      buyByCost_ = other.buyByCost_;
      cherryShop_ = other.cherryShop_;
      costType_ = other.costType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjReplace Clone() {
      return new CObjReplace(this);
    }

    /// <summary>Field number for the "storeOid" field.</summary>
    public const int StoreOidFieldNumber = 1;
    private readonly static int StoreOidDefaultValue = 0;

    private int storeOid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreOid {
      get { if ((_hasBits0 & 1) != 0) { return storeOid_; } else { return StoreOidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeOid_ = value;
      }
    }
    /// <summary>Gets whether the "storeOid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeOid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "invenElem" field.</summary>
    public const int InvenElemFieldNumber = 2;
    private readonly static string InvenElemDefaultValue = "";

    private string invenElem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvenElem {
      get { return invenElem_ ?? InvenElemDefaultValue; }
      set {
        invenElem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "invenElem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvenElem {
      get { return invenElem_ != null; }
    }
    /// <summary>Clears the value of the "invenElem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvenElem() {
      invenElem_ = null;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 2) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 2;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 4) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 4;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 5;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 8) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "flip" field.</summary>
    public const int FlipFieldNumber = 6;
    private readonly static int FlipDefaultValue = 0;

    private int flip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flip {
      get { if ((_hasBits0 & 16) != 0) { return flip_; } else { return FlipDefaultValue; } }
      set {
        _hasBits0 |= 16;
        flip_ = value;
      }
    }
    /// <summary>Gets whether the "flip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlip {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "flip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlip() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "inven" field.</summary>
    public const int InvenFieldNumber = 7;
    private readonly static bool InvenDefaultValue = false;

    private bool inven_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inven {
      get { if ((_hasBits0 & 32) != 0) { return inven_; } else { return InvenDefaultValue; } }
      set {
        _hasBits0 |= 32;
        inven_ = value;
      }
    }
    /// <summary>Gets whether the "inven" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInven {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "inven" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInven() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 8;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 64) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 64;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 9;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 128) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 128;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "saleEventAuthKey" field.</summary>
    public const int SaleEventAuthKeyFieldNumber = 10;
    private readonly static string SaleEventAuthKeyDefaultValue = "";

    private string saleEventAuthKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaleEventAuthKey {
      get { return saleEventAuthKey_ ?? SaleEventAuthKeyDefaultValue; }
      set {
        saleEventAuthKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "saleEventAuthKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSaleEventAuthKey {
      get { return saleEventAuthKey_ != null; }
    }
    /// <summary>Clears the value of the "saleEventAuthKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSaleEventAuthKey() {
      saleEventAuthKey_ = null;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 256) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 256;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "beanDepot" field.</summary>
    public const int BeanDepotFieldNumber = 12;
    private readonly static bool BeanDepotDefaultValue = false;

    private bool beanDepot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BeanDepot {
      get { if ((_hasBits0 & 512) != 0) { return beanDepot_; } else { return BeanDepotDefaultValue; } }
      set {
        _hasBits0 |= 512;
        beanDepot_ = value;
      }
    }
    /// <summary>Gets whether the "beanDepot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBeanDepot {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "beanDepot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBeanDepot() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "buyByCost" field.</summary>
    public const int BuyByCostFieldNumber = 13;
    private readonly static bool BuyByCostDefaultValue = false;

    private bool buyByCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BuyByCost {
      get { if ((_hasBits0 & 1024) != 0) { return buyByCost_; } else { return BuyByCostDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        buyByCost_ = value;
      }
    }
    /// <summary>Gets whether the "buyByCost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuyByCost {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "buyByCost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuyByCost() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "cherryShop" field.</summary>
    public const int CherryShopFieldNumber = 14;
    private readonly static bool CherryShopDefaultValue = false;

    private bool cherryShop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CherryShop {
      get { if ((_hasBits0 & 2048) != 0) { return cherryShop_; } else { return CherryShopDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        cherryShop_ = value;
      }
    }
    /// <summary>Gets whether the "cherryShop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCherryShop {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "cherryShop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCherryShop() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "costType" field.</summary>
    public const int CostTypeFieldNumber = 15;
    private readonly static string CostTypeDefaultValue = "";

    private string costType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CostType {
      get { return costType_ ?? CostTypeDefaultValue; }
      set {
        costType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "costType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostType {
      get { return costType_ != null; }
    }
    /// <summary>Clears the value of the "costType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostType() {
      costType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjReplace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjReplace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreOid != other.StoreOid) return false;
      if (InvenElem != other.InvenElem) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Floor != other.Floor) return false;
      if (Flip != other.Flip) return false;
      if (Inven != other.Inven) return false;
      if (StoreKey != other.StoreKey) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      if (SaleEventAuthKey != other.SaleEventAuthKey) return false;
      if (Price != other.Price) return false;
      if (BeanDepot != other.BeanDepot) return false;
      if (BuyByCost != other.BuyByCost) return false;
      if (CherryShop != other.CherryShop) return false;
      if (CostType != other.CostType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreOid) hash ^= StoreOid.GetHashCode();
      if (HasInvenElem) hash ^= InvenElem.GetHashCode();
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (HasFlip) hash ^= Flip.GetHashCode();
      if (HasInven) hash ^= Inven.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (HasSaleEventAuthKey) hash ^= SaleEventAuthKey.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (HasBeanDepot) hash ^= BeanDepot.GetHashCode();
      if (HasBuyByCost) hash ^= BuyByCost.GetHashCode();
      if (HasCherryShop) hash ^= CherryShop.GetHashCode();
      if (HasCostType) hash ^= CostType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreOid) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreOid);
      }
      if (HasInvenElem) {
        output.WriteRawTag(18);
        output.WriteString(InvenElem);
      }
      if (HasX) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(40);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(48);
        output.WriteInt32(Flip);
      }
      if (HasInven) {
        output.WriteRawTag(56);
        output.WriteBool(Inven);
      }
      if (HasStoreKey) {
        output.WriteRawTag(64);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(72);
        output.WriteInt32(InvalidDeco);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(82);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasPrice) {
        output.WriteRawTag(88);
        output.WriteInt32(Price);
      }
      if (HasBeanDepot) {
        output.WriteRawTag(96);
        output.WriteBool(BeanDepot);
      }
      if (HasBuyByCost) {
        output.WriteRawTag(104);
        output.WriteBool(BuyByCost);
      }
      if (HasCherryShop) {
        output.WriteRawTag(112);
        output.WriteBool(CherryShop);
      }
      if (HasCostType) {
        output.WriteRawTag(122);
        output.WriteString(CostType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreOid) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreOid);
      }
      if (HasInvenElem) {
        output.WriteRawTag(18);
        output.WriteString(InvenElem);
      }
      if (HasX) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(40);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(48);
        output.WriteInt32(Flip);
      }
      if (HasInven) {
        output.WriteRawTag(56);
        output.WriteBool(Inven);
      }
      if (HasStoreKey) {
        output.WriteRawTag(64);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(72);
        output.WriteInt32(InvalidDeco);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(82);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasPrice) {
        output.WriteRawTag(88);
        output.WriteInt32(Price);
      }
      if (HasBeanDepot) {
        output.WriteRawTag(96);
        output.WriteBool(BeanDepot);
      }
      if (HasBuyByCost) {
        output.WriteRawTag(104);
        output.WriteBool(BuyByCost);
      }
      if (HasCherryShop) {
        output.WriteRawTag(112);
        output.WriteBool(CherryShop);
      }
      if (HasCostType) {
        output.WriteRawTag(122);
        output.WriteString(CostType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreOid);
      }
      if (HasInvenElem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvenElem);
      }
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (HasFlip) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flip);
      }
      if (HasInven) {
        size += 1 + 1;
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (HasSaleEventAuthKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaleEventAuthKey);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (HasBeanDepot) {
        size += 1 + 1;
      }
      if (HasBuyByCost) {
        size += 1 + 1;
      }
      if (HasCherryShop) {
        size += 1 + 1;
      }
      if (HasCostType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CostType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjReplace other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreOid) {
        StoreOid = other.StoreOid;
      }
      if (other.HasInvenElem) {
        InvenElem = other.InvenElem;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      if (other.HasFlip) {
        Flip = other.Flip;
      }
      if (other.HasInven) {
        Inven = other.Inven;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      if (other.HasSaleEventAuthKey) {
        SaleEventAuthKey = other.SaleEventAuthKey;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasBeanDepot) {
        BeanDepot = other.BeanDepot;
      }
      if (other.HasBuyByCost) {
        BuyByCost = other.BuyByCost;
      }
      if (other.HasCherryShop) {
        CherryShop = other.CherryShop;
      }
      if (other.HasCostType) {
        CostType = other.CostType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreOid = input.ReadInt32();
            break;
          }
          case 18: {
            InvenElem = input.ReadString();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Floor = input.ReadInt32();
            break;
          }
          case 48: {
            Flip = input.ReadInt32();
            break;
          }
          case 56: {
            Inven = input.ReadBool();
            break;
          }
          case 64: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 72: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 82: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 88: {
            Price = input.ReadInt32();
            break;
          }
          case 96: {
            BeanDepot = input.ReadBool();
            break;
          }
          case 104: {
            BuyByCost = input.ReadBool();
            break;
          }
          case 112: {
            CherryShop = input.ReadBool();
            break;
          }
          case 122: {
            CostType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreOid = input.ReadInt32();
            break;
          }
          case 18: {
            InvenElem = input.ReadString();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Floor = input.ReadInt32();
            break;
          }
          case 48: {
            Flip = input.ReadInt32();
            break;
          }
          case 56: {
            Inven = input.ReadBool();
            break;
          }
          case 64: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 72: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 82: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 88: {
            Price = input.ReadInt32();
            break;
          }
          case 96: {
            BeanDepot = input.ReadBool();
            break;
          }
          case 104: {
            BuyByCost = input.ReadBool();
            break;
          }
          case 112: {
            CherryShop = input.ReadBool();
            break;
          }
          case 122: {
            CostType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjExchange : pb::IMessage<CObjExchange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjExchange> _parser = new pb::MessageParser<CObjExchange>(() => new CObjExchange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjExchange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjExchange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjExchange(CObjExchange other) : this() {
      _hasBits0 = other._hasBits0;
      placedOid_ = other.placedOid_;
      movedOid_ = other.movedOid_;
      x_ = other.x_;
      y_ = other.y_;
      floor_ = other.floor_;
      flip_ = other.flip_;
      storeKey_ = other.storeKey_;
      invalidDeco_ = other.invalidDeco_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjExchange Clone() {
      return new CObjExchange(this);
    }

    /// <summary>Field number for the "placedOid" field.</summary>
    public const int PlacedOidFieldNumber = 1;
    private readonly static int PlacedOidDefaultValue = 0;

    private int placedOid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlacedOid {
      get { if ((_hasBits0 & 1) != 0) { return placedOid_; } else { return PlacedOidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        placedOid_ = value;
      }
    }
    /// <summary>Gets whether the "placedOid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlacedOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "placedOid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlacedOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "movedOid" field.</summary>
    public const int MovedOidFieldNumber = 2;
    private readonly static int MovedOidDefaultValue = 0;

    private int movedOid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MovedOid {
      get { if ((_hasBits0 & 2) != 0) { return movedOid_; } else { return MovedOidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        movedOid_ = value;
      }
    }
    /// <summary>Gets whether the "movedOid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMovedOid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "movedOid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMovedOid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 4) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 4;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 8) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 8;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 5;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 16) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 16;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "flip" field.</summary>
    public const int FlipFieldNumber = 6;
    private readonly static int FlipDefaultValue = 0;

    private int flip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flip {
      get { if ((_hasBits0 & 32) != 0) { return flip_; } else { return FlipDefaultValue; } }
      set {
        _hasBits0 |= 32;
        flip_ = value;
      }
    }
    /// <summary>Gets whether the "flip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlip {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "flip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlip() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 7;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 64) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 64;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 8;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 128) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 128;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjExchange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjExchange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlacedOid != other.PlacedOid) return false;
      if (MovedOid != other.MovedOid) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Floor != other.Floor) return false;
      if (Flip != other.Flip) return false;
      if (StoreKey != other.StoreKey) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlacedOid) hash ^= PlacedOid.GetHashCode();
      if (HasMovedOid) hash ^= MovedOid.GetHashCode();
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (HasFlip) hash ^= Flip.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPlacedOid) {
        output.WriteRawTag(8);
        output.WriteInt32(PlacedOid);
      }
      if (HasMovedOid) {
        output.WriteRawTag(16);
        output.WriteInt32(MovedOid);
      }
      if (HasX) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(40);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(48);
        output.WriteInt32(Flip);
      }
      if (HasStoreKey) {
        output.WriteRawTag(56);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(64);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPlacedOid) {
        output.WriteRawTag(8);
        output.WriteInt32(PlacedOid);
      }
      if (HasMovedOid) {
        output.WriteRawTag(16);
        output.WriteInt32(MovedOid);
      }
      if (HasX) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(40);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(48);
        output.WriteInt32(Flip);
      }
      if (HasStoreKey) {
        output.WriteRawTag(56);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(64);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlacedOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlacedOid);
      }
      if (HasMovedOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovedOid);
      }
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (HasFlip) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flip);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjExchange other) {
      if (other == null) {
        return;
      }
      if (other.HasPlacedOid) {
        PlacedOid = other.PlacedOid;
      }
      if (other.HasMovedOid) {
        MovedOid = other.MovedOid;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      if (other.HasFlip) {
        Flip = other.Flip;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlacedOid = input.ReadInt32();
            break;
          }
          case 16: {
            MovedOid = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Floor = input.ReadInt32();
            break;
          }
          case 48: {
            Flip = input.ReadInt32();
            break;
          }
          case 56: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 64: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlacedOid = input.ReadInt32();
            break;
          }
          case 16: {
            MovedOid = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Floor = input.ReadInt32();
            break;
          }
          case 48: {
            Flip = input.ReadInt32();
            break;
          }
          case 56: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 64: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjBuy : pb::IMessage<CObjBuy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjBuy> _parser = new pb::MessageParser<CObjBuy>(() => new CObjBuy());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjBuy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjBuy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjBuy(CObjBuy other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      storeKey_ = other.storeKey_;
      price_ = other.price_;
      cash_ = other.cash_;
      cost_ = other.cost_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjBuy Clone() {
      return new CObjBuy(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static string KindDefaultValue = "";

    private string kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_ ?? KindDefaultValue; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return kind_ != null; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kind_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 2) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 4;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 5;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { if ((_hasBits0 & 8) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCost {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjBuy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjBuy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (StoreKey != other.StoreKey) return false;
      if (Price != other.Price) return false;
      if (Cash != other.Cash) return false;
      if (Cost != other.Cost) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasPrice) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (HasCash) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (HasCost) {
        output.WriteRawTag(40);
        output.WriteInt32(Cost);
      }
      if (HasReason) {
        output.WriteRawTag(50);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasPrice) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (HasCash) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (HasCost) {
        output.WriteRawTag(40);
        output.WriteInt32(Cost);
      }
      if (HasReason) {
        output.WriteRawTag(50);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjBuy other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
          case 40: {
            Cost = input.ReadInt32();
            break;
          }
          case 50: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
          case 40: {
            Cost = input.ReadInt32();
            break;
          }
          case 50: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjStoreAll : pb::IMessage<CObjStoreAll>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjStoreAll> _parser = new pb::MessageParser<CObjStoreAll>(() => new CObjStoreAll());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjStoreAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjStoreAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjStoreAll(CObjStoreAll other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_.Clone();
      storeKey_ = other.storeKey_;
      invalidDeco_ = other.invalidDeco_;
      storeWall_ = other.storeWall_;
      storeExtWall_ = other.storeExtWall_;
      storeTile_ = other.storeTile_;
      protectBean_ = other.protectBean_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjStoreAll Clone() {
      return new CObjStoreAll(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_oid_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> oid_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Oid {
      get { return oid_; }
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 3;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 2) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 2;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeWall" field.</summary>
    public const int StoreWallFieldNumber = 4;
    private readonly static bool StoreWallDefaultValue = false;

    private bool storeWall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StoreWall {
      get { if ((_hasBits0 & 4) != 0) { return storeWall_; } else { return StoreWallDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeWall_ = value;
      }
    }
    /// <summary>Gets whether the "storeWall" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreWall {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeWall" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreWall() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeExtWall" field.</summary>
    public const int StoreExtWallFieldNumber = 5;
    private readonly static bool StoreExtWallDefaultValue = false;

    private bool storeExtWall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StoreExtWall {
      get { if ((_hasBits0 & 8) != 0) { return storeExtWall_; } else { return StoreExtWallDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeExtWall_ = value;
      }
    }
    /// <summary>Gets whether the "storeExtWall" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreExtWall {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeExtWall" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreExtWall() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "storeTile" field.</summary>
    public const int StoreTileFieldNumber = 6;
    private readonly static bool StoreTileDefaultValue = false;

    private bool storeTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StoreTile {
      get { if ((_hasBits0 & 16) != 0) { return storeTile_; } else { return StoreTileDefaultValue; } }
      set {
        _hasBits0 |= 16;
        storeTile_ = value;
      }
    }
    /// <summary>Gets whether the "storeTile" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreTile {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "storeTile" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreTile() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "protectBean" field.</summary>
    public const int ProtectBeanFieldNumber = 7;
    private readonly static bool ProtectBeanDefaultValue = false;

    private bool protectBean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProtectBean {
      get { if ((_hasBits0 & 32) != 0) { return protectBean_; } else { return ProtectBeanDefaultValue; } }
      set {
        _hasBits0 |= 32;
        protectBean_ = value;
      }
    }
    /// <summary>Gets whether the "protectBean" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProtectBean {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "protectBean" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProtectBean() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjStoreAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjStoreAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!oid_.Equals(other.oid_)) return false;
      if (StoreKey != other.StoreKey) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      if (StoreWall != other.StoreWall) return false;
      if (StoreExtWall != other.StoreExtWall) return false;
      if (StoreTile != other.StoreTile) return false;
      if (ProtectBean != other.ProtectBean) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= oid_.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (HasStoreWall) hash ^= StoreWall.GetHashCode();
      if (HasStoreExtWall) hash ^= StoreExtWall.GetHashCode();
      if (HasStoreTile) hash ^= StoreTile.GetHashCode();
      if (HasProtectBean) hash ^= ProtectBean.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      oid_.WriteTo(output, _repeated_oid_codec);
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(24);
        output.WriteInt32(InvalidDeco);
      }
      if (HasStoreWall) {
        output.WriteRawTag(32);
        output.WriteBool(StoreWall);
      }
      if (HasStoreExtWall) {
        output.WriteRawTag(40);
        output.WriteBool(StoreExtWall);
      }
      if (HasStoreTile) {
        output.WriteRawTag(48);
        output.WriteBool(StoreTile);
      }
      if (HasProtectBean) {
        output.WriteRawTag(56);
        output.WriteBool(ProtectBean);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      oid_.WriteTo(ref output, _repeated_oid_codec);
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(24);
        output.WriteInt32(InvalidDeco);
      }
      if (HasStoreWall) {
        output.WriteRawTag(32);
        output.WriteBool(StoreWall);
      }
      if (HasStoreExtWall) {
        output.WriteRawTag(40);
        output.WriteBool(StoreExtWall);
      }
      if (HasStoreTile) {
        output.WriteRawTag(48);
        output.WriteBool(StoreTile);
      }
      if (HasProtectBean) {
        output.WriteRawTag(56);
        output.WriteBool(ProtectBean);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += oid_.CalculateSize(_repeated_oid_codec);
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (HasStoreWall) {
        size += 1 + 1;
      }
      if (HasStoreExtWall) {
        size += 1 + 1;
      }
      if (HasStoreTile) {
        size += 1 + 1;
      }
      if (HasProtectBean) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjStoreAll other) {
      if (other == null) {
        return;
      }
      oid_.Add(other.oid_);
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      if (other.HasStoreWall) {
        StoreWall = other.StoreWall;
      }
      if (other.HasStoreExtWall) {
        StoreExtWall = other.StoreExtWall;
      }
      if (other.HasStoreTile) {
        StoreTile = other.StoreTile;
      }
      if (other.HasProtectBean) {
        ProtectBean = other.ProtectBean;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            oid_.AddEntriesFrom(input, _repeated_oid_codec);
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 32: {
            StoreWall = input.ReadBool();
            break;
          }
          case 40: {
            StoreExtWall = input.ReadBool();
            break;
          }
          case 48: {
            StoreTile = input.ReadBool();
            break;
          }
          case 56: {
            ProtectBean = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            oid_.AddEntriesFrom(ref input, _repeated_oid_codec);
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 32: {
            StoreWall = input.ReadBool();
            break;
          }
          case 40: {
            StoreExtWall = input.ReadBool();
            break;
          }
          case 48: {
            StoreTile = input.ReadBool();
            break;
          }
          case 56: {
            ProtectBean = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSellInven : pb::IMessage<CSellInven>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSellInven> _parser = new pb::MessageParser<CSellInven>(() => new CSellInven());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSellInven> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellInven() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellInven(CSellInven other) : this() {
      invenElem_ = other.invenElem_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellInven Clone() {
      return new CSellInven(this);
    }

    /// <summary>Field number for the "invenElem" field.</summary>
    public const int InvenElemFieldNumber = 1;
    private readonly static string InvenElemDefaultValue = "";

    private string invenElem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvenElem {
      get { return invenElem_ ?? InvenElemDefaultValue; }
      set {
        invenElem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "invenElem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvenElem {
      get { return invenElem_ != null; }
    }
    /// <summary>Clears the value of the "invenElem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvenElem() {
      invenElem_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSellInven);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSellInven other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InvenElem != other.InvenElem) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInvenElem) hash ^= InvenElem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInvenElem) {
        output.WriteRawTag(10);
        output.WriteString(InvenElem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInvenElem) {
        output.WriteRawTag(10);
        output.WriteString(InvenElem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasInvenElem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvenElem);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSellInven other) {
      if (other == null) {
        return;
      }
      if (other.HasInvenElem) {
        InvenElem = other.InvenElem;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InvenElem = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InvenElem = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpand : pb::IMessage<CExpand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpand> _parser = new pb::MessageParser<CExpand>(() => new CExpand());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpand(CExpand other) : this() {
      _hasBits0 = other._hasBits0;
      expandId_ = other.expandId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpand Clone() {
      return new CExpand(this);
    }

    /// <summary>Field number for the "expandId" field.</summary>
    public const int ExpandIdFieldNumber = 1;
    private readonly static string ExpandIdDefaultValue = "";

    private string expandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandId {
      get { return expandId_ ?? ExpandIdDefaultValue; }
      set {
        expandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expandId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpandId {
      get { return expandId_ != null; }
    }
    /// <summary>Clears the value of the "expandId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpandId() {
      expandId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExpandId != other.ExpandId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExpandId) hash ^= ExpandId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasExpandId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpand other) {
      if (other == null) {
        return;
      }
      if (other.HasExpandId) {
        ExpandId = other.ExpandId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class COpenNewStore : pb::IMessage<COpenNewStore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<COpenNewStore> _parser = new pb::MessageParser<COpenNewStore>(() => new COpenNewStore());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<COpenNewStore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewStore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewStore(COpenNewStore other) : this() {
      storeId_ = other.storeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewStore Clone() {
      return new COpenNewStore(this);
    }

    /// <summary>Field number for the "storeId" field.</summary>
    public const int StoreIdFieldNumber = 1;
    private readonly static string StoreIdDefaultValue = "";

    private string storeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoreId {
      get { return storeId_ ?? StoreIdDefaultValue; }
      set {
        storeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "storeId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreId {
      get { return storeId_ != null; }
    }
    /// <summary>Clears the value of the "storeId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreId() {
      storeId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as COpenNewStore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(COpenNewStore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreId != other.StoreId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreId) hash ^= StoreId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreId) {
        output.WriteRawTag(10);
        output.WriteString(StoreId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreId) {
        output.WriteRawTag(10);
        output.WriteString(StoreId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoreId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(COpenNewStore other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreId) {
        StoreId = other.StoreId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StoreId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StoreId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSaveDesignHistory : pb::IMessage<CSaveDesignHistory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSaveDesignHistory> _parser = new pb::MessageParser<CSaveDesignHistory>(() => new CSaveDesignHistory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSaveDesignHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSaveDesignHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSaveDesignHistory(CSaveDesignHistory other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      floor_ = other.floor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSaveDesignHistory Clone() {
      return new CSaveDesignHistory(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 2;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 2) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSaveDesignHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSaveDesignHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (Floor != other.Floor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasFloor) {
        output.WriteRawTag(16);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasFloor) {
        output.WriteRawTag(16);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSaveDesignHistory other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRequestDesignHistoryData : pb::IMessage<CRequestDesignHistoryData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRequestDesignHistoryData> _parser = new pb::MessageParser<CRequestDesignHistoryData>(() => new CRequestDesignHistoryData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRequestDesignHistoryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRequestDesignHistoryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRequestDesignHistoryData(CRequestDesignHistoryData other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      floor_ = other.floor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRequestDesignHistoryData Clone() {
      return new CRequestDesignHistoryData(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 2;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 2) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRequestDesignHistoryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRequestDesignHistoryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (Floor != other.Floor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasFloor) {
        output.WriteRawTag(16);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasFloor) {
        output.WriteRawTag(16);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRequestDesignHistoryData other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class COpenNewStoreAtOnce : pb::IMessage<COpenNewStoreAtOnce>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<COpenNewStoreAtOnce> _parser = new pb::MessageParser<COpenNewStoreAtOnce>(() => new COpenNewStoreAtOnce());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<COpenNewStoreAtOnce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewStoreAtOnce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewStoreAtOnce(COpenNewStoreAtOnce other) : this() {
      _hasBits0 = other._hasBits0;
      storeId_ = other.storeId_;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewStoreAtOnce Clone() {
      return new COpenNewStoreAtOnce(this);
    }

    /// <summary>Field number for the "storeId" field.</summary>
    public const int StoreIdFieldNumber = 1;
    private readonly static string StoreIdDefaultValue = "";

    private string storeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StoreId {
      get { return storeId_ ?? StoreIdDefaultValue; }
      set {
        storeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "storeId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreId {
      get { return storeId_ != null; }
    }
    /// <summary>Clears the value of the "storeId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreId() {
      storeId_ = null;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as COpenNewStoreAtOnce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(COpenNewStoreAtOnce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreId != other.StoreId) return false;
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreId) hash ^= StoreId.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreId) {
        output.WriteRawTag(10);
        output.WriteString(StoreId);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreId) {
        output.WriteRawTag(10);
        output.WriteString(StoreId);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoreId);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(COpenNewStoreAtOnce other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreId) {
        StoreId = other.StoreId;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StoreId = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StoreId = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTileSwap : pb::IMessage<CTileSwap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTileSwap> _parser = new pb::MessageParser<CTileSwap>(() => new CTileSwap());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTileSwap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileSwap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileSwap(CTileSwap other) : this() {
      _hasBits0 = other._hasBits0;
      x1_ = other.x1_;
      y1_ = other.y1_;
      floor1_ = other.floor1_;
      x2_ = other.x2_;
      y2_ = other.y2_;
      floor2_ = other.floor2_;
      exterior_ = other.exterior_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileSwap Clone() {
      return new CTileSwap(this);
    }

    /// <summary>Field number for the "x1" field.</summary>
    public const int X1FieldNumber = 1;
    private readonly static int X1DefaultValue = 0;

    private int x1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X1 {
      get { if ((_hasBits0 & 1) != 0) { return x1_; } else { return X1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        x1_ = value;
      }
    }
    /// <summary>Gets whether the "x1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX1() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y1" field.</summary>
    public const int Y1FieldNumber = 2;
    private readonly static int Y1DefaultValue = 0;

    private int y1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y1 {
      get { if ((_hasBits0 & 2) != 0) { return y1_; } else { return Y1DefaultValue; } }
      set {
        _hasBits0 |= 2;
        y1_ = value;
      }
    }
    /// <summary>Gets whether the "y1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY1 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY1() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "floor1" field.</summary>
    public const int Floor1FieldNumber = 3;
    private readonly static int Floor1DefaultValue = 0;

    private int floor1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor1 {
      get { if ((_hasBits0 & 4) != 0) { return floor1_; } else { return Floor1DefaultValue; } }
      set {
        _hasBits0 |= 4;
        floor1_ = value;
      }
    }
    /// <summary>Gets whether the "floor1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor1 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "floor1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor1() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "x2" field.</summary>
    public const int X2FieldNumber = 4;
    private readonly static int X2DefaultValue = 0;

    private int x2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X2 {
      get { if ((_hasBits0 & 8) != 0) { return x2_; } else { return X2DefaultValue; } }
      set {
        _hasBits0 |= 8;
        x2_ = value;
      }
    }
    /// <summary>Gets whether the "x2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX2 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "x2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX2() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "y2" field.</summary>
    public const int Y2FieldNumber = 5;
    private readonly static int Y2DefaultValue = 0;

    private int y2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y2 {
      get { if ((_hasBits0 & 16) != 0) { return y2_; } else { return Y2DefaultValue; } }
      set {
        _hasBits0 |= 16;
        y2_ = value;
      }
    }
    /// <summary>Gets whether the "y2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY2 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "y2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY2() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "floor2" field.</summary>
    public const int Floor2FieldNumber = 6;
    private readonly static int Floor2DefaultValue = 0;

    private int floor2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor2 {
      get { if ((_hasBits0 & 32) != 0) { return floor2_; } else { return Floor2DefaultValue; } }
      set {
        _hasBits0 |= 32;
        floor2_ = value;
      }
    }
    /// <summary>Gets whether the "floor2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor2 {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "floor2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor2() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "exterior" field.</summary>
    public const int ExteriorFieldNumber = 7;
    private readonly static bool ExteriorDefaultValue = false;

    private bool exterior_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exterior {
      get { if ((_hasBits0 & 64) != 0) { return exterior_; } else { return ExteriorDefaultValue; } }
      set {
        _hasBits0 |= 64;
        exterior_ = value;
      }
    }
    /// <summary>Gets whether the "exterior" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExterior {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "exterior" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExterior() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 8;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 128) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 128;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTileSwap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTileSwap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X1 != other.X1) return false;
      if (Y1 != other.Y1) return false;
      if (Floor1 != other.Floor1) return false;
      if (X2 != other.X2) return false;
      if (Y2 != other.Y2) return false;
      if (Floor2 != other.Floor2) return false;
      if (Exterior != other.Exterior) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX1) hash ^= X1.GetHashCode();
      if (HasY1) hash ^= Y1.GetHashCode();
      if (HasFloor1) hash ^= Floor1.GetHashCode();
      if (HasX2) hash ^= X2.GetHashCode();
      if (HasY2) hash ^= Y2.GetHashCode();
      if (HasFloor2) hash ^= Floor2.GetHashCode();
      if (HasExterior) hash ^= Exterior.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX1) {
        output.WriteRawTag(8);
        output.WriteInt32(X1);
      }
      if (HasY1) {
        output.WriteRawTag(16);
        output.WriteInt32(Y1);
      }
      if (HasFloor1) {
        output.WriteRawTag(24);
        output.WriteInt32(Floor1);
      }
      if (HasX2) {
        output.WriteRawTag(32);
        output.WriteInt32(X2);
      }
      if (HasY2) {
        output.WriteRawTag(40);
        output.WriteInt32(Y2);
      }
      if (HasFloor2) {
        output.WriteRawTag(48);
        output.WriteInt32(Floor2);
      }
      if (HasExterior) {
        output.WriteRawTag(56);
        output.WriteBool(Exterior);
      }
      if (HasStoreKey) {
        output.WriteRawTag(64);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX1) {
        output.WriteRawTag(8);
        output.WriteInt32(X1);
      }
      if (HasY1) {
        output.WriteRawTag(16);
        output.WriteInt32(Y1);
      }
      if (HasFloor1) {
        output.WriteRawTag(24);
        output.WriteInt32(Floor1);
      }
      if (HasX2) {
        output.WriteRawTag(32);
        output.WriteInt32(X2);
      }
      if (HasY2) {
        output.WriteRawTag(40);
        output.WriteInt32(Y2);
      }
      if (HasFloor2) {
        output.WriteRawTag(48);
        output.WriteInt32(Floor2);
      }
      if (HasExterior) {
        output.WriteRawTag(56);
        output.WriteBool(Exterior);
      }
      if (HasStoreKey) {
        output.WriteRawTag(64);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X1);
      }
      if (HasY1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y1);
      }
      if (HasFloor1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor1);
      }
      if (HasX2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X2);
      }
      if (HasY2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y2);
      }
      if (HasFloor2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor2);
      }
      if (HasExterior) {
        size += 1 + 1;
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTileSwap other) {
      if (other == null) {
        return;
      }
      if (other.HasX1) {
        X1 = other.X1;
      }
      if (other.HasY1) {
        Y1 = other.Y1;
      }
      if (other.HasFloor1) {
        Floor1 = other.Floor1;
      }
      if (other.HasX2) {
        X2 = other.X2;
      }
      if (other.HasY2) {
        Y2 = other.Y2;
      }
      if (other.HasFloor2) {
        Floor2 = other.Floor2;
      }
      if (other.HasExterior) {
        Exterior = other.Exterior;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X1 = input.ReadInt32();
            break;
          }
          case 16: {
            Y1 = input.ReadInt32();
            break;
          }
          case 24: {
            Floor1 = input.ReadInt32();
            break;
          }
          case 32: {
            X2 = input.ReadInt32();
            break;
          }
          case 40: {
            Y2 = input.ReadInt32();
            break;
          }
          case 48: {
            Floor2 = input.ReadInt32();
            break;
          }
          case 56: {
            Exterior = input.ReadBool();
            break;
          }
          case 64: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X1 = input.ReadInt32();
            break;
          }
          case 16: {
            Y1 = input.ReadInt32();
            break;
          }
          case 24: {
            Floor1 = input.ReadInt32();
            break;
          }
          case 32: {
            X2 = input.ReadInt32();
            break;
          }
          case 40: {
            Y2 = input.ReadInt32();
            break;
          }
          case 48: {
            Floor2 = input.ReadInt32();
            break;
          }
          case 56: {
            Exterior = input.ReadBool();
            break;
          }
          case 64: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTileAdd : pb::IMessage<CTileAdd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTileAdd> _parser = new pb::MessageParser<CTileAdd>(() => new CTileAdd());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTileAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileAdd(CTileAdd other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      x_ = other.x_;
      y_ = other.y_;
      floor_ = other.floor_;
      inven_ = other.inven_;
      exterior_ = other.exterior_;
      storeKey_ = other.storeKey_;
      saleEventAuthKey_ = other.saleEventAuthKey_;
      cherryShop_ = other.cherryShop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileAdd Clone() {
      return new CTileAdd(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static string KindDefaultValue = "";

    private string kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_ ?? KindDefaultValue; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return kind_ != null; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kind_ = null;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 4;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 4) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "inven" field.</summary>
    public const int InvenFieldNumber = 5;
    private readonly static bool InvenDefaultValue = false;

    private bool inven_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inven {
      get { if ((_hasBits0 & 8) != 0) { return inven_; } else { return InvenDefaultValue; } }
      set {
        _hasBits0 |= 8;
        inven_ = value;
      }
    }
    /// <summary>Gets whether the "inven" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInven {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "inven" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInven() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "exterior" field.</summary>
    public const int ExteriorFieldNumber = 6;
    private readonly static bool ExteriorDefaultValue = false;

    private bool exterior_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exterior {
      get { if ((_hasBits0 & 16) != 0) { return exterior_; } else { return ExteriorDefaultValue; } }
      set {
        _hasBits0 |= 16;
        exterior_ = value;
      }
    }
    /// <summary>Gets whether the "exterior" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExterior {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "exterior" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExterior() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 7;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 32) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "saleEventAuthKey" field.</summary>
    public const int SaleEventAuthKeyFieldNumber = 8;
    private readonly static string SaleEventAuthKeyDefaultValue = "";

    private string saleEventAuthKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaleEventAuthKey {
      get { return saleEventAuthKey_ ?? SaleEventAuthKeyDefaultValue; }
      set {
        saleEventAuthKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "saleEventAuthKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSaleEventAuthKey {
      get { return saleEventAuthKey_ != null; }
    }
    /// <summary>Clears the value of the "saleEventAuthKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSaleEventAuthKey() {
      saleEventAuthKey_ = null;
    }

    /// <summary>Field number for the "cherryShop" field.</summary>
    public const int CherryShopFieldNumber = 9;
    private readonly static bool CherryShopDefaultValue = false;

    private bool cherryShop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CherryShop {
      get { if ((_hasBits0 & 64) != 0) { return cherryShop_; } else { return CherryShopDefaultValue; } }
      set {
        _hasBits0 |= 64;
        cherryShop_ = value;
      }
    }
    /// <summary>Gets whether the "cherryShop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCherryShop {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cherryShop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCherryShop() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTileAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTileAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Floor != other.Floor) return false;
      if (Inven != other.Inven) return false;
      if (Exterior != other.Exterior) return false;
      if (StoreKey != other.StoreKey) return false;
      if (SaleEventAuthKey != other.SaleEventAuthKey) return false;
      if (CherryShop != other.CherryShop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (HasInven) hash ^= Inven.GetHashCode();
      if (HasExterior) hash ^= Exterior.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasSaleEventAuthKey) hash ^= SaleEventAuthKey.GetHashCode();
      if (HasCherryShop) hash ^= CherryShop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasX) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (HasInven) {
        output.WriteRawTag(40);
        output.WriteBool(Inven);
      }
      if (HasExterior) {
        output.WriteRawTag(48);
        output.WriteBool(Exterior);
      }
      if (HasStoreKey) {
        output.WriteRawTag(56);
        output.WriteInt32(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(66);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasCherryShop) {
        output.WriteRawTag(72);
        output.WriteBool(CherryShop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasX) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (HasInven) {
        output.WriteRawTag(40);
        output.WriteBool(Inven);
      }
      if (HasExterior) {
        output.WriteRawTag(48);
        output.WriteBool(Exterior);
      }
      if (HasStoreKey) {
        output.WriteRawTag(56);
        output.WriteInt32(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(66);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasCherryShop) {
        output.WriteRawTag(72);
        output.WriteBool(CherryShop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (HasInven) {
        size += 1 + 1;
      }
      if (HasExterior) {
        size += 1 + 1;
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaleEventAuthKey);
      }
      if (HasCherryShop) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTileAdd other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      if (other.HasInven) {
        Inven = other.Inven;
      }
      if (other.HasExterior) {
        Exterior = other.Exterior;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasSaleEventAuthKey) {
        SaleEventAuthKey = other.SaleEventAuthKey;
      }
      if (other.HasCherryShop) {
        CherryShop = other.CherryShop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
          case 40: {
            Inven = input.ReadBool();
            break;
          }
          case 48: {
            Exterior = input.ReadBool();
            break;
          }
          case 56: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 66: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 72: {
            CherryShop = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
          case 40: {
            Inven = input.ReadBool();
            break;
          }
          case 48: {
            Exterior = input.ReadBool();
            break;
          }
          case 56: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 66: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 72: {
            CherryShop = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTileToSetAll : pb::IMessage<CTileToSetAll>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTileToSetAll> _parser = new pb::MessageParser<CTileToSetAll>(() => new CTileToSetAll());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTileToSetAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetAll(CTileToSetAll other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      storeKey_ = other.storeKey_;
      saleEventAuthKey_ = other.saleEventAuthKey_;
      floor_ = other.floor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetAll Clone() {
      return new CTileToSetAll(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static string KindDefaultValue = "";

    private string kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_ ?? KindDefaultValue; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return kind_ != null; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kind_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "saleEventAuthKey" field.</summary>
    public const int SaleEventAuthKeyFieldNumber = 3;
    private readonly static string SaleEventAuthKeyDefaultValue = "";

    private string saleEventAuthKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaleEventAuthKey {
      get { return saleEventAuthKey_ ?? SaleEventAuthKeyDefaultValue; }
      set {
        saleEventAuthKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "saleEventAuthKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSaleEventAuthKey {
      get { return saleEventAuthKey_ != null; }
    }
    /// <summary>Clears the value of the "saleEventAuthKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSaleEventAuthKey() {
      saleEventAuthKey_ = null;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 4;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 2) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTileToSetAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTileToSetAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (StoreKey != other.StoreKey) return false;
      if (SaleEventAuthKey != other.SaleEventAuthKey) return false;
      if (Floor != other.Floor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasSaleEventAuthKey) hash ^= SaleEventAuthKey.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(26);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(26);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaleEventAuthKey);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTileToSetAll other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasSaleEventAuthKey) {
        SaleEventAuthKey = other.SaleEventAuthKey;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTileToSetAllThirdStore : pb::IMessage<CTileToSetAllThirdStore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTileToSetAllThirdStore> _parser = new pb::MessageParser<CTileToSetAllThirdStore>(() => new CTileToSetAllThirdStore());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTileToSetAllThirdStore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetAllThirdStore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetAllThirdStore(CTileToSetAllThirdStore other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      storeKey_ = other.storeKey_;
      saleEventAuthKey_ = other.saleEventAuthKey_;
      floor_ = other.floor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetAllThirdStore Clone() {
      return new CTileToSetAllThirdStore(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static string KindDefaultValue = "";

    private string kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_ ?? KindDefaultValue; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return kind_ != null; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kind_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "saleEventAuthKey" field.</summary>
    public const int SaleEventAuthKeyFieldNumber = 3;
    private readonly static string SaleEventAuthKeyDefaultValue = "";

    private string saleEventAuthKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaleEventAuthKey {
      get { return saleEventAuthKey_ ?? SaleEventAuthKeyDefaultValue; }
      set {
        saleEventAuthKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "saleEventAuthKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSaleEventAuthKey {
      get { return saleEventAuthKey_ != null; }
    }
    /// <summary>Clears the value of the "saleEventAuthKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSaleEventAuthKey() {
      saleEventAuthKey_ = null;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 4;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 2) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTileToSetAllThirdStore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTileToSetAllThirdStore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (StoreKey != other.StoreKey) return false;
      if (SaleEventAuthKey != other.SaleEventAuthKey) return false;
      if (Floor != other.Floor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasSaleEventAuthKey) hash ^= SaleEventAuthKey.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(26);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(26);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaleEventAuthKey);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTileToSetAllThirdStore other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasSaleEventAuthKey) {
        SaleEventAuthKey = other.SaleEventAuthKey;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTileToSetDraw : pb::IMessage<CTileToSetDraw>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTileToSetDraw> _parser = new pb::MessageParser<CTileToSetDraw>(() => new CTileToSetDraw());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTileToSetDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetDraw(CTileToSetDraw other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      storeKey_ = other.storeKey_;
      saleEventAuthKey_ = other.saleEventAuthKey_;
      floor_ = other.floor_;
      x_ = other.x_.Clone();
      y_ = other.y_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTileToSetDraw Clone() {
      return new CTileToSetDraw(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static string KindDefaultValue = "";

    private string kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_ ?? KindDefaultValue; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return kind_ != null; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kind_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "saleEventAuthKey" field.</summary>
    public const int SaleEventAuthKeyFieldNumber = 3;
    private readonly static string SaleEventAuthKeyDefaultValue = "";

    private string saleEventAuthKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaleEventAuthKey {
      get { return saleEventAuthKey_ ?? SaleEventAuthKeyDefaultValue; }
      set {
        saleEventAuthKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "saleEventAuthKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSaleEventAuthKey {
      get { return saleEventAuthKey_ != null; }
    }
    /// <summary>Clears the value of the "saleEventAuthKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSaleEventAuthKey() {
      saleEventAuthKey_ = null;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 4;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 2) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_x_codec
        = pb::FieldCodec.ForInt32(48);
    private readonly pbc::RepeatedField<int> x_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> X {
      get { return x_; }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_y_codec
        = pb::FieldCodec.ForInt32(56);
    private readonly pbc::RepeatedField<int> y_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Y {
      get { return y_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTileToSetDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTileToSetDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (StoreKey != other.StoreKey) return false;
      if (SaleEventAuthKey != other.SaleEventAuthKey) return false;
      if (Floor != other.Floor) return false;
      if(!x_.Equals(other.x_)) return false;
      if(!y_.Equals(other.y_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasSaleEventAuthKey) hash ^= SaleEventAuthKey.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      hash ^= x_.GetHashCode();
      hash ^= y_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(26);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      x_.WriteTo(output, _repeated_x_codec);
      y_.WriteTo(output, _repeated_y_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(26);
        output.WriteString(SaleEventAuthKey);
      }
      if (HasFloor) {
        output.WriteRawTag(32);
        output.WriteInt32(Floor);
      }
      x_.WriteTo(ref output, _repeated_x_codec);
      y_.WriteTo(ref output, _repeated_y_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasSaleEventAuthKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaleEventAuthKey);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      size += x_.CalculateSize(_repeated_x_codec);
      size += y_.CalculateSize(_repeated_y_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTileToSetDraw other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasSaleEventAuthKey) {
        SaleEventAuthKey = other.SaleEventAuthKey;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      x_.Add(other.x_);
      y_.Add(other.y_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            x_.AddEntriesFrom(input, _repeated_x_codec);
            break;
          }
          case 58:
          case 56: {
            y_.AddEntriesFrom(input, _repeated_y_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
          case 32: {
            Floor = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            x_.AddEntriesFrom(ref input, _repeated_x_codec);
            break;
          }
          case 58:
          case 56: {
            y_.AddEntriesFrom(ref input, _repeated_y_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRoast : pb::IMessage<CRoast>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRoast> _parser = new pb::MessageParser<CRoast>(() => new CRoast());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRoast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoast(CRoast other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      descId_ = other.descId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoast Clone() {
      return new CRoast(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 2;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    /// <summary>
    /// roast.xml element id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRoast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRoast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (DescId != other.DescId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRoast other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRoastFin : pb::IMessage<CRoastFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRoastFin> _parser = new pb::MessageParser<CRoastFin>(() => new CRoastFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRoastFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastFin(CRoastFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      oneClick_ = other.oneClick_;
      trashBean_ = other.trashBean_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastFin Clone() {
      return new CRoastFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "oneClick" field.</summary>
    public const int OneClickFieldNumber = 2;
    private readonly static bool OneClickDefaultValue = false;

    private bool oneClick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OneClick {
      get { if ((_hasBits0 & 2) != 0) { return oneClick_; } else { return OneClickDefaultValue; } }
      set {
        _hasBits0 |= 2;
        oneClick_ = value;
      }
    }
    /// <summary>Gets whether the "oneClick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOneClick {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "oneClick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneClick() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trashBean" field.</summary>
    public const int TrashBeanFieldNumber = 3;
    private readonly static int TrashBeanDefaultValue = 0;

    private int trashBean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrashBean {
      get { if ((_hasBits0 & 4) != 0) { return trashBean_; } else { return TrashBeanDefaultValue; } }
      set {
        _hasBits0 |= 4;
        trashBean_ = value;
      }
    }
    /// <summary>Gets whether the "trashBean" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrashBean {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trashBean" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrashBean() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRoastFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRoastFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (OneClick != other.OneClick) return false;
      if (TrashBean != other.TrashBean) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasOneClick) hash ^= OneClick.GetHashCode();
      if (HasTrashBean) hash ^= TrashBean.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasOneClick) {
        output.WriteRawTag(16);
        output.WriteBool(OneClick);
      }
      if (HasTrashBean) {
        output.WriteRawTag(24);
        output.WriteInt32(TrashBean);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasOneClick) {
        output.WriteRawTag(16);
        output.WriteBool(OneClick);
      }
      if (HasTrashBean) {
        output.WriteRawTag(24);
        output.WriteInt32(TrashBean);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasOneClick) {
        size += 1 + 1;
      }
      if (HasTrashBean) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrashBean);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRoastFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasOneClick) {
        OneClick = other.OneClick;
      }
      if (other.HasTrashBean) {
        TrashBean = other.TrashBean;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            OneClick = input.ReadBool();
            break;
          }
          case 24: {
            TrashBean = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            OneClick = input.ReadBool();
            break;
          }
          case 24: {
            TrashBean = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChargedRoastHarvest : pb::IMessage<CChargedRoastHarvest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChargedRoastHarvest> _parser = new pb::MessageParser<CChargedRoastHarvest>(() => new CChargedRoastHarvest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChargedRoastHarvest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargedRoastHarvest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargedRoastHarvest(CChargedRoastHarvest other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      trashBean_ = other.trashBean_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargedRoastHarvest Clone() {
      return new CChargedRoastHarvest(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "trashBean" field.</summary>
    public const int TrashBeanFieldNumber = 2;
    private readonly static int TrashBeanDefaultValue = 0;

    private int trashBean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrashBean {
      get { if ((_hasBits0 & 2) != 0) { return trashBean_; } else { return TrashBeanDefaultValue; } }
      set {
        _hasBits0 |= 2;
        trashBean_ = value;
      }
    }
    /// <summary>Gets whether the "trashBean" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrashBean {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "trashBean" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrashBean() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChargedRoastHarvest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChargedRoastHarvest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (TrashBean != other.TrashBean) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasTrashBean) hash ^= TrashBean.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasTrashBean) {
        output.WriteRawTag(16);
        output.WriteInt32(TrashBean);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasTrashBean) {
        output.WriteRawTag(16);
        output.WriteInt32(TrashBean);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasTrashBean) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrashBean);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChargedRoastHarvest other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasTrashBean) {
        TrashBean = other.TrashBean;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            TrashBean = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            TrashBean = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRoastFullCharge : pb::IMessage<CRoastFullCharge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRoastFullCharge> _parser = new pb::MessageParser<CRoastFullCharge>(() => new CRoastFullCharge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRoastFullCharge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastFullCharge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastFullCharge(CRoastFullCharge other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastFullCharge Clone() {
      return new CRoastFullCharge(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRoastFullCharge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRoastFullCharge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRoastFullCharge other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChargedSideDishHarvest : pb::IMessage<CChargedSideDishHarvest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChargedSideDishHarvest> _parser = new pb::MessageParser<CChargedSideDishHarvest>(() => new CChargedSideDishHarvest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChargedSideDishHarvest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargedSideDishHarvest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargedSideDishHarvest(CChargedSideDishHarvest other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargedSideDishHarvest Clone() {
      return new CChargedSideDishHarvest(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChargedSideDishHarvest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChargedSideDishHarvest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChargedSideDishHarvest other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSideDishFullCharge : pb::IMessage<CSideDishFullCharge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSideDishFullCharge> _parser = new pb::MessageParser<CSideDishFullCharge>(() => new CSideDishFullCharge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSideDishFullCharge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSideDishFullCharge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSideDishFullCharge(CSideDishFullCharge other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSideDishFullCharge Clone() {
      return new CSideDishFullCharge(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSideDishFullCharge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSideDishFullCharge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSideDishFullCharge other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChargingSideDishMenuChange : pb::IMessage<CChargingSideDishMenuChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChargingSideDishMenuChange> _parser = new pb::MessageParser<CChargingSideDishMenuChange>(() => new CChargingSideDishMenuChange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChargingSideDishMenuChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargingSideDishMenuChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargingSideDishMenuChange(CChargingSideDishMenuChange other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      descId_ = other.descId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargingSideDishMenuChange Clone() {
      return new CChargingSideDishMenuChange(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 2;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    /// <summary>
    /// sidedish.xml element id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChargingSideDishMenuChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChargingSideDishMenuChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (DescId != other.DescId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChargingSideDishMenuChange other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CShortenDutchLiquidMake : pb::IMessage<CShortenDutchLiquidMake>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CShortenDutchLiquidMake> _parser = new pb::MessageParser<CShortenDutchLiquidMake>(() => new CShortenDutchLiquidMake());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CShortenDutchLiquidMake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CShortenDutchLiquidMake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CShortenDutchLiquidMake(CShortenDutchLiquidMake other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      isTutorial_ = other.isTutorial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CShortenDutchLiquidMake Clone() {
      return new CShortenDutchLiquidMake(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "isTutorial" field.</summary>
    public const int IsTutorialFieldNumber = 4;
    private readonly static bool IsTutorialDefaultValue = false;

    private bool isTutorial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTutorial {
      get { if ((_hasBits0 & 8) != 0) { return isTutorial_; } else { return IsTutorialDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isTutorial_ = value;
      }
    }
    /// <summary>Gets whether the "isTutorial" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTutorial {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "isTutorial" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTutorial() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CShortenDutchLiquidMake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CShortenDutchLiquidMake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      if (IsTutorial != other.IsTutorial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasIsTutorial) hash ^= IsTutorial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasIsTutorial) {
        output.WriteRawTag(32);
        output.WriteBool(IsTutorial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasIsTutorial) {
        output.WriteRawTag(32);
        output.WriteBool(IsTutorial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasIsTutorial) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CShortenDutchLiquidMake other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasIsTutorial) {
        IsTutorial = other.IsTutorial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 32: {
            IsTutorial = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 32: {
            IsTutorial = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDutchLiquidMake : pb::IMessage<CDutchLiquidMake>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDutchLiquidMake> _parser = new pb::MessageParser<CDutchLiquidMake>(() => new CDutchLiquidMake());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDutchLiquidMake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidMake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidMake(CDutchLiquidMake other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      bean_ = other.bean_;
      water_ = other.water_;
      isTutorial_ = other.isTutorial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidMake Clone() {
      return new CDutchLiquidMake(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bean" field.</summary>
    public const int BeanFieldNumber = 3;
    private readonly static int BeanDefaultValue = 0;

    private int bean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bean {
      get { if ((_hasBits0 & 4) != 0) { return bean_; } else { return BeanDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bean_ = value;
      }
    }
    /// <summary>Gets whether the "bean" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBean {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bean" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBean() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "water" field.</summary>
    public const int WaterFieldNumber = 4;
    private readonly static int WaterDefaultValue = 0;

    private int water_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Water {
      get { if ((_hasBits0 & 8) != 0) { return water_; } else { return WaterDefaultValue; } }
      set {
        _hasBits0 |= 8;
        water_ = value;
      }
    }
    /// <summary>Gets whether the "water" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWater {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "water" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWater() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "isTutorial" field.</summary>
    public const int IsTutorialFieldNumber = 5;
    private readonly static bool IsTutorialDefaultValue = false;

    private bool isTutorial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTutorial {
      get { if ((_hasBits0 & 16) != 0) { return isTutorial_; } else { return IsTutorialDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isTutorial_ = value;
      }
    }
    /// <summary>Gets whether the "isTutorial" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTutorial {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "isTutorial" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTutorial() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDutchLiquidMake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDutchLiquidMake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      if (Bean != other.Bean) return false;
      if (Water != other.Water) return false;
      if (IsTutorial != other.IsTutorial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasBean) hash ^= Bean.GetHashCode();
      if (HasWater) hash ^= Water.GetHashCode();
      if (HasIsTutorial) hash ^= IsTutorial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasBean) {
        output.WriteRawTag(24);
        output.WriteInt32(Bean);
      }
      if (HasWater) {
        output.WriteRawTag(32);
        output.WriteInt32(Water);
      }
      if (HasIsTutorial) {
        output.WriteRawTag(40);
        output.WriteBool(IsTutorial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasBean) {
        output.WriteRawTag(24);
        output.WriteInt32(Bean);
      }
      if (HasWater) {
        output.WriteRawTag(32);
        output.WriteInt32(Water);
      }
      if (HasIsTutorial) {
        output.WriteRawTag(40);
        output.WriteBool(IsTutorial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasBean) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bean);
      }
      if (HasWater) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Water);
      }
      if (HasIsTutorial) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDutchLiquidMake other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasBean) {
        Bean = other.Bean;
      }
      if (other.HasWater) {
        Water = other.Water;
      }
      if (other.HasIsTutorial) {
        IsTutorial = other.IsTutorial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            Bean = input.ReadInt32();
            break;
          }
          case 32: {
            Water = input.ReadInt32();
            break;
          }
          case 40: {
            IsTutorial = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            Bean = input.ReadInt32();
            break;
          }
          case 32: {
            Water = input.ReadInt32();
            break;
          }
          case 40: {
            IsTutorial = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDutchCoffee : pb::IMessage<CDutchCoffee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDutchCoffee> _parser = new pb::MessageParser<CDutchCoffee>(() => new CDutchCoffee());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDutchCoffee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchCoffee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchCoffee(CDutchCoffee other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      descId_ = other.descId_;
      dutchType_ = other.dutchType_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchCoffee Clone() {
      return new CDutchCoffee(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 2;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    /// <summary>
    /// coffee.xml element id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "dutchType" field.</summary>
    public const int DutchTypeFieldNumber = 3;
    private readonly static string DutchTypeDefaultValue = "";

    private string dutchType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DutchType {
      get { return dutchType_ ?? DutchTypeDefaultValue; }
      set {
        dutchType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dutchType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDutchType {
      get { return dutchType_ != null; }
    }
    /// <summary>Clears the value of the "dutchType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDutchType() {
      dutchType_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDutchCoffee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDutchCoffee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (DescId != other.DescId) return false;
      if (DutchType != other.DutchType) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasDutchType) hash ^= DutchType.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasDutchType) {
        output.WriteRawTag(26);
        output.WriteString(DutchType);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasDutchType) {
        output.WriteRawTag(26);
        output.WriteString(DutchType);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasDutchType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DutchType);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDutchCoffee other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasDutchType) {
        DutchType = other.DutchType;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 26: {
            DutchType = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 26: {
            DutchType = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDutchLiquidSellStart : pb::IMessage<CDutchLiquidSellStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDutchLiquidSellStart> _parser = new pb::MessageParser<CDutchLiquidSellStart>(() => new CDutchLiquidSellStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDutchLiquidSellStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSellStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSellStart(CDutchLiquidSellStart other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      invenElems_ = other.invenElems_.Clone();
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSellStart Clone() {
      return new CDutchLiquidSellStart(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "invenElems" field.</summary>
    public const int InvenElemsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_invenElems_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> invenElems_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InvenElems {
      get { return invenElems_; }
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDutchLiquidSellStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDutchLiquidSellStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if(!invenElems_.Equals(other.invenElems_)) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      hash ^= invenElems_.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      invenElems_.WriteTo(output, _repeated_invenElems_codec);
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      invenElems_.WriteTo(ref output, _repeated_invenElems_codec);
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      size += invenElems_.CalculateSize(_repeated_invenElems_codec);
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDutchLiquidSellStart other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      invenElems_.Add(other.invenElems_);
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            invenElems_.AddEntriesFrom(input, _repeated_invenElems_codec);
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            invenElems_.AddEntriesFrom(ref input, _repeated_invenElems_codec);
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDutchLiquidSell : pb::IMessage<CDutchLiquidSell>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDutchLiquidSell> _parser = new pb::MessageParser<CDutchLiquidSell>(() => new CDutchLiquidSell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDutchLiquidSell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSell(CDutchLiquidSell other) : this() {
      objInfo_ = other.objInfo_.Clone();
      count_ = other.count_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSell Clone() {
      return new CDutchLiquidSell(this);
    }

    /// <summary>Field number for the "objInfo" field.</summary>
    public const int ObjInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_objInfo_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> objInfo_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ObjInfo {
      get { return objInfo_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_count_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Count {
      get { return count_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDutchLiquidSell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDutchLiquidSell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objInfo_.Equals(other.objInfo_)) return false;
      if(!count_.Equals(other.count_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objInfo_.GetHashCode();
      hash ^= count_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objInfo_.WriteTo(output, _repeated_objInfo_codec);
      count_.WriteTo(output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objInfo_.WriteTo(ref output, _repeated_objInfo_codec);
      count_.WriteTo(ref output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objInfo_.CalculateSize(_repeated_objInfo_codec);
      size += count_.CalculateSize(_repeated_count_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDutchLiquidSell other) {
      if (other == null) {
        return;
      }
      objInfo_.Add(other.objInfo_);
      count_.Add(other.count_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objInfo_.AddEntriesFrom(input, _repeated_objInfo_codec);
            break;
          }
          case 18:
          case 16: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objInfo_.AddEntriesFrom(ref input, _repeated_objInfo_codec);
            break;
          }
          case 18:
          case 16: {
            count_.AddEntriesFrom(ref input, _repeated_count_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDutchLiquidMakeFin : pb::IMessage<CDutchLiquidMakeFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDutchLiquidMakeFin> _parser = new pb::MessageParser<CDutchLiquidMakeFin>(() => new CDutchLiquidMakeFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDutchLiquidMakeFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidMakeFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidMakeFin(CDutchLiquidMakeFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidMakeFin Clone() {
      return new CDutchLiquidMakeFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDutchLiquidMakeFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDutchLiquidMakeFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDutchLiquidMakeFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDutchLiquidSellFin : pb::IMessage<CDutchLiquidSellFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDutchLiquidSellFin> _parser = new pb::MessageParser<CDutchLiquidSellFin>(() => new CDutchLiquidSellFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDutchLiquidSellFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSellFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSellFin(CDutchLiquidSellFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDutchLiquidSellFin Clone() {
      return new CDutchLiquidSellFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDutchLiquidSellFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDutchLiquidSellFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDutchLiquidSellFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffee : pb::IMessage<CCoffee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffee> _parser = new pb::MessageParser<CCoffee>(() => new CCoffee());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffee(CCoffee other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      descId_ = other.descId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffee Clone() {
      return new CCoffee(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 2;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    /// <summary>
    /// coffee.xml element id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (DescId != other.DescId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffee other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffeeSell : pb::IMessage<CCoffeeSell>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffeeSell> _parser = new pb::MessageParser<CCoffeeSell>(() => new CCoffeeSell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffeeSell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeSell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeSell(CCoffeeSell other) : this() {
      objInfo_ = other.objInfo_.Clone();
      count_ = other.count_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeSell Clone() {
      return new CCoffeeSell(this);
    }

    /// <summary>Field number for the "objInfo" field.</summary>
    public const int ObjInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_objInfo_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> objInfo_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ObjInfo {
      get { return objInfo_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_count_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Count {
      get { return count_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffeeSell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffeeSell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objInfo_.Equals(other.objInfo_)) return false;
      if(!count_.Equals(other.count_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objInfo_.GetHashCode();
      hash ^= count_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objInfo_.WriteTo(output, _repeated_objInfo_codec);
      count_.WriteTo(output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objInfo_.WriteTo(ref output, _repeated_objInfo_codec);
      count_.WriteTo(ref output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objInfo_.CalculateSize(_repeated_objInfo_codec);
      size += count_.CalculateSize(_repeated_count_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffeeSell other) {
      if (other == null) {
        return;
      }
      objInfo_.Add(other.objInfo_);
      count_.Add(other.count_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objInfo_.AddEntriesFrom(input, _repeated_objInfo_codec);
            break;
          }
          case 18:
          case 16: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objInfo_.AddEntriesFrom(ref input, _repeated_objInfo_codec);
            break;
          }
          case 18:
          case 16: {
            count_.AddEntriesFrom(ref input, _repeated_count_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffeeFin : pb::IMessage<CCoffeeFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffeeFin> _parser = new pb::MessageParser<CCoffeeFin>(() => new CCoffeeFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffeeFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeFin(CCoffeeFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeFin Clone() {
      return new CCoffeeFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffeeFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffeeFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffeeFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CShortenCoffeeSell : pb::IMessage<CShortenCoffeeSell>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CShortenCoffeeSell> _parser = new pb::MessageParser<CShortenCoffeeSell>(() => new CShortenCoffeeSell());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CShortenCoffeeSell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CShortenCoffeeSell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CShortenCoffeeSell(CShortenCoffeeSell other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CShortenCoffeeSell Clone() {
      return new CShortenCoffeeSell(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CShortenCoffeeSell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CShortenCoffeeSell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CShortenCoffeeSell other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBaristaGuideDone : pb::IMessage<CBaristaGuideDone>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBaristaGuideDone> _parser = new pb::MessageParser<CBaristaGuideDone>(() => new CBaristaGuideDone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBaristaGuideDone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaGuideDone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaGuideDone(CBaristaGuideDone other) : this() {
      descId_ = other.descId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaGuideDone Clone() {
      return new CBaristaGuideDone(this);
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 1;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBaristaGuideDone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBaristaGuideDone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DescId != other.DescId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBaristaGuideDone other) {
      if (other == null) {
        return;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBaristaTestProgress : pb::IMessage<CBaristaTestProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBaristaTestProgress> _parser = new pb::MessageParser<CBaristaTestProgress>(() => new CBaristaTestProgress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBaristaTestProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestProgress(CBaristaTestProgress other) : this() {
      _hasBits0 = other._hasBits0;
      descId_ = other.descId_;
      testIdx_ = other.testIdx_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestProgress Clone() {
      return new CBaristaTestProgress(this);
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 1;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "testIdx" field.</summary>
    public const int TestIdxFieldNumber = 2;
    private readonly static int TestIdxDefaultValue = 0;

    private int testIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestIdx {
      get { if ((_hasBits0 & 1) != 0) { return testIdx_; } else { return TestIdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        testIdx_ = value;
      }
    }
    /// <summary>Gets whether the "testIdx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "testIdx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestIdx() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private readonly static int ScoreDefaultValue = 0;

    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScore() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBaristaTestProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBaristaTestProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DescId != other.DescId) return false;
      if (TestIdx != other.TestIdx) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasTestIdx) hash ^= TestIdx.GetHashCode();
      if (HasScore) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasTestIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(TestIdx);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasTestIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(TestIdx);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasTestIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestIdx);
      }
      if (HasScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBaristaTestProgress other) {
      if (other == null) {
        return;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasTestIdx) {
        TestIdx = other.TestIdx;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 16: {
            TestIdx = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 16: {
            TestIdx = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBaristaTestQuit : pb::IMessage<CBaristaTestQuit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBaristaTestQuit> _parser = new pb::MessageParser<CBaristaTestQuit>(() => new CBaristaTestQuit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBaristaTestQuit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestQuit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestQuit(CBaristaTestQuit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestQuit Clone() {
      return new CBaristaTestQuit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBaristaTestQuit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBaristaTestQuit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBaristaTestQuit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CBaristaTestUpgrade : pb::IMessage<CBaristaTestUpgrade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBaristaTestUpgrade> _parser = new pb::MessageParser<CBaristaTestUpgrade>(() => new CBaristaTestUpgrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBaristaTestUpgrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestUpgrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestUpgrade(CBaristaTestUpgrade other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestUpgrade Clone() {
      return new CBaristaTestUpgrade(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBaristaTestUpgrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBaristaTestUpgrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBaristaTestUpgrade other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CBaristaTestUpgradeByCash : pb::IMessage<CBaristaTestUpgradeByCash>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBaristaTestUpgradeByCash> _parser = new pb::MessageParser<CBaristaTestUpgradeByCash>(() => new CBaristaTestUpgradeByCash());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBaristaTestUpgradeByCash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestUpgradeByCash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestUpgradeByCash(CBaristaTestUpgradeByCash other) : this() {
      _hasBits0 = other._hasBits0;
      descId_ = other.descId_;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestUpgradeByCash Clone() {
      return new CBaristaTestUpgradeByCash(this);
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 1;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBaristaTestUpgradeByCash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBaristaTestUpgradeByCash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DescId != other.DescId) return false;
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBaristaTestUpgradeByCash other) {
      if (other == null) {
        return;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBaristaTestRetry : pb::IMessage<CBaristaTestRetry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBaristaTestRetry> _parser = new pb::MessageParser<CBaristaTestRetry>(() => new CBaristaTestRetry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBaristaTestRetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestRetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestRetry(CBaristaTestRetry other) : this() {
      _hasBits0 = other._hasBits0;
      descId_ = other.descId_;
      testIdx_ = other.testIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestRetry Clone() {
      return new CBaristaTestRetry(this);
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 1;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "testIdx" field.</summary>
    public const int TestIdxFieldNumber = 2;
    private readonly static int TestIdxDefaultValue = 0;

    private int testIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestIdx {
      get { if ((_hasBits0 & 1) != 0) { return testIdx_; } else { return TestIdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        testIdx_ = value;
      }
    }
    /// <summary>Gets whether the "testIdx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "testIdx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestIdx() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBaristaTestRetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBaristaTestRetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DescId != other.DescId) return false;
      if (TestIdx != other.TestIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasTestIdx) hash ^= TestIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasTestIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(TestIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasTestIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(TestIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasTestIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBaristaTestRetry other) {
      if (other == null) {
        return;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasTestIdx) {
        TestIdx = other.TestIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 16: {
            TestIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 16: {
            TestIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBaristaTestStatus : pb::IMessage<CBaristaTestStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBaristaTestStatus> _parser = new pb::MessageParser<CBaristaTestStatus>(() => new CBaristaTestStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBaristaTestStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestStatus(CBaristaTestStatus other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBaristaTestStatus Clone() {
      return new CBaristaTestStatus(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBaristaTestStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBaristaTestStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBaristaTestStatus other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronOrderDone : pb::IMessage<CPatronOrderDone>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronOrderDone> _parser = new pb::MessageParser<CPatronOrderDone>(() => new CPatronOrderDone());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronOrderDone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderDone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderDone(CPatronOrderDone other) : this() {
      _hasBits0 = other._hasBits0;
      patronId_ = other.patronId_;
      orderId_ = other.orderId_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderDone Clone() {
      return new CPatronOrderDone(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orderId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "orderId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private readonly static int ScoreDefaultValue = 0;

    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 1;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScore() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronOrderDone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronOrderDone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      if (OrderId != other.OrderId) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasScore) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (HasOrderId) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (HasOrderId) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronOrderDone other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronOrderDoneByMachine : pb::IMessage<CPatronOrderDoneByMachine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronOrderDoneByMachine> _parser = new pb::MessageParser<CPatronOrderDoneByMachine>(() => new CPatronOrderDoneByMachine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronOrderDoneByMachine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderDoneByMachine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderDoneByMachine(CPatronOrderDoneByMachine other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      patronId_ = other.patronId_;
      orderId_ = other.orderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderDoneByMachine Clone() {
      return new CPatronOrderDoneByMachine(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 2;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 3;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orderId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "orderId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderId() {
      orderId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronOrderDoneByMachine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronOrderDoneByMachine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (PatronId != other.PatronId) return false;
      if (OrderId != other.OrderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasPatronId) {
        output.WriteRawTag(18);
        output.WriteString(PatronId);
      }
      if (HasOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasPatronId) {
        output.WriteRawTag(18);
        output.WriteString(PatronId);
      }
      if (HasOrderId) {
        output.WriteRawTag(26);
        output.WriteString(OrderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronOrderDoneByMachine other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            PatronId = input.ReadString();
            break;
          }
          case 26: {
            OrderId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            PatronId = input.ReadString();
            break;
          }
          case 26: {
            OrderId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronOrderEvaluate : pb::IMessage<CPatronOrderEvaluate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronOrderEvaluate> _parser = new pb::MessageParser<CPatronOrderEvaluate>(() => new CPatronOrderEvaluate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronOrderEvaluate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderEvaluate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderEvaluate(CPatronOrderEvaluate other) : this() {
      _hasBits0 = other._hasBits0;
      patronId_ = other.patronId_;
      orderId_ = other.orderId_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronOrderEvaluate Clone() {
      return new CPatronOrderEvaluate(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private readonly static string OrderIdDefaultValue = "";

    private string orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_ ?? OrderIdDefaultValue; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "orderId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderId {
      get { return orderId_ != null; }
    }
    /// <summary>Clears the value of the "orderId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderId() {
      orderId_ = null;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private readonly static int ScoreDefaultValue = 0;

    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 1;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScore() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronOrderEvaluate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronOrderEvaluate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      if (OrderId != other.OrderId) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (HasOrderId) hash ^= OrderId.GetHashCode();
      if (HasScore) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (HasOrderId) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (HasOrderId) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (HasOrderId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (HasScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronOrderEvaluate other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      if (other.HasOrderId) {
        OrderId = other.OrderId;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetSpecialPatronPresent : pb::IMessage<CGetSpecialPatronPresent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetSpecialPatronPresent> _parser = new pb::MessageParser<CGetSpecialPatronPresent>(() => new CGetSpecialPatronPresent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetSpecialPatronPresent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetSpecialPatronPresent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetSpecialPatronPresent(CGetSpecialPatronPresent other) : this() {
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetSpecialPatronPresent Clone() {
      return new CGetSpecialPatronPresent(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetSpecialPatronPresent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetSpecialPatronPresent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetSpecialPatronPresent other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSkipPatronEvent : pb::IMessage<CSkipPatronEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSkipPatronEvent> _parser = new pb::MessageParser<CSkipPatronEvent>(() => new CSkipPatronEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSkipPatronEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSkipPatronEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSkipPatronEvent(CSkipPatronEvent other) : this() {
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSkipPatronEvent Clone() {
      return new CSkipPatronEvent(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSkipPatronEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSkipPatronEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSkipPatronEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyPatronItem : pb::IMessage<CBuyPatronItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyPatronItem> _parser = new pb::MessageParser<CBuyPatronItem>(() => new CBuyPatronItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyPatronItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPatronItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPatronItem(CBuyPatronItem other) : this() {
      patronId_ = other.patronId_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPatronItem Clone() {
      return new CBuyPatronItem(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyPatronItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyPatronItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyPatronItem other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CFulfillPatronFavor : pb::IMessage<CFulfillPatronFavor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CFulfillPatronFavor> _parser = new pb::MessageParser<CFulfillPatronFavor>(() => new CFulfillPatronFavor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CFulfillPatronFavor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFulfillPatronFavor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFulfillPatronFavor(CFulfillPatronFavor other) : this() {
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFulfillPatronFavor Clone() {
      return new CFulfillPatronFavor(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CFulfillPatronFavor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CFulfillPatronFavor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CFulfillPatronFavor other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetPatronPresent : pb::IMessage<CGetPatronPresent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetPatronPresent> _parser = new pb::MessageParser<CGetPatronPresent>(() => new CGetPatronPresent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetPatronPresent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetPatronPresent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetPatronPresent(CGetPatronPresent other) : this() {
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetPatronPresent Clone() {
      return new CGetPatronPresent(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetPatronPresent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetPatronPresent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetPatronPresent other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CFloorAddTrash : pb::IMessage<CFloorAddTrash>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CFloorAddTrash> _parser = new pb::MessageParser<CFloorAddTrash>(() => new CFloorAddTrash());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CFloorAddTrash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFloorAddTrash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFloorAddTrash(CFloorAddTrash other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFloorAddTrash Clone() {
      return new CFloorAddTrash(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CFloorAddTrash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CFloorAddTrash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CFloorAddTrash other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCleanTable : pb::IMessage<CCleanTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCleanTable> _parser = new pb::MessageParser<CCleanTable>(() => new CCleanTable());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCleanTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanTable(CCleanTable other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanTable Clone() {
      return new CCleanTable(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCleanTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCleanTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCleanTable other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCleanRecycle : pb::IMessage<CCleanRecycle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCleanRecycle> _parser = new pb::MessageParser<CCleanRecycle>(() => new CCleanRecycle());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCleanRecycle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanRecycle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanRecycle(CCleanRecycle other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanRecycle Clone() {
      return new CCleanRecycle(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCleanRecycle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCleanRecycle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCleanRecycle other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCleanFloor : pb::IMessage<CCleanFloor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCleanFloor> _parser = new pb::MessageParser<CCleanFloor>(() => new CCleanFloor());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCleanFloor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanFloor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanFloor(CCleanFloor other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanFloor Clone() {
      return new CCleanFloor(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCleanFloor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCleanFloor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCleanFloor other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCleanMachine : pb::IMessage<CCleanMachine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCleanMachine> _parser = new pb::MessageParser<CCleanMachine>(() => new CCleanMachine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCleanMachine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanMachine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanMachine(CCleanMachine other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanMachine Clone() {
      return new CCleanMachine(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCleanMachine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCleanMachine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCleanMachine other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCancel : pb::IMessage<CCancel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCancel> _parser = new pb::MessageParser<CCancel>(() => new CCancel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCancel(CCancel other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCancel Clone() {
      return new CCancel(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCancel other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRoastShorten : pb::IMessage<CRoastShorten>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRoastShorten> _parser = new pb::MessageParser<CRoastShorten>(() => new CRoastShorten());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRoastShorten> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastShorten() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastShorten(CRoastShorten other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      leftSec_ = other.leftSec_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastShorten Clone() {
      return new CRoastShorten(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leftSec" field.</summary>
    public const int LeftSecFieldNumber = 2;
    private readonly static int LeftSecDefaultValue = 0;

    private int leftSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSec {
      get { if ((_hasBits0 & 2) != 0) { return leftSec_; } else { return LeftSecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leftSec_ = value;
      }
    }
    /// <summary>Gets whether the "leftSec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftSec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leftSec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftSec() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 3;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRoastShorten);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRoastShorten other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (LeftSec != other.LeftSec) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasLeftSec) hash ^= LeftSec.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasLeftSec) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSec);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasLeftSec) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSec);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasLeftSec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSec);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRoastShorten other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasLeftSec) {
        LeftSec = other.LeftSec;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRoastRevive : pb::IMessage<CRoastRevive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRoastRevive> _parser = new pb::MessageParser<CRoastRevive>(() => new CRoastRevive());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRoastRevive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastRevive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastRevive(CRoastRevive other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastRevive Clone() {
      return new CRoastRevive(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRoastRevive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRoastRevive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRoastRevive other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CStaffHire : pb::IMessage<CStaffHire>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStaffHire> _parser = new pb::MessageParser<CStaffHire>(() => new CStaffHire());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStaffHire> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffHire() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffHire(CStaffHire other) : this() {
      _hasBits0 = other._hasBits0;
      staffId_ = other.staffId_;
      body_ = other.body_;
      name_ = other.name_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffHire Clone() {
      return new CStaffHire(this);
    }

    /// <summary>Field number for the "staffId" field.</summary>
    public const int StaffIdFieldNumber = 1;
    private readonly static int StaffIdDefaultValue = 0;

    private int staffId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaffId {
      get { if ((_hasBits0 & 1) != 0) { return staffId_; } else { return StaffIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        staffId_ = value;
      }
    }
    /// <summary>Gets whether the "staffId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStaffId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "staffId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStaffId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private readonly static string BodyDefaultValue = "";

    private string body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_ ?? BodyDefaultValue; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "body" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBody {
      get { return body_ != null; }
    }
    /// <summary>Clears the value of the "body" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      body_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStaffHire);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStaffHire other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StaffId != other.StaffId) return false;
      if (Body != other.Body) return false;
      if (Name != other.Name) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStaffId) hash ^= StaffId.GetHashCode();
      if (HasBody) hash ^= Body.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      if (HasBody) {
        output.WriteRawTag(18);
        output.WriteString(Body);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      if (HasBody) {
        output.WriteRawTag(18);
        output.WriteString(Body);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStaffId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaffId);
      }
      if (HasBody) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStaffHire other) {
      if (other == null) {
        return;
      }
      if (other.HasStaffId) {
        StaffId = other.StaffId;
      }
      if (other.HasBody) {
        Body = other.Body;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 18: {
            Body = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 18: {
            Body = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CStaffDressUp : pb::IMessage<CStaffDressUp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStaffDressUp> _parser = new pb::MessageParser<CStaffDressUp>(() => new CStaffDressUp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStaffDressUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffDressUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffDressUp(CStaffDressUp other) : this() {
      _hasBits0 = other._hasBits0;
      staffId_ = other.staffId_;
      parts_ = other.parts_.Clone();
      fromInvens_ = other.fromInvens_.Clone();
      motion_ = other.motion_;
      storeKey_ = other.storeKey_;
      cost_ = other.cost_;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffDressUp Clone() {
      return new CStaffDressUp(this);
    }

    /// <summary>Field number for the "staffId" field.</summary>
    public const int StaffIdFieldNumber = 1;
    private readonly static int StaffIdDefaultValue = 0;

    private int staffId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaffId {
      get { if ((_hasBits0 & 1) != 0) { return staffId_; } else { return StaffIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        staffId_ = value;
      }
    }
    /// <summary>Gets whether the "staffId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStaffId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "staffId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStaffId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "parts" field.</summary>
    public const int PartsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_parts_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> parts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Parts {
      get { return parts_; }
    }

    /// <summary>Field number for the "fromInvens" field.</summary>
    public const int FromInvensFieldNumber = 3;
    private static readonly pb::FieldCodec<bool> _repeated_fromInvens_codec
        = pb::FieldCodec.ForBool(24);
    private readonly pbc::RepeatedField<bool> fromInvens_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> FromInvens {
      get { return fromInvens_; }
    }

    /// <summary>Field number for the "motion" field.</summary>
    public const int MotionFieldNumber = 4;
    private readonly static string MotionDefaultValue = "";

    private string motion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Motion {
      get { return motion_ ?? MotionDefaultValue; }
      set {
        motion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "motion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMotion {
      get { return motion_ != null; }
    }
    /// <summary>Clears the value of the "motion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMotion() {
      motion_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 5;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 6;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { if ((_hasBits0 & 4) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCost {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 7;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 8) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStaffDressUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStaffDressUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StaffId != other.StaffId) return false;
      if(!parts_.Equals(other.parts_)) return false;
      if(!fromInvens_.Equals(other.fromInvens_)) return false;
      if (Motion != other.Motion) return false;
      if (StoreKey != other.StoreKey) return false;
      if (Cost != other.Cost) return false;
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStaffId) hash ^= StaffId.GetHashCode();
      hash ^= parts_.GetHashCode();
      hash ^= fromInvens_.GetHashCode();
      if (HasMotion) hash ^= Motion.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      parts_.WriteTo(output, _repeated_parts_codec);
      fromInvens_.WriteTo(output, _repeated_fromInvens_codec);
      if (HasMotion) {
        output.WriteRawTag(34);
        output.WriteString(Motion);
      }
      if (HasStoreKey) {
        output.WriteRawTag(40);
        output.WriteInt32(StoreKey);
      }
      if (HasCost) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (HasCash) {
        output.WriteRawTag(56);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      parts_.WriteTo(ref output, _repeated_parts_codec);
      fromInvens_.WriteTo(ref output, _repeated_fromInvens_codec);
      if (HasMotion) {
        output.WriteRawTag(34);
        output.WriteString(Motion);
      }
      if (HasStoreKey) {
        output.WriteRawTag(40);
        output.WriteInt32(StoreKey);
      }
      if (HasCost) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (HasCash) {
        output.WriteRawTag(56);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStaffId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaffId);
      }
      size += parts_.CalculateSize(_repeated_parts_codec);
      size += fromInvens_.CalculateSize(_repeated_fromInvens_codec);
      if (HasMotion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Motion);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStaffDressUp other) {
      if (other == null) {
        return;
      }
      if (other.HasStaffId) {
        StaffId = other.StaffId;
      }
      parts_.Add(other.parts_);
      fromInvens_.Add(other.fromInvens_);
      if (other.HasMotion) {
        Motion = other.Motion;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 18: {
            parts_.AddEntriesFrom(input, _repeated_parts_codec);
            break;
          }
          case 26:
          case 24: {
            fromInvens_.AddEntriesFrom(input, _repeated_fromInvens_codec);
            break;
          }
          case 34: {
            Motion = input.ReadString();
            break;
          }
          case 40: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 18: {
            parts_.AddEntriesFrom(ref input, _repeated_parts_codec);
            break;
          }
          case 26:
          case 24: {
            fromInvens_.AddEntriesFrom(ref input, _repeated_fromInvens_codec);
            break;
          }
          case 34: {
            Motion = input.ReadString();
            break;
          }
          case 40: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CStaffBodyAndName : pb::IMessage<CStaffBodyAndName>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStaffBodyAndName> _parser = new pb::MessageParser<CStaffBodyAndName>(() => new CStaffBodyAndName());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStaffBodyAndName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffBodyAndName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffBodyAndName(CStaffBodyAndName other) : this() {
      _hasBits0 = other._hasBits0;
      staffId_ = other.staffId_;
      body_ = other.body_;
      name_ = other.name_;
      storeKey_ = other.storeKey_;
      syncMyName_ = other.syncMyName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffBodyAndName Clone() {
      return new CStaffBodyAndName(this);
    }

    /// <summary>Field number for the "staffId" field.</summary>
    public const int StaffIdFieldNumber = 1;
    private readonly static int StaffIdDefaultValue = 0;

    private int staffId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaffId {
      get { if ((_hasBits0 & 1) != 0) { return staffId_; } else { return StaffIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        staffId_ = value;
      }
    }
    /// <summary>Gets whether the "staffId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStaffId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "staffId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStaffId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private readonly static string BodyDefaultValue = "";

    private string body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_ ?? BodyDefaultValue; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "body" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBody {
      get { return body_ != null; }
    }
    /// <summary>Clears the value of the "body" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      body_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "syncMyName" field.</summary>
    public const int SyncMyNameFieldNumber = 5;
    private readonly static bool SyncMyNameDefaultValue = false;

    private bool syncMyName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncMyName {
      get { if ((_hasBits0 & 4) != 0) { return syncMyName_; } else { return SyncMyNameDefaultValue; } }
      set {
        _hasBits0 |= 4;
        syncMyName_ = value;
      }
    }
    /// <summary>Gets whether the "syncMyName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSyncMyName {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "syncMyName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSyncMyName() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStaffBodyAndName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStaffBodyAndName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StaffId != other.StaffId) return false;
      if (Body != other.Body) return false;
      if (Name != other.Name) return false;
      if (StoreKey != other.StoreKey) return false;
      if (SyncMyName != other.SyncMyName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStaffId) hash ^= StaffId.GetHashCode();
      if (HasBody) hash ^= Body.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasSyncMyName) hash ^= SyncMyName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      if (HasBody) {
        output.WriteRawTag(18);
        output.WriteString(Body);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (HasSyncMyName) {
        output.WriteRawTag(40);
        output.WriteBool(SyncMyName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      if (HasBody) {
        output.WriteRawTag(18);
        output.WriteString(Body);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (HasSyncMyName) {
        output.WriteRawTag(40);
        output.WriteBool(SyncMyName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStaffId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaffId);
      }
      if (HasBody) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasSyncMyName) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStaffBodyAndName other) {
      if (other == null) {
        return;
      }
      if (other.HasStaffId) {
        StaffId = other.StaffId;
      }
      if (other.HasBody) {
        Body = other.Body;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasSyncMyName) {
        SyncMyName = other.SyncMyName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 18: {
            Body = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 40: {
            SyncMyName = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 18: {
            Body = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 40: {
            SyncMyName = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CStaffFullCharge : pb::IMessage<CStaffFullCharge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStaffFullCharge> _parser = new pb::MessageParser<CStaffFullCharge>(() => new CStaffFullCharge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStaffFullCharge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffFullCharge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffFullCharge(CStaffFullCharge other) : this() {
      _hasBits0 = other._hasBits0;
      staffId_ = other.staffId_;
      incExp_ = other.incExp_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffFullCharge Clone() {
      return new CStaffFullCharge(this);
    }

    /// <summary>Field number for the "staffId" field.</summary>
    public const int StaffIdFieldNumber = 1;
    private readonly static int StaffIdDefaultValue = 0;

    private int staffId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaffId {
      get { if ((_hasBits0 & 1) != 0) { return staffId_; } else { return StaffIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        staffId_ = value;
      }
    }
    /// <summary>Gets whether the "staffId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStaffId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "staffId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStaffId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "incExp" field.</summary>
    public const int IncExpFieldNumber = 2;
    private readonly static bool IncExpDefaultValue = false;

    private bool incExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncExp {
      get { if ((_hasBits0 & 2) != 0) { return incExp_; } else { return IncExpDefaultValue; } }
      set {
        _hasBits0 |= 2;
        incExp_ = value;
      }
    }
    /// <summary>Gets whether the "incExp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIncExp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "incExp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIncExp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStaffFullCharge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStaffFullCharge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StaffId != other.StaffId) return false;
      if (IncExp != other.IncExp) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStaffId) hash ^= StaffId.GetHashCode();
      if (HasIncExp) hash ^= IncExp.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      if (HasIncExp) {
        output.WriteRawTag(16);
        output.WriteBool(IncExp);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      if (HasIncExp) {
        output.WriteRawTag(16);
        output.WriteBool(IncExp);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStaffId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaffId);
      }
      if (HasIncExp) {
        size += 1 + 1;
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStaffFullCharge other) {
      if (other == null) {
        return;
      }
      if (other.HasStaffId) {
        StaffId = other.StaffId;
      }
      if (other.HasIncExp) {
        IncExp = other.IncExp;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 16: {
            IncExp = input.ReadBool();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 16: {
            IncExp = input.ReadBool();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CStaffBoost : pb::IMessage<CStaffBoost>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStaffBoost> _parser = new pb::MessageParser<CStaffBoost>(() => new CStaffBoost());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStaffBoost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffBoost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffBoost(CStaffBoost other) : this() {
      _hasBits0 = other._hasBits0;
      staffId_ = other.staffId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStaffBoost Clone() {
      return new CStaffBoost(this);
    }

    /// <summary>Field number for the "staffId" field.</summary>
    public const int StaffIdFieldNumber = 1;
    private readonly static int StaffIdDefaultValue = 0;

    private int staffId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaffId {
      get { if ((_hasBits0 & 1) != 0) { return staffId_; } else { return StaffIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        staffId_ = value;
      }
    }
    /// <summary>Gets whether the "staffId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStaffId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "staffId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStaffId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStaffBoost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStaffBoost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StaffId != other.StaffId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStaffId) hash ^= StaffId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStaffId) {
        output.WriteRawTag(8);
        output.WriteInt32(StaffId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStaffId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaffId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStaffBoost other) {
      if (other == null) {
        return;
      }
      if (other.HasStaffId) {
        StaffId = other.StaffId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StaffId = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAvatarBuy : pb::IMessage<CAvatarBuy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAvatarBuy> _parser = new pb::MessageParser<CAvatarBuy>(() => new CAvatarBuy());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAvatarBuy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAvatarBuy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAvatarBuy(CAvatarBuy other) : this() {
      _hasBits0 = other._hasBits0;
      kind_ = other.kind_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAvatarBuy Clone() {
      return new CAvatarBuy(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static string KindDefaultValue = "";

    private string kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_ ?? KindDefaultValue; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return kind_ != null; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kind_ = null;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 1) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAvatarBuy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAvatarBuy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasPrice) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasPrice) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAvatarBuy other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CQuestStart : pb::IMessage<CQuestStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CQuestStart> _parser = new pb::MessageParser<CQuestStart>(() => new CQuestStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CQuestStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestStart(CQuestStart other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_.Clone();
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestStart Clone() {
      return new CQuestStart(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_questId_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> questId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> QuestId {
      get { return questId_; }
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CQuestStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CQuestStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!questId_.Equals(other.questId_)) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= questId_.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      questId_.WriteTo(output, _repeated_questId_codec);
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      questId_.WriteTo(ref output, _repeated_questId_codec);
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += questId_.CalculateSize(_repeated_questId_codec);
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CQuestStart other) {
      if (other == null) {
        return;
      }
      questId_.Add(other.questId_);
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            questId_.AddEntriesFrom(input, _repeated_questId_codec);
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            questId_.AddEntriesFrom(ref input, _repeated_questId_codec);
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CQuestProgress : pb::IMessage<CQuestProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CQuestProgress> _parser = new pb::MessageParser<CQuestProgress>(() => new CQuestProgress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CQuestProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestProgress(CQuestProgress other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      goal_ = other.goal_;
      state_ = other.state_;
      storeKey_ = other.storeKey_;
      isStuck_ = other.isStuck_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestProgress Clone() {
      return new CQuestProgress(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 2;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 2) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private readonly static int StateDefaultValue = 0;

    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { if ((_hasBits0 & 4) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "isStuck" field.</summary>
    public const int IsStuckFieldNumber = 5;
    private readonly static bool IsStuckDefaultValue = false;

    private bool isStuck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStuck {
      get { if ((_hasBits0 & 16) != 0) { return isStuck_; } else { return IsStuckDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isStuck_ = value;
      }
    }
    /// <summary>Gets whether the "isStuck" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsStuck {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "isStuck" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsStuck() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CQuestProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CQuestProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      if (State != other.State) return false;
      if (StoreKey != other.StoreKey) return false;
      if (IsStuck != other.IsStuck) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasIsStuck) hash ^= IsStuck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (HasIsStuck) {
        output.WriteRawTag(40);
        output.WriteBool(IsStuck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (HasIsStuck) {
        output.WriteRawTag(40);
        output.WriteBool(IsStuck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasIsStuck) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CQuestProgress other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasIsStuck) {
        IsStuck = other.IsStuck;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 40: {
            IsStuck = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 40: {
            IsStuck = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CQuestFinish : pb::IMessage<CQuestFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CQuestFinish> _parser = new pb::MessageParser<CQuestFinish>(() => new CQuestFinish());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CQuestFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestFinish(CQuestFinish other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestFinish Clone() {
      return new CQuestFinish(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CQuestFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CQuestFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CQuestFinish other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CQuestRequest : pb::IMessage<CQuestRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CQuestRequest> _parser = new pb::MessageParser<CQuestRequest>(() => new CQuestRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CQuestRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestRequest(CQuestRequest other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      goal_ = other.goal_;
      friendId_ = other.friendId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestRequest Clone() {
      return new CQuestRequest(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 2;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 2) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_friendId_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> friendId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FriendId {
      get { return friendId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CQuestRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CQuestRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      if(!friendId_.Equals(other.friendId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      hash ^= friendId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      friendId_.WriteTo(output, _repeated_friendId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      friendId_.WriteTo(ref output, _repeated_friendId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      size += friendId_.CalculateSize(_repeated_friendId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CQuestRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      friendId_.Add(other.friendId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 26: {
            friendId_.AddEntriesFrom(input, _repeated_friendId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 26: {
            friendId_.AddEntriesFrom(ref input, _repeated_friendId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CQuestResponse : pb::IMessage<CQuestResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CQuestResponse> _parser = new pb::MessageParser<CQuestResponse>(() => new CQuestResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CQuestResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestResponse(CQuestResponse other) : this() {
      _hasBits0 = other._hasBits0;
      accept_ = other.accept_;
      friendId_ = other.friendId_;
      questId_ = other.questId_;
      goal_ = other.goal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestResponse Clone() {
      return new CQuestResponse(this);
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 1;
    private readonly static bool AcceptDefaultValue = false;

    private bool accept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { if ((_hasBits0 & 1) != 0) { return accept_; } else { return AcceptDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accept_ = value;
      }
    }
    /// <summary>Gets whether the "accept" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccept {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "accept" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccept() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 3;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 2) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 4;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 4) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 4;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CQuestResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CQuestResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accept != other.Accept) return false;
      if (FriendId != other.FriendId) return false;
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccept) hash ^= Accept.GetHashCode();
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccept) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (HasFriendId) {
        output.WriteRawTag(18);
        output.WriteString(FriendId);
      }
      if (HasQuestId) {
        output.WriteRawTag(24);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(32);
        output.WriteInt32(Goal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccept) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (HasFriendId) {
        output.WriteRawTag(18);
        output.WriteString(FriendId);
      }
      if (HasQuestId) {
        output.WriteRawTag(24);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(32);
        output.WriteInt32(Goal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccept) {
        size += 1 + 1;
      }
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CQuestResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasAccept) {
        Accept = other.Accept;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            FriendId = input.ReadString();
            break;
          }
          case 24: {
            QuestId = input.ReadInt32();
            break;
          }
          case 32: {
            Goal = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            FriendId = input.ReadString();
            break;
          }
          case 24: {
            QuestId = input.ReadInt32();
            break;
          }
          case 32: {
            Goal = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CQuestInstantCompletion : pb::IMessage<CQuestInstantCompletion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CQuestInstantCompletion> _parser = new pb::MessageParser<CQuestInstantCompletion>(() => new CQuestInstantCompletion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CQuestInstantCompletion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestInstantCompletion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestInstantCompletion(CQuestInstantCompletion other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      goal_ = other.goal_;
      all_ = other.all_;
      cash_ = other.cash_;
      currentState_ = other.currentState_;
      storeKey_ = other.storeKey_;
      isEventCashAmount_ = other.isEventCashAmount_;
      petOid_ = other.petOid_;
      petSkillId_ = other.petSkillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestInstantCompletion Clone() {
      return new CQuestInstantCompletion(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 2;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 2) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 3;
    private readonly static bool AllDefaultValue = false;

    private bool all_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool All {
      get { if ((_hasBits0 & 4) != 0) { return all_; } else { return AllDefaultValue; } }
      set {
        _hasBits0 |= 4;
        all_ = value;
      }
    }
    /// <summary>Gets whether the "all" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAll {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "all" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAll() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 4;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 8) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "currentState" field.</summary>
    public const int CurrentStateFieldNumber = 5;
    private readonly static int CurrentStateDefaultValue = 0;

    private int currentState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentState {
      get { if ((_hasBits0 & 16) != 0) { return currentState_; } else { return CurrentStateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        currentState_ = value;
      }
    }
    /// <summary>Gets whether the "currentState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentState {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "currentState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentState() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 6;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 32) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "isEventCashAmount" field.</summary>
    public const int IsEventCashAmountFieldNumber = 7;
    private readonly static bool IsEventCashAmountDefaultValue = false;

    private bool isEventCashAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEventCashAmount {
      get { if ((_hasBits0 & 64) != 0) { return isEventCashAmount_; } else { return IsEventCashAmountDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isEventCashAmount_ = value;
      }
    }
    /// <summary>Gets whether the "isEventCashAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsEventCashAmount {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "isEventCashAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsEventCashAmount() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "petOid" field.</summary>
    public const int PetOidFieldNumber = 8;
    private readonly static int PetOidDefaultValue = 0;

    private int petOid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PetOid {
      get { if ((_hasBits0 & 128) != 0) { return petOid_; } else { return PetOidDefaultValue; } }
      set {
        _hasBits0 |= 128;
        petOid_ = value;
      }
    }
    /// <summary>Gets whether the "petOid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPetOid {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "petOid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPetOid() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "petSkillId" field.</summary>
    public const int PetSkillIdFieldNumber = 9;
    private readonly static string PetSkillIdDefaultValue = "";

    private string petSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PetSkillId {
      get { return petSkillId_ ?? PetSkillIdDefaultValue; }
      set {
        petSkillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "petSkillId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPetSkillId {
      get { return petSkillId_ != null; }
    }
    /// <summary>Clears the value of the "petSkillId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPetSkillId() {
      petSkillId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CQuestInstantCompletion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CQuestInstantCompletion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      if (All != other.All) return false;
      if (Cash != other.Cash) return false;
      if (CurrentState != other.CurrentState) return false;
      if (StoreKey != other.StoreKey) return false;
      if (IsEventCashAmount != other.IsEventCashAmount) return false;
      if (PetOid != other.PetOid) return false;
      if (PetSkillId != other.PetSkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (HasAll) hash ^= All.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasCurrentState) hash ^= CurrentState.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasIsEventCashAmount) hash ^= IsEventCashAmount.GetHashCode();
      if (HasPetOid) hash ^= PetOid.GetHashCode();
      if (HasPetSkillId) hash ^= PetSkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasAll) {
        output.WriteRawTag(24);
        output.WriteBool(All);
      }
      if (HasCash) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (HasCurrentState) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentState);
      }
      if (HasStoreKey) {
        output.WriteRawTag(48);
        output.WriteInt32(StoreKey);
      }
      if (HasIsEventCashAmount) {
        output.WriteRawTag(56);
        output.WriteBool(IsEventCashAmount);
      }
      if (HasPetOid) {
        output.WriteRawTag(64);
        output.WriteInt32(PetOid);
      }
      if (HasPetSkillId) {
        output.WriteRawTag(74);
        output.WriteString(PetSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasAll) {
        output.WriteRawTag(24);
        output.WriteBool(All);
      }
      if (HasCash) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (HasCurrentState) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentState);
      }
      if (HasStoreKey) {
        output.WriteRawTag(48);
        output.WriteInt32(StoreKey);
      }
      if (HasIsEventCashAmount) {
        output.WriteRawTag(56);
        output.WriteBool(IsEventCashAmount);
      }
      if (HasPetOid) {
        output.WriteRawTag(64);
        output.WriteInt32(PetOid);
      }
      if (HasPetSkillId) {
        output.WriteRawTag(74);
        output.WriteString(PetSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (HasAll) {
        size += 1 + 1;
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasCurrentState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentState);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasIsEventCashAmount) {
        size += 1 + 1;
      }
      if (HasPetOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PetOid);
      }
      if (HasPetSkillId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PetSkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CQuestInstantCompletion other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      if (other.HasAll) {
        All = other.All;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasCurrentState) {
        CurrentState = other.CurrentState;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasIsEventCashAmount) {
        IsEventCashAmount = other.IsEventCashAmount;
      }
      if (other.HasPetOid) {
        PetOid = other.PetOid;
      }
      if (other.HasPetSkillId) {
        PetSkillId = other.PetSkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            All = input.ReadBool();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentState = input.ReadInt32();
            break;
          }
          case 48: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 56: {
            IsEventCashAmount = input.ReadBool();
            break;
          }
          case 64: {
            PetOid = input.ReadInt32();
            break;
          }
          case 74: {
            PetSkillId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            All = input.ReadBool();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentState = input.ReadInt32();
            break;
          }
          case 48: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 56: {
            IsEventCashAmount = input.ReadBool();
            break;
          }
          case 64: {
            PetOid = input.ReadInt32();
            break;
          }
          case 74: {
            PetSkillId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CQuestRemoveNewFlag : pb::IMessage<CQuestRemoveNewFlag>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CQuestRemoveNewFlag> _parser = new pb::MessageParser<CQuestRemoveNewFlag>(() => new CQuestRemoveNewFlag());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CQuestRemoveNewFlag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestRemoveNewFlag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestRemoveNewFlag(CQuestRemoveNewFlag other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CQuestRemoveNewFlag Clone() {
      return new CQuestRemoveNewFlag(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CQuestRemoveNewFlag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CQuestRemoveNewFlag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CQuestRemoveNewFlag other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRequestInstantCompletionByInvitee : pb::IMessage<CRequestInstantCompletionByInvitee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRequestInstantCompletionByInvitee> _parser = new pb::MessageParser<CRequestInstantCompletionByInvitee>(() => new CRequestInstantCompletionByInvitee());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRequestInstantCompletionByInvitee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRequestInstantCompletionByInvitee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRequestInstantCompletionByInvitee(CRequestInstantCompletionByInvitee other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      goal_ = other.goal_;
      friendId_ = other.friendId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRequestInstantCompletionByInvitee Clone() {
      return new CRequestInstantCompletionByInvitee(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 2;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 2) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 3;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRequestInstantCompletionByInvitee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRequestInstantCompletionByInvitee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      if (FriendId != other.FriendId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasFriendId) {
        output.WriteRawTag(26);
        output.WriteString(FriendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasFriendId) {
        output.WriteRawTag(26);
        output.WriteString(FriendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRequestInstantCompletionByInvitee other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 26: {
            FriendId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 26: {
            FriendId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpansionRequest : pb::IMessage<CExpansionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpansionRequest> _parser = new pb::MessageParser<CExpansionRequest>(() => new CExpansionRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpansionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionRequest(CExpansionRequest other) : this() {
      _hasBits0 = other._hasBits0;
      expandId_ = other.expandId_;
      friendId_ = other.friendId_.Clone();
      isEmilyChecked_ = other.isEmilyChecked_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionRequest Clone() {
      return new CExpansionRequest(this);
    }

    /// <summary>Field number for the "expandId" field.</summary>
    public const int ExpandIdFieldNumber = 1;
    private readonly static string ExpandIdDefaultValue = "";

    private string expandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandId {
      get { return expandId_ ?? ExpandIdDefaultValue; }
      set {
        expandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expandId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpandId {
      get { return expandId_ != null; }
    }
    /// <summary>Clears the value of the "expandId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpandId() {
      expandId_ = null;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_friendId_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> friendId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FriendId {
      get { return friendId_; }
    }

    /// <summary>Field number for the "isEmilyChecked" field.</summary>
    public const int IsEmilyCheckedFieldNumber = 3;
    private readonly static bool IsEmilyCheckedDefaultValue = false;

    private bool isEmilyChecked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEmilyChecked {
      get { if ((_hasBits0 & 1) != 0) { return isEmilyChecked_; } else { return IsEmilyCheckedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isEmilyChecked_ = value;
      }
    }
    /// <summary>Gets whether the "isEmilyChecked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsEmilyChecked {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "isEmilyChecked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsEmilyChecked() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpansionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpansionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExpandId != other.ExpandId) return false;
      if(!friendId_.Equals(other.friendId_)) return false;
      if (IsEmilyChecked != other.IsEmilyChecked) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExpandId) hash ^= ExpandId.GetHashCode();
      hash ^= friendId_.GetHashCode();
      if (HasIsEmilyChecked) hash ^= IsEmilyChecked.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      friendId_.WriteTo(output, _repeated_friendId_codec);
      if (HasIsEmilyChecked) {
        output.WriteRawTag(24);
        output.WriteBool(IsEmilyChecked);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      friendId_.WriteTo(ref output, _repeated_friendId_codec);
      if (HasIsEmilyChecked) {
        output.WriteRawTag(24);
        output.WriteBool(IsEmilyChecked);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasExpandId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandId);
      }
      size += friendId_.CalculateSize(_repeated_friendId_codec);
      if (HasIsEmilyChecked) {
        size += 1 + 1;
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpansionRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasExpandId) {
        ExpandId = other.ExpandId;
      }
      friendId_.Add(other.friendId_);
      if (other.HasIsEmilyChecked) {
        IsEmilyChecked = other.IsEmilyChecked;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 18: {
            friendId_.AddEntriesFrom(input, _repeated_friendId_codec);
            break;
          }
          case 24: {
            IsEmilyChecked = input.ReadBool();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 18: {
            friendId_.AddEntriesFrom(ref input, _repeated_friendId_codec);
            break;
          }
          case 24: {
            IsEmilyChecked = input.ReadBool();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpansionResponse : pb::IMessage<CExpansionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpansionResponse> _parser = new pb::MessageParser<CExpansionResponse>(() => new CExpansionResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpansionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionResponse(CExpansionResponse other) : this() {
      _hasBits0 = other._hasBits0;
      accept_ = other.accept_;
      friendId_ = other.friendId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionResponse Clone() {
      return new CExpansionResponse(this);
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 1;
    private readonly static bool AcceptDefaultValue = false;

    private bool accept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { if ((_hasBits0 & 1) != 0) { return accept_; } else { return AcceptDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accept_ = value;
      }
    }
    /// <summary>Gets whether the "accept" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccept {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "accept" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccept() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpansionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpansionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accept != other.Accept) return false;
      if (FriendId != other.FriendId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccept) hash ^= Accept.GetHashCode();
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccept) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (HasFriendId) {
        output.WriteRawTag(18);
        output.WriteString(FriendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccept) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (HasFriendId) {
        output.WriteRawTag(18);
        output.WriteString(FriendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccept) {
        size += 1 + 1;
      }
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpansionResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasAccept) {
        Accept = other.Accept;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            FriendId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            FriendId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpansionBuyPermission : pb::IMessage<CExpansionBuyPermission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpansionBuyPermission> _parser = new pb::MessageParser<CExpansionBuyPermission>(() => new CExpansionBuyPermission());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpansionBuyPermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionBuyPermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionBuyPermission(CExpansionBuyPermission other) : this() {
      _hasBits0 = other._hasBits0;
      expandId_ = other.expandId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionBuyPermission Clone() {
      return new CExpansionBuyPermission(this);
    }

    /// <summary>Field number for the "expandId" field.</summary>
    public const int ExpandIdFieldNumber = 1;
    private readonly static string ExpandIdDefaultValue = "";

    private string expandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandId {
      get { return expandId_ ?? ExpandIdDefaultValue; }
      set {
        expandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expandId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpandId {
      get { return expandId_ != null; }
    }
    /// <summary>Clears the value of the "expandId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpandId() {
      expandId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpansionBuyPermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpansionBuyPermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExpandId != other.ExpandId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExpandId) hash ^= ExpandId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasExpandId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpansionBuyPermission other) {
      if (other == null) {
        return;
      }
      if (other.HasExpandId) {
        ExpandId = other.ExpandId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpansionBuyAllPermission : pb::IMessage<CExpansionBuyAllPermission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpansionBuyAllPermission> _parser = new pb::MessageParser<CExpansionBuyAllPermission>(() => new CExpansionBuyAllPermission());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpansionBuyAllPermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionBuyAllPermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionBuyAllPermission(CExpansionBuyAllPermission other) : this() {
      _hasBits0 = other._hasBits0;
      expandId_ = other.expandId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionBuyAllPermission Clone() {
      return new CExpansionBuyAllPermission(this);
    }

    /// <summary>Field number for the "expandId" field.</summary>
    public const int ExpandIdFieldNumber = 1;
    private readonly static string ExpandIdDefaultValue = "";

    private string expandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandId {
      get { return expandId_ ?? ExpandIdDefaultValue; }
      set {
        expandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expandId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpandId {
      get { return expandId_ != null; }
    }
    /// <summary>Clears the value of the "expandId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpandId() {
      expandId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpansionBuyAllPermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpansionBuyAllPermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExpandId != other.ExpandId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExpandId) hash ^= ExpandId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasExpandId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpansionBuyAllPermission other) {
      if (other == null) {
        return;
      }
      if (other.HasExpandId) {
        ExpandId = other.ExpandId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpansionComplete : pb::IMessage<CExpansionComplete>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpansionComplete> _parser = new pb::MessageParser<CExpansionComplete>(() => new CExpansionComplete());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpansionComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionComplete(CExpansionComplete other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionComplete Clone() {
      return new CExpansionComplete(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpansionComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpansionComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpansionComplete other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpansionPermissionByInvitee : pb::IMessage<CExpansionPermissionByInvitee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpansionPermissionByInvitee> _parser = new pb::MessageParser<CExpansionPermissionByInvitee>(() => new CExpansionPermissionByInvitee());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpansionPermissionByInvitee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionPermissionByInvitee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionPermissionByInvitee(CExpansionPermissionByInvitee other) : this() {
      _hasBits0 = other._hasBits0;
      expandId_ = other.expandId_;
      friendId_ = other.friendId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpansionPermissionByInvitee Clone() {
      return new CExpansionPermissionByInvitee(this);
    }

    /// <summary>Field number for the "expandId" field.</summary>
    public const int ExpandIdFieldNumber = 1;
    private readonly static string ExpandIdDefaultValue = "";

    private string expandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandId {
      get { return expandId_ ?? ExpandIdDefaultValue; }
      set {
        expandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expandId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpandId {
      get { return expandId_ != null; }
    }
    /// <summary>Clears the value of the "expandId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpandId() {
      expandId_ = null;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpansionPermissionByInvitee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpansionPermissionByInvitee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExpandId != other.ExpandId) return false;
      if (FriendId != other.FriendId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExpandId) hash ^= ExpandId.GetHashCode();
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      if (HasFriendId) {
        output.WriteRawTag(18);
        output.WriteString(FriendId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExpandId) {
        output.WriteRawTag(10);
        output.WriteString(ExpandId);
      }
      if (HasFriendId) {
        output.WriteRawTag(18);
        output.WriteString(FriendId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasExpandId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandId);
      }
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpansionPermissionByInvitee other) {
      if (other == null) {
        return;
      }
      if (other.HasExpandId) {
        ExpandId = other.ExpandId;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 18: {
            FriendId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ExpandId = input.ReadString();
            break;
          }
          case 18: {
            FriendId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChainExpansionComplete : pb::IMessage<CChainExpansionComplete>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChainExpansionComplete> _parser = new pb::MessageParser<CChainExpansionComplete>(() => new CChainExpansionComplete());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChainExpansionComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChainExpansionComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChainExpansionComplete(CChainExpansionComplete other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChainExpansionComplete Clone() {
      return new CChainExpansionComplete(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChainExpansionComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChainExpansionComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChainExpansionComplete other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChainExpansionShorten : pb::IMessage<CChainExpansionShorten>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChainExpansionShorten> _parser = new pb::MessageParser<CChainExpansionShorten>(() => new CChainExpansionShorten());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChainExpansionShorten> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChainExpansionShorten() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChainExpansionShorten(CChainExpansionShorten other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      expandId_ = other.expandId_;
      leftSec_ = other.leftSec_;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChainExpansionShorten Clone() {
      return new CChainExpansionShorten(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expandId" field.</summary>
    public const int ExpandIdFieldNumber = 2;
    private readonly static string ExpandIdDefaultValue = "";

    private string expandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandId {
      get { return expandId_ ?? ExpandIdDefaultValue; }
      set {
        expandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expandId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpandId {
      get { return expandId_ != null; }
    }
    /// <summary>Clears the value of the "expandId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpandId() {
      expandId_ = null;
    }

    /// <summary>Field number for the "leftSec" field.</summary>
    public const int LeftSecFieldNumber = 3;
    private readonly static int LeftSecDefaultValue = 0;

    private int leftSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSec {
      get { if ((_hasBits0 & 2) != 0) { return leftSec_; } else { return LeftSecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leftSec_ = value;
      }
    }
    /// <summary>Gets whether the "leftSec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftSec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leftSec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftSec() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 4;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChainExpansionShorten);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChainExpansionShorten other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (ExpandId != other.ExpandId) return false;
      if (LeftSec != other.LeftSec) return false;
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasExpandId) hash ^= ExpandId.GetHashCode();
      if (HasLeftSec) hash ^= LeftSec.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasExpandId) {
        output.WriteRawTag(18);
        output.WriteString(ExpandId);
      }
      if (HasLeftSec) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftSec);
      }
      if (HasCash) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasExpandId) {
        output.WriteRawTag(18);
        output.WriteString(ExpandId);
      }
      if (HasLeftSec) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftSec);
      }
      if (HasCash) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasExpandId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandId);
      }
      if (HasLeftSec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSec);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChainExpansionShorten other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasExpandId) {
        ExpandId = other.ExpandId;
      }
      if (other.HasLeftSec) {
        LeftSec = other.LeftSec;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            ExpandId = input.ReadString();
            break;
          }
          case 24: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            ExpandId = input.ReadString();
            break;
          }
          case 24: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCarReplace : pb::IMessage<CCarReplace>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCarReplace> _parser = new pb::MessageParser<CCarReplace>(() => new CCarReplace());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCarReplace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCarReplace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCarReplace(CCarReplace other) : this() {
      _hasBits0 = other._hasBits0;
      carId_ = other.carId_;
      inven_ = other.inven_;
      saleEventAuthKey_ = other.saleEventAuthKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCarReplace Clone() {
      return new CCarReplace(this);
    }

    /// <summary>Field number for the "carId" field.</summary>
    public const int CarIdFieldNumber = 1;
    private readonly static string CarIdDefaultValue = "";

    private string carId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarId {
      get { return carId_ ?? CarIdDefaultValue; }
      set {
        carId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "carId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCarId {
      get { return carId_ != null; }
    }
    /// <summary>Clears the value of the "carId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCarId() {
      carId_ = null;
    }

    /// <summary>Field number for the "inven" field.</summary>
    public const int InvenFieldNumber = 2;
    private readonly static bool InvenDefaultValue = false;

    private bool inven_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inven {
      get { if ((_hasBits0 & 1) != 0) { return inven_; } else { return InvenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        inven_ = value;
      }
    }
    /// <summary>Gets whether the "inven" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInven {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "inven" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInven() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "saleEventAuthKey" field.</summary>
    public const int SaleEventAuthKeyFieldNumber = 3;
    private readonly static string SaleEventAuthKeyDefaultValue = "";

    private string saleEventAuthKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaleEventAuthKey {
      get { return saleEventAuthKey_ ?? SaleEventAuthKeyDefaultValue; }
      set {
        saleEventAuthKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "saleEventAuthKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSaleEventAuthKey {
      get { return saleEventAuthKey_ != null; }
    }
    /// <summary>Clears the value of the "saleEventAuthKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSaleEventAuthKey() {
      saleEventAuthKey_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCarReplace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCarReplace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarId != other.CarId) return false;
      if (Inven != other.Inven) return false;
      if (SaleEventAuthKey != other.SaleEventAuthKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCarId) hash ^= CarId.GetHashCode();
      if (HasInven) hash ^= Inven.GetHashCode();
      if (HasSaleEventAuthKey) hash ^= SaleEventAuthKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCarId) {
        output.WriteRawTag(10);
        output.WriteString(CarId);
      }
      if (HasInven) {
        output.WriteRawTag(16);
        output.WriteBool(Inven);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(26);
        output.WriteString(SaleEventAuthKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCarId) {
        output.WriteRawTag(10);
        output.WriteString(CarId);
      }
      if (HasInven) {
        output.WriteRawTag(16);
        output.WriteBool(Inven);
      }
      if (HasSaleEventAuthKey) {
        output.WriteRawTag(26);
        output.WriteString(SaleEventAuthKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCarId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarId);
      }
      if (HasInven) {
        size += 1 + 1;
      }
      if (HasSaleEventAuthKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaleEventAuthKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCarReplace other) {
      if (other == null) {
        return;
      }
      if (other.HasCarId) {
        CarId = other.CarId;
      }
      if (other.HasInven) {
        Inven = other.Inven;
      }
      if (other.HasSaleEventAuthKey) {
        SaleEventAuthKey = other.SaleEventAuthKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CarId = input.ReadString();
            break;
          }
          case 16: {
            Inven = input.ReadBool();
            break;
          }
          case 26: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CarId = input.ReadString();
            break;
          }
          case 16: {
            Inven = input.ReadBool();
            break;
          }
          case 26: {
            SaleEventAuthKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CVisitFriend : pb::IMessage<CVisitFriend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CVisitFriend> _parser = new pb::MessageParser<CVisitFriend>(() => new CVisitFriend());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CVisitFriend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitFriend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitFriend(CVisitFriend other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      storeKey_ = other.storeKey_;
      isNotFriendEachOther_ = other.isNotFriendEachOther_;
      imitate_ = other.imitate_;
      lastModifiedTime_ = other.lastModifiedTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitFriend Clone() {
      return new CVisitFriend(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "isNotFriendEachOther" field.</summary>
    public const int IsNotFriendEachOtherFieldNumber = 3;
    private readonly static bool IsNotFriendEachOtherDefaultValue = false;

    private bool isNotFriendEachOther_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNotFriendEachOther {
      get { if ((_hasBits0 & 2) != 0) { return isNotFriendEachOther_; } else { return IsNotFriendEachOtherDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isNotFriendEachOther_ = value;
      }
    }
    /// <summary>Gets whether the "isNotFriendEachOther" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsNotFriendEachOther {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "isNotFriendEachOther" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsNotFriendEachOther() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "imitate" field.</summary>
    public const int ImitateFieldNumber = 4;
    private readonly static bool ImitateDefaultValue = false;

    private bool imitate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Imitate {
      get { if ((_hasBits0 & 4) != 0) { return imitate_; } else { return ImitateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        imitate_ = value;
      }
    }
    /// <summary>Gets whether the "imitate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImitate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "imitate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImitate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lastModifiedTime" field.</summary>
    public const int LastModifiedTimeFieldNumber = 5;
    private readonly static int LastModifiedTimeDefaultValue = 0;

    private int lastModifiedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastModifiedTime {
      get { if ((_hasBits0 & 8) != 0) { return lastModifiedTime_; } else { return LastModifiedTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        lastModifiedTime_ = value;
      }
    }
    /// <summary>Gets whether the "lastModifiedTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastModifiedTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "lastModifiedTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastModifiedTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CVisitFriend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CVisitFriend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (StoreKey != other.StoreKey) return false;
      if (IsNotFriendEachOther != other.IsNotFriendEachOther) return false;
      if (Imitate != other.Imitate) return false;
      if (LastModifiedTime != other.LastModifiedTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasIsNotFriendEachOther) hash ^= IsNotFriendEachOther.GetHashCode();
      if (HasImitate) hash ^= Imitate.GetHashCode();
      if (HasLastModifiedTime) hash ^= LastModifiedTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasIsNotFriendEachOther) {
        output.WriteRawTag(24);
        output.WriteBool(IsNotFriendEachOther);
      }
      if (HasImitate) {
        output.WriteRawTag(32);
        output.WriteBool(Imitate);
      }
      if (HasLastModifiedTime) {
        output.WriteRawTag(40);
        output.WriteInt32(LastModifiedTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasIsNotFriendEachOther) {
        output.WriteRawTag(24);
        output.WriteBool(IsNotFriendEachOther);
      }
      if (HasImitate) {
        output.WriteRawTag(32);
        output.WriteBool(Imitate);
      }
      if (HasLastModifiedTime) {
        output.WriteRawTag(40);
        output.WriteInt32(LastModifiedTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasIsNotFriendEachOther) {
        size += 1 + 1;
      }
      if (HasImitate) {
        size += 1 + 1;
      }
      if (HasLastModifiedTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastModifiedTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CVisitFriend other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasIsNotFriendEachOther) {
        IsNotFriendEachOther = other.IsNotFriendEachOther;
      }
      if (other.HasImitate) {
        Imitate = other.Imitate;
      }
      if (other.HasLastModifiedTime) {
        LastModifiedTime = other.LastModifiedTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            IsNotFriendEachOther = input.ReadBool();
            break;
          }
          case 32: {
            Imitate = input.ReadBool();
            break;
          }
          case 40: {
            LastModifiedTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            IsNotFriendEachOther = input.ReadBool();
            break;
          }
          case 32: {
            Imitate = input.ReadBool();
            break;
          }
          case 40: {
            LastModifiedTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CVisitAction : pb::IMessage<CVisitAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CVisitAction> _parser = new pb::MessageParser<CVisitAction>(() => new CVisitAction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CVisitAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitAction(CVisitAction other) : this() {
      _hasBits0 = other._hasBits0;
      friendId_ = other.friendId_;
      actionType_ = other.actionType_;
      target_ = other.target_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitAction Clone() {
      return new CVisitAction(this);
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 2;
    private readonly static string ActionTypeDefaultValue = "";

    private string actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionType {
      get { return actionType_ ?? ActionTypeDefaultValue; }
      set {
        actionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "actionType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionType {
      get { return actionType_ != null; }
    }
    /// <summary>Clears the value of the "actionType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionType() {
      actionType_ = null;
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private readonly static int TargetDefaultValue = 0;

    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { if ((_hasBits0 & 1) != 0) { return target_; } else { return TargetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        target_ = value;
      }
    }
    /// <summary>Gets whether the "target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CVisitAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CVisitAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      if (ActionType != other.ActionType) return false;
      if (Target != other.Target) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (HasActionType) hash ^= ActionType.GetHashCode();
      if (HasTarget) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFriendId) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (HasActionType) {
        output.WriteRawTag(18);
        output.WriteString(ActionType);
      }
      if (HasTarget) {
        output.WriteRawTag(24);
        output.WriteInt32(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFriendId) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (HasActionType) {
        output.WriteRawTag(18);
        output.WriteString(ActionType);
      }
      if (HasTarget) {
        output.WriteRawTag(24);
        output.WriteInt32(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (HasActionType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionType);
      }
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CVisitAction other) {
      if (other == null) {
        return;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      if (other.HasActionType) {
        ActionType = other.ActionType;
      }
      if (other.HasTarget) {
        Target = other.Target;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 18: {
            ActionType = input.ReadString();
            break;
          }
          case 24: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 18: {
            ActionType = input.ReadString();
            break;
          }
          case 24: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CVisitResponse : pb::IMessage<CVisitResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CVisitResponse> _parser = new pb::MessageParser<CVisitResponse>(() => new CVisitResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CVisitResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitResponse(CVisitResponse other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      fid_ = other.fid_;
      type_ = other.type_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitResponse Clone() {
      return new CVisitResponse(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 2;
    private readonly static string FidDefaultValue = "";

    private string fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fid {
      get { return fid_ ?? FidDefaultValue; }
      set {
        fid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFid {
      get { return fid_ != null; }
    }
    /// <summary>Clears the value of the "fid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFid() {
      fid_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CVisitResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CVisitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Fid != other.Fid) return false;
      if (Type != other.Type) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasFid) hash ^= Fid.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasFid) {
        output.WriteRawTag(18);
        output.WriteString(Fid);
      }
      if (HasType) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasFid) {
        output.WriteRawTag(18);
        output.WriteString(Fid);
      }
      if (HasType) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasFid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fid);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CVisitResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasFid) {
        Fid = other.Fid;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Fid = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Fid = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CVisitReviveAll : pb::IMessage<CVisitReviveAll>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CVisitReviveAll> _parser = new pb::MessageParser<CVisitReviveAll>(() => new CVisitReviveAll());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CVisitReviveAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitReviveAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitReviveAll(CVisitReviveAll other) : this() {
      _hasBits0 = other._hasBits0;
      fid_ = other.fid_;
      oids_ = other.oids_.Clone();
      pfMsgBlocked_ = other.pfMsgBlocked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitReviveAll Clone() {
      return new CVisitReviveAll(this);
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 1;
    private readonly static string FidDefaultValue = "";

    private string fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fid {
      get { return fid_ ?? FidDefaultValue; }
      set {
        fid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFid {
      get { return fid_ != null; }
    }
    /// <summary>Clears the value of the "fid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFid() {
      fid_ = null;
    }

    /// <summary>Field number for the "oids" field.</summary>
    public const int OidsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_oids_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> oids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Oids {
      get { return oids_; }
    }

    /// <summary>Field number for the "pfMsgBlocked" field.</summary>
    public const int PfMsgBlockedFieldNumber = 3;
    private readonly static bool PfMsgBlockedDefaultValue = false;

    private bool pfMsgBlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PfMsgBlocked {
      get { if ((_hasBits0 & 1) != 0) { return pfMsgBlocked_; } else { return PfMsgBlockedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pfMsgBlocked_ = value;
      }
    }
    /// <summary>Gets whether the "pfMsgBlocked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPfMsgBlocked {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pfMsgBlocked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPfMsgBlocked() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CVisitReviveAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CVisitReviveAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fid != other.Fid) return false;
      if(!oids_.Equals(other.oids_)) return false;
      if (PfMsgBlocked != other.PfMsgBlocked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFid) hash ^= Fid.GetHashCode();
      hash ^= oids_.GetHashCode();
      if (HasPfMsgBlocked) hash ^= PfMsgBlocked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFid) {
        output.WriteRawTag(10);
        output.WriteString(Fid);
      }
      oids_.WriteTo(output, _repeated_oids_codec);
      if (HasPfMsgBlocked) {
        output.WriteRawTag(24);
        output.WriteBool(PfMsgBlocked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFid) {
        output.WriteRawTag(10);
        output.WriteString(Fid);
      }
      oids_.WriteTo(ref output, _repeated_oids_codec);
      if (HasPfMsgBlocked) {
        output.WriteRawTag(24);
        output.WriteBool(PfMsgBlocked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fid);
      }
      size += oids_.CalculateSize(_repeated_oids_codec);
      if (HasPfMsgBlocked) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CVisitReviveAll other) {
      if (other == null) {
        return;
      }
      if (other.HasFid) {
        Fid = other.Fid;
      }
      oids_.Add(other.oids_);
      if (other.HasPfMsgBlocked) {
        PfMsgBlocked = other.PfMsgBlocked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fid = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            oids_.AddEntriesFrom(input, _repeated_oids_codec);
            break;
          }
          case 24: {
            PfMsgBlocked = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Fid = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            oids_.AddEntriesFrom(ref input, _repeated_oids_codec);
            break;
          }
          case 24: {
            PfMsgBlocked = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CResponseReviveAll : pb::IMessage<CResponseReviveAll>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CResponseReviveAll> _parser = new pb::MessageParser<CResponseReviveAll>(() => new CResponseReviveAll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CResponseReviveAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResponseReviveAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResponseReviveAll(CResponseReviveAll other) : this() {
      fids_ = other.fids_.Clone();
      oids_ = other.oids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResponseReviveAll Clone() {
      return new CResponseReviveAll(this);
    }

    /// <summary>Field number for the "fids" field.</summary>
    public const int FidsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_fids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> fids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fids {
      get { return fids_; }
    }

    /// <summary>Field number for the "oids" field.</summary>
    public const int OidsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_oids_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> oids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Oids {
      get { return oids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CResponseReviveAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CResponseReviveAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fids_.Equals(other.fids_)) return false;
      if(!oids_.Equals(other.oids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fids_.GetHashCode();
      hash ^= oids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fids_.WriteTo(output, _repeated_fids_codec);
      oids_.WriteTo(output, _repeated_oids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fids_.WriteTo(ref output, _repeated_fids_codec);
      oids_.WriteTo(ref output, _repeated_oids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fids_.CalculateSize(_repeated_fids_codec);
      size += oids_.CalculateSize(_repeated_oids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CResponseReviveAll other) {
      if (other == null) {
        return;
      }
      fids_.Add(other.fids_);
      oids_.Add(other.oids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fids_.AddEntriesFrom(input, _repeated_fids_codec);
            break;
          }
          case 18:
          case 16: {
            oids_.AddEntriesFrom(input, _repeated_oids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            fids_.AddEntriesFrom(ref input, _repeated_fids_codec);
            break;
          }
          case 18:
          case 16: {
            oids_.AddEntriesFrom(ref input, _repeated_oids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSpecialRequestForTutorial : pb::IMessage<CSpecialRequestForTutorial>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSpecialRequestForTutorial> _parser = new pb::MessageParser<CSpecialRequestForTutorial>(() => new CSpecialRequestForTutorial());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSpecialRequestForTutorial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialRequestForTutorial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialRequestForTutorial(CSpecialRequestForTutorial other) : this() {
      _hasBits0 = other._hasBits0;
      request_ = other.request_;
      storeKey_ = other.storeKey_;
      oids_ = other.oids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialRequestForTutorial Clone() {
      return new CSpecialRequestForTutorial(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private readonly static string RequestDefaultValue = "";

    private string request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Request {
      get { return request_ ?? RequestDefaultValue; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "request" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequest {
      get { return request_ != null; }
    }
    /// <summary>Clears the value of the "request" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      request_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "oids" field.</summary>
    public const int OidsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_oids_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> oids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Oids {
      get { return oids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSpecialRequestForTutorial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSpecialRequestForTutorial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Request != other.Request) return false;
      if (StoreKey != other.StoreKey) return false;
      if(!oids_.Equals(other.oids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequest) hash ^= Request.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      hash ^= oids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequest) {
        output.WriteRawTag(10);
        output.WriteString(Request);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      oids_.WriteTo(output, _repeated_oids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequest) {
        output.WriteRawTag(10);
        output.WriteString(Request);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      oids_.WriteTo(ref output, _repeated_oids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequest) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Request);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      size += oids_.CalculateSize(_repeated_oids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSpecialRequestForTutorial other) {
      if (other == null) {
        return;
      }
      if (other.HasRequest) {
        Request = other.Request;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      oids_.Add(other.oids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Request = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            oids_.AddEntriesFrom(input, _repeated_oids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Request = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            oids_.AddEntriesFrom(ref input, _repeated_oids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CNpcReaction : pb::IMessage<CNpcReaction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CNpcReaction> _parser = new pb::MessageParser<CNpcReaction>(() => new CNpcReaction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNpcReaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNpcReaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNpcReaction(CNpcReaction other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      floor_ = other.floor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNpcReaction Clone() {
      return new CNpcReaction(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 2;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 1) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNpcReaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNpcReaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Floor != other.Floor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasFloor) {
        output.WriteRawTag(16);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasFloor) {
        output.WriteRawTag(16);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNpcReaction other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CToutingResult : pb::IMessage<CToutingResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CToutingResult> _parser = new pb::MessageParser<CToutingResult>(() => new CToutingResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CToutingResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CToutingResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CToutingResult(CToutingResult other) : this() {
      _hasBits0 = other._hasBits0;
      success_ = other.success_;
      patronId_ = other.patronId_;
      isFinished_ = other.isFinished_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CToutingResult Clone() {
      return new CToutingResult(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private readonly static bool SuccessDefaultValue = false;

    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { if ((_hasBits0 & 1) != 0) { return success_; } else { return SuccessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        success_ = value;
      }
    }
    /// <summary>Gets whether the "success" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccess {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "success" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccess() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 2;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    /// <summary>Field number for the "isFinished" field.</summary>
    public const int IsFinishedFieldNumber = 3;
    private readonly static bool IsFinishedDefaultValue = false;

    private bool isFinished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinished {
      get { if ((_hasBits0 & 2) != 0) { return isFinished_; } else { return IsFinishedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isFinished_ = value;
      }
    }
    /// <summary>Gets whether the "isFinished" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsFinished {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "isFinished" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsFinished() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CToutingResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CToutingResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (PatronId != other.PatronId) return false;
      if (IsFinished != other.IsFinished) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSuccess) hash ^= Success.GetHashCode();
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (HasIsFinished) hash ^= IsFinished.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSuccess) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (HasPatronId) {
        output.WriteRawTag(18);
        output.WriteString(PatronId);
      }
      if (HasIsFinished) {
        output.WriteRawTag(24);
        output.WriteBool(IsFinished);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSuccess) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (HasPatronId) {
        output.WriteRawTag(18);
        output.WriteString(PatronId);
      }
      if (HasIsFinished) {
        output.WriteRawTag(24);
        output.WriteBool(IsFinished);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSuccess) {
        size += 1 + 1;
      }
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (HasIsFinished) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CToutingResult other) {
      if (other == null) {
        return;
      }
      if (other.HasSuccess) {
        Success = other.Success;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      if (other.HasIsFinished) {
        IsFinished = other.IsFinished;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            PatronId = input.ReadString();
            break;
          }
          case 24: {
            IsFinished = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            PatronId = input.ReadString();
            break;
          }
          case 24: {
            IsFinished = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronToutingResult : pb::IMessage<CPatronToutingResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronToutingResult> _parser = new pb::MessageParser<CPatronToutingResult>(() => new CPatronToutingResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronToutingResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutingResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutingResult(CPatronToutingResult other) : this() {
      _hasBits0 = other._hasBits0;
      success_ = other.success_;
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutingResult Clone() {
      return new CPatronToutingResult(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private readonly static bool SuccessDefaultValue = false;

    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { if ((_hasBits0 & 1) != 0) { return success_; } else { return SuccessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        success_ = value;
      }
    }
    /// <summary>Gets whether the "success" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccess {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "success" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccess() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 2;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronToutingResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronToutingResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSuccess) hash ^= Success.GetHashCode();
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSuccess) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (HasPatronId) {
        output.WriteRawTag(18);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSuccess) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (HasPatronId) {
        output.WriteRawTag(18);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSuccess) {
        size += 1 + 1;
      }
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronToutingResult other) {
      if (other == null) {
        return;
      }
      if (other.HasSuccess) {
        Success = other.Success;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronEventToutingResult : pb::IMessage<CPatronEventToutingResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronEventToutingResult> _parser = new pb::MessageParser<CPatronEventToutingResult>(() => new CPatronEventToutingResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronEventToutingResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronEventToutingResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronEventToutingResult(CPatronEventToutingResult other) : this() {
      itemType_ = other.itemType_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronEventToutingResult Clone() {
      return new CPatronEventToutingResult(this);
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 1;
    private readonly static string ItemTypeDefaultValue = "";

    private string itemType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemType {
      get { return itemType_ ?? ItemTypeDefaultValue; }
      set {
        itemType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemType {
      get { return itemType_ != null; }
    }
    /// <summary>Clears the value of the "itemType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemType() {
      itemType_ = null;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronEventToutingResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronEventToutingResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemType != other.ItemType) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemType) hash ^= ItemType.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemType) {
        output.WriteRawTag(10);
        output.WriteString(ItemType);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemType) {
        output.WriteRawTag(10);
        output.WriteString(ItemType);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemType);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronEventToutingResult other) {
      if (other == null) {
        return;
      }
      if (other.HasItemType) {
        ItemType = other.ItemType;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemType = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ItemType = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCleanChair : pb::IMessage<CCleanChair>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCleanChair> _parser = new pb::MessageParser<CCleanChair>(() => new CCleanChair());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCleanChair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanChair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanChair(CCleanChair other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCleanChair Clone() {
      return new CCleanChair(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCleanChair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCleanChair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCleanChair other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CFreeGiftSend : pb::IMessage<CFreeGiftSend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CFreeGiftSend> _parser = new pb::MessageParser<CFreeGiftSend>(() => new CFreeGiftSend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CFreeGiftSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFreeGiftSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFreeGiftSend(CFreeGiftSend other) : this() {
      giftId_ = other.giftId_;
      friendId_ = other.friendId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFreeGiftSend Clone() {
      return new CFreeGiftSend(this);
    }

    /// <summary>Field number for the "giftId" field.</summary>
    public const int GiftIdFieldNumber = 1;
    private readonly static string GiftIdDefaultValue = "";

    private string giftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GiftId {
      get { return giftId_ ?? GiftIdDefaultValue; }
      set {
        giftId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "giftId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftId {
      get { return giftId_ != null; }
    }
    /// <summary>Clears the value of the "giftId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftId() {
      giftId_ = null;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_friendId_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> friendId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FriendId {
      get { return friendId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CFreeGiftSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CFreeGiftSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GiftId != other.GiftId) return false;
      if(!friendId_.Equals(other.friendId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGiftId) hash ^= GiftId.GetHashCode();
      hash ^= friendId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGiftId) {
        output.WriteRawTag(10);
        output.WriteString(GiftId);
      }
      friendId_.WriteTo(output, _repeated_friendId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGiftId) {
        output.WriteRawTag(10);
        output.WriteString(GiftId);
      }
      friendId_.WriteTo(ref output, _repeated_friendId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGiftId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GiftId);
      }
      size += friendId_.CalculateSize(_repeated_friendId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CFreeGiftSend other) {
      if (other == null) {
        return;
      }
      if (other.HasGiftId) {
        GiftId = other.GiftId;
      }
      friendId_.Add(other.friendId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GiftId = input.ReadString();
            break;
          }
          case 18: {
            friendId_.AddEntriesFrom(input, _repeated_friendId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GiftId = input.ReadString();
            break;
          }
          case 18: {
            friendId_.AddEntriesFrom(ref input, _repeated_friendId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CFreeGiftResponse : pb::IMessage<CFreeGiftResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CFreeGiftResponse> _parser = new pb::MessageParser<CFreeGiftResponse>(() => new CFreeGiftResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CFreeGiftResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFreeGiftResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFreeGiftResponse(CFreeGiftResponse other) : this() {
      _hasBits0 = other._hasBits0;
      accept_ = other.accept_;
      freindId_ = other.freindId_;
      giftId_ = other.giftId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFreeGiftResponse Clone() {
      return new CFreeGiftResponse(this);
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 1;
    private readonly static bool AcceptDefaultValue = false;

    private bool accept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { if ((_hasBits0 & 1) != 0) { return accept_; } else { return AcceptDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accept_ = value;
      }
    }
    /// <summary>Gets whether the "accept" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccept {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "accept" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccept() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "freindId" field.</summary>
    public const int FreindIdFieldNumber = 2;
    private readonly static string FreindIdDefaultValue = "";

    private string freindId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreindId {
      get { return freindId_ ?? FreindIdDefaultValue; }
      set {
        freindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "freindId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFreindId {
      get { return freindId_ != null; }
    }
    /// <summary>Clears the value of the "freindId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFreindId() {
      freindId_ = null;
    }

    /// <summary>Field number for the "giftId" field.</summary>
    public const int GiftIdFieldNumber = 3;
    private readonly static string GiftIdDefaultValue = "";

    private string giftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GiftId {
      get { return giftId_ ?? GiftIdDefaultValue; }
      set {
        giftId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "giftId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftId {
      get { return giftId_ != null; }
    }
    /// <summary>Clears the value of the "giftId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftId() {
      giftId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CFreeGiftResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CFreeGiftResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accept != other.Accept) return false;
      if (FreindId != other.FreindId) return false;
      if (GiftId != other.GiftId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccept) hash ^= Accept.GetHashCode();
      if (HasFreindId) hash ^= FreindId.GetHashCode();
      if (HasGiftId) hash ^= GiftId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccept) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (HasFreindId) {
        output.WriteRawTag(18);
        output.WriteString(FreindId);
      }
      if (HasGiftId) {
        output.WriteRawTag(26);
        output.WriteString(GiftId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccept) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (HasFreindId) {
        output.WriteRawTag(18);
        output.WriteString(FreindId);
      }
      if (HasGiftId) {
        output.WriteRawTag(26);
        output.WriteString(GiftId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccept) {
        size += 1 + 1;
      }
      if (HasFreindId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FreindId);
      }
      if (HasGiftId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GiftId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CFreeGiftResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasAccept) {
        Accept = other.Accept;
      }
      if (other.HasFreindId) {
        FreindId = other.FreindId;
      }
      if (other.HasGiftId) {
        GiftId = other.GiftId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            FreindId = input.ReadString();
            break;
          }
          case 26: {
            GiftId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            FreindId = input.ReadString();
            break;
          }
          case 26: {
            GiftId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CNPCGiftSend : pb::IMessage<CNPCGiftSend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CNPCGiftSend> _parser = new pb::MessageParser<CNPCGiftSend>(() => new CNPCGiftSend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNPCGiftSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNPCGiftSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNPCGiftSend(CNPCGiftSend other) : this() {
      eventId_ = other.eventId_;
      npcId_ = other.npcId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNPCGiftSend Clone() {
      return new CNPCGiftSend(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 2;
    private readonly static string NpcIdDefaultValue = "";

    private string npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NpcId {
      get { return npcId_ ?? NpcIdDefaultValue; }
      set {
        npcId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "npcId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcId {
      get { return npcId_ != null; }
    }
    /// <summary>Clears the value of the "npcId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcId() {
      npcId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNPCGiftSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNPCGiftSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (NpcId != other.NpcId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasNpcId) hash ^= NpcId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasNpcId) {
        output.WriteRawTag(18);
        output.WriteString(NpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasNpcId) {
        output.WriteRawTag(18);
        output.WriteString(NpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (HasNpcId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NpcId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNPCGiftSend other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            NpcId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            NpcId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CIncDailyLimit : pb::IMessage<CIncDailyLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CIncDailyLimit> _parser = new pb::MessageParser<CIncDailyLimit>(() => new CIncDailyLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIncDailyLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncDailyLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncDailyLimit(CIncDailyLimit other) : this() {
      limitId_ = other.limitId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncDailyLimit Clone() {
      return new CIncDailyLimit(this);
    }

    /// <summary>Field number for the "limitId" field.</summary>
    public const int LimitIdFieldNumber = 1;
    private readonly static string LimitIdDefaultValue = "";

    private string limitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LimitId {
      get { return limitId_ ?? LimitIdDefaultValue; }
      set {
        limitId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "limitId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLimitId {
      get { return limitId_ != null; }
    }
    /// <summary>Clears the value of the "limitId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLimitId() {
      limitId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIncDailyLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIncDailyLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LimitId != other.LimitId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLimitId) hash ^= LimitId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLimitId) {
        output.WriteRawTag(10);
        output.WriteString(LimitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLimitId) {
        output.WriteRawTag(10);
        output.WriteString(LimitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLimitId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LimitId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIncDailyLimit other) {
      if (other == null) {
        return;
      }
      if (other.HasLimitId) {
        LimitId = other.LimitId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LimitId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LimitId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CIncWeeklyLimit : pb::IMessage<CIncWeeklyLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CIncWeeklyLimit> _parser = new pb::MessageParser<CIncWeeklyLimit>(() => new CIncWeeklyLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIncWeeklyLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncWeeklyLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncWeeklyLimit(CIncWeeklyLimit other) : this() {
      limitId_ = other.limitId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncWeeklyLimit Clone() {
      return new CIncWeeklyLimit(this);
    }

    /// <summary>Field number for the "limitId" field.</summary>
    public const int LimitIdFieldNumber = 1;
    private readonly static string LimitIdDefaultValue = "";

    private string limitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LimitId {
      get { return limitId_ ?? LimitIdDefaultValue; }
      set {
        limitId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "limitId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLimitId {
      get { return limitId_ != null; }
    }
    /// <summary>Clears the value of the "limitId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLimitId() {
      limitId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIncWeeklyLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIncWeeklyLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LimitId != other.LimitId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLimitId) hash ^= LimitId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLimitId) {
        output.WriteRawTag(10);
        output.WriteString(LimitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLimitId) {
        output.WriteRawTag(10);
        output.WriteString(LimitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLimitId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LimitId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIncWeeklyLimit other) {
      if (other == null) {
        return;
      }
      if (other.HasLimitId) {
        LimitId = other.LimitId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LimitId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LimitId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTryExpire : pb::IMessage<CTryExpire>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTryExpire> _parser = new pb::MessageParser<CTryExpire>(() => new CTryExpire());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTryExpire> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTryExpire() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTryExpire(CTryExpire other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.type_;
      storeKey_ = other.storeKey_;
      changeItemElem_ = other.changeItemElem_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTryExpire Clone() {
      return new CTryExpire(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "changeItemElem" field.</summary>
    public const int ChangeItemElemFieldNumber = 4;
    private readonly static string ChangeItemElemDefaultValue = "";

    private string changeItemElem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChangeItemElem {
      get { return changeItemElem_ ?? ChangeItemElemDefaultValue; }
      set {
        changeItemElem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "changeItemElem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChangeItemElem {
      get { return changeItemElem_ != null; }
    }
    /// <summary>Clears the value of the "changeItemElem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangeItemElem() {
      changeItemElem_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTryExpire);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTryExpire other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (StoreKey != other.StoreKey) return false;
      if (ChangeItemElem != other.ChangeItemElem) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasChangeItemElem) hash ^= ChangeItemElem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasChangeItemElem) {
        output.WriteRawTag(34);
        output.WriteString(ChangeItemElem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasChangeItemElem) {
        output.WriteRawTag(34);
        output.WriteString(ChangeItemElem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasChangeItemElem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangeItemElem);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTryExpire other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasChangeItemElem) {
        ChangeItemElem = other.ChangeItemElem;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 34: {
            ChangeItemElem = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 34: {
            ChangeItemElem = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetDailyReward : pb::IMessage<CGetDailyReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetDailyReward> _parser = new pb::MessageParser<CGetDailyReward>(() => new CGetDailyReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetDailyReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetDailyReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetDailyReward(CGetDailyReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetDailyReward Clone() {
      return new CGetDailyReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetDailyReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetDailyReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetDailyReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CSellSideDishStart : pb::IMessage<CSellSideDishStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSellSideDishStart> _parser = new pb::MessageParser<CSellSideDishStart>(() => new CSellSideDishStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSellSideDishStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishStart(CSellSideDishStart other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      sideDishId_ = other.sideDishId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishStart Clone() {
      return new CSellSideDishStart(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sideDishId" field.</summary>
    public const int SideDishIdFieldNumber = 2;
    private readonly static string SideDishIdDefaultValue = "";

    private string sideDishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SideDishId {
      get { return sideDishId_ ?? SideDishIdDefaultValue; }
      set {
        sideDishId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sideDishId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSideDishId {
      get { return sideDishId_ != null; }
    }
    /// <summary>Clears the value of the "sideDishId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSideDishId() {
      sideDishId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSellSideDishStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSellSideDishStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (SideDishId != other.SideDishId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasSideDishId) hash ^= SideDishId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasSideDishId) {
        output.WriteRawTag(18);
        output.WriteString(SideDishId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasSideDishId) {
        output.WriteRawTag(18);
        output.WriteString(SideDishId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasSideDishId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SideDishId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSellSideDishStart other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasSideDishId) {
        SideDishId = other.SideDishId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            SideDishId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            SideDishId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSideDishSell : pb::IMessage<CSideDishSell>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSideDishSell> _parser = new pb::MessageParser<CSideDishSell>(() => new CSideDishSell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSideDishSell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSideDishSell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSideDishSell(CSideDishSell other) : this() {
      objInfo_ = other.objInfo_.Clone();
      count_ = other.count_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSideDishSell Clone() {
      return new CSideDishSell(this);
    }

    /// <summary>Field number for the "objInfo" field.</summary>
    public const int ObjInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_objInfo_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> objInfo_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ObjInfo {
      get { return objInfo_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_count_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Count {
      get { return count_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSideDishSell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSideDishSell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objInfo_.Equals(other.objInfo_)) return false;
      if(!count_.Equals(other.count_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objInfo_.GetHashCode();
      hash ^= count_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objInfo_.WriteTo(output, _repeated_objInfo_codec);
      count_.WriteTo(output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objInfo_.WriteTo(ref output, _repeated_objInfo_codec);
      count_.WriteTo(ref output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objInfo_.CalculateSize(_repeated_objInfo_codec);
      size += count_.CalculateSize(_repeated_count_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSideDishSell other) {
      if (other == null) {
        return;
      }
      objInfo_.Add(other.objInfo_);
      count_.Add(other.count_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objInfo_.AddEntriesFrom(input, _repeated_objInfo_codec);
            break;
          }
          case 18:
          case 16: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objInfo_.AddEntriesFrom(ref input, _repeated_objInfo_codec);
            break;
          }
          case 18:
          case 16: {
            count_.AddEntriesFrom(ref input, _repeated_count_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSellSideDishFin : pb::IMessage<CSellSideDishFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSellSideDishFin> _parser = new pb::MessageParser<CSellSideDishFin>(() => new CSellSideDishFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSellSideDishFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishFin(CSellSideDishFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishFin Clone() {
      return new CSellSideDishFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSellSideDishFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSellSideDishFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSellSideDishFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSellSideDishShorten : pb::IMessage<CSellSideDishShorten>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSellSideDishShorten> _parser = new pb::MessageParser<CSellSideDishShorten>(() => new CSellSideDishShorten());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSellSideDishShorten> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishShorten() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishShorten(CSellSideDishShorten other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSellSideDishShorten Clone() {
      return new CSellSideDishShorten(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSellSideDishShorten);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSellSideDishShorten other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSellSideDishShorten other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyCashBean : pb::IMessage<CBuyCashBean>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyCashBean> _parser = new pb::MessageParser<CBuyCashBean>(() => new CBuyCashBean());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyCashBean> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyCashBean() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyCashBean(CBuyCashBean other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      count_ = other.count_;
      bean_ = other.bean_;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyCashBean Clone() {
      return new CBuyCashBean(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bean" field.</summary>
    public const int BeanFieldNumber = 3;
    private readonly static int BeanDefaultValue = 0;

    private int bean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bean {
      get { if ((_hasBits0 & 2) != 0) { return bean_; } else { return BeanDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bean_ = value;
      }
    }
    /// <summary>Gets whether the "bean" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBean {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bean" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBean() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 4;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyCashBean);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyCashBean other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (Bean != other.Bean) return false;
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasBean) hash ^= Bean.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasBean) {
        output.WriteRawTag(24);
        output.WriteInt32(Bean);
      }
      if (HasCash) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasBean) {
        output.WriteRawTag(24);
        output.WriteInt32(Bean);
      }
      if (HasCash) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (HasBean) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bean);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyCashBean other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasBean) {
        Bean = other.Bean;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Bean = input.ReadInt32();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Bean = input.ReadInt32();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyCashRoastTicket : pb::IMessage<CBuyCashRoastTicket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyCashRoastTicket> _parser = new pb::MessageParser<CBuyCashRoastTicket>(() => new CBuyCashRoastTicket());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyCashRoastTicket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyCashRoastTicket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyCashRoastTicket(CBuyCashRoastTicket other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      count_ = other.count_;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyCashRoastTicket Clone() {
      return new CBuyCashRoastTicket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 3;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyCashRoastTicket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyCashRoastTicket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyCashRoastTicket other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyBackground : pb::IMessage<CBuyBackground>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyBackground> _parser = new pb::MessageParser<CBuyBackground>(() => new CBuyBackground());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyBackground> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyBackground() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyBackground(CBuyBackground other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.type_;
      storeKey_ = other.storeKey_;
      price_ = other.price_;
      cherryShop_ = other.cherryShop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyBackground Clone() {
      return new CBuyBackground(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 2) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cherryShop" field.</summary>
    public const int CherryShopFieldNumber = 5;
    private readonly static bool CherryShopDefaultValue = false;

    private bool cherryShop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CherryShop {
      get { if ((_hasBits0 & 4) != 0) { return cherryShop_; } else { return CherryShopDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cherryShop_ = value;
      }
    }
    /// <summary>Gets whether the "cherryShop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCherryShop {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cherryShop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCherryShop() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyBackground);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyBackground other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (StoreKey != other.StoreKey) return false;
      if (Price != other.Price) return false;
      if (CherryShop != other.CherryShop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (HasCherryShop) hash ^= CherryShop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (HasCherryShop) {
        output.WriteRawTag(40);
        output.WriteBool(CherryShop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (HasCherryShop) {
        output.WriteRawTag(40);
        output.WriteBool(CherryShop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (HasCherryShop) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyBackground other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasCherryShop) {
        CherryShop = other.CherryShop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 40: {
            CherryShop = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 40: {
            CherryShop = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChangeBackground : pb::IMessage<CChangeBackground>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChangeBackground> _parser = new pb::MessageParser<CChangeBackground>(() => new CChangeBackground());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChangeBackground> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeBackground() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeBackground(CChangeBackground other) : this() {
      _hasBits0 = other._hasBits0;
      reset_ = other.reset_;
      id_ = other.id_;
      type_ = other.type_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeBackground Clone() {
      return new CChangeBackground(this);
    }

    /// <summary>Field number for the "reset" field.</summary>
    public const int ResetFieldNumber = 1;
    private readonly static bool ResetDefaultValue = false;

    private bool reset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reset {
      get { if ((_hasBits0 & 1) != 0) { return reset_; } else { return ResetDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reset_ = value;
      }
    }
    /// <summary>Gets whether the "reset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReset {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReset() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChangeBackground);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChangeBackground other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reset != other.Reset) return false;
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReset) hash ^= Reset.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReset) {
        output.WriteRawTag(8);
        output.WriteBool(Reset);
      }
      if (HasId) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (HasType) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReset) {
        output.WriteRawTag(8);
        output.WriteBool(Reset);
      }
      if (HasId) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (HasType) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasReset) {
        size += 1 + 1;
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChangeBackground other) {
      if (other == null) {
        return;
      }
      if (other.HasReset) {
        Reset = other.Reset;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reset = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Reset = input.ReadBool();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChangeSecondFloorBackground : pb::IMessage<CChangeSecondFloorBackground>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChangeSecondFloorBackground> _parser = new pb::MessageParser<CChangeSecondFloorBackground>(() => new CChangeSecondFloorBackground());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChangeSecondFloorBackground> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeSecondFloorBackground() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeSecondFloorBackground(CChangeSecondFloorBackground other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      bgId_ = other.bgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeSecondFloorBackground Clone() {
      return new CChangeSecondFloorBackground(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bgId" field.</summary>
    public const int BgIdFieldNumber = 2;
    private readonly static string BgIdDefaultValue = "";

    private string bgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BgId {
      get { return bgId_ ?? BgIdDefaultValue; }
      set {
        bgId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "bgId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBgId {
      get { return bgId_ != null; }
    }
    /// <summary>Clears the value of the "bgId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBgId() {
      bgId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChangeSecondFloorBackground);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChangeSecondFloorBackground other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (BgId != other.BgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasBgId) hash ^= BgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasBgId) {
        output.WriteRawTag(18);
        output.WriteString(BgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasBgId) {
        output.WriteRawTag(18);
        output.WriteString(BgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasBgId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChangeSecondFloorBackground other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasBgId) {
        BgId = other.BgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            BgId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            BgId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUnlockBean : pb::IMessage<CUnlockBean>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUnlockBean> _parser = new pb::MessageParser<CUnlockBean>(() => new CUnlockBean());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUnlockBean> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockBean() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockBean(CUnlockBean other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockBean Clone() {
      return new CUnlockBean(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUnlockBean);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUnlockBean other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUnlockBean other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUnlockCoffee : pb::IMessage<CUnlockCoffee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUnlockCoffee> _parser = new pb::MessageParser<CUnlockCoffee>(() => new CUnlockCoffee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUnlockCoffee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockCoffee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockCoffee(CUnlockCoffee other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockCoffee Clone() {
      return new CUnlockCoffee(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUnlockCoffee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUnlockCoffee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUnlockCoffee other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUnlockSideDish : pb::IMessage<CUnlockSideDish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUnlockSideDish> _parser = new pb::MessageParser<CUnlockSideDish>(() => new CUnlockSideDish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUnlockSideDish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockSideDish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockSideDish(CUnlockSideDish other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnlockSideDish Clone() {
      return new CUnlockSideDish(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUnlockSideDish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUnlockSideDish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUnlockSideDish other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpandAtOnce : pb::IMessage<CExpandAtOnce>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpandAtOnce> _parser = new pb::MessageParser<CExpandAtOnce>(() => new CExpandAtOnce());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpandAtOnce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandAtOnce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandAtOnce(CExpandAtOnce other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandAtOnce Clone() {
      return new CExpandAtOnce(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpandAtOnce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpandAtOnce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpandAtOnce other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SGiftBoxLoaded : pb::IMessage<SGiftBoxLoaded>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SGiftBoxLoaded> _parser = new pb::MessageParser<SGiftBoxLoaded>(() => new SGiftBoxLoaded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SGiftBoxLoaded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGiftBoxLoaded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGiftBoxLoaded(SGiftBoxLoaded other) : this() {
      json_ = other.json_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SGiftBoxLoaded Clone() {
      return new SGiftBoxLoaded(this);
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 1;
    private readonly static string JsonDefaultValue = "";

    private string json_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Json {
      get { return json_ ?? JsonDefaultValue; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "json" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJson {
      get { return json_ != null; }
    }
    /// <summary>Clears the value of the "json" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJson() {
      json_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SGiftBoxLoaded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SGiftBoxLoaded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Json != other.Json) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasJson) hash ^= Json.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasJson) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasJson) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasJson) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SGiftBoxLoaded other) {
      if (other == null) {
        return;
      }
      if (other.HasJson) {
        Json = other.Json;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGiftReceive : pb::IMessage<CGiftReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGiftReceive> _parser = new pb::MessageParser<CGiftReceive>(() => new CGiftReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGiftReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGiftReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGiftReceive(CGiftReceive other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGiftReceive Clone() {
      return new CGiftReceive(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGiftReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGiftReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGiftReceive other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CReloadGiftBox : pb::IMessage<CReloadGiftBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CReloadGiftBox> _parser = new pb::MessageParser<CReloadGiftBox>(() => new CReloadGiftBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CReloadGiftBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReloadGiftBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReloadGiftBox(CReloadGiftBox other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReloadGiftBox Clone() {
      return new CReloadGiftBox(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CReloadGiftBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CReloadGiftBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CReloadGiftBox other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CGiftReceiveMultiple : pb::IMessage<CGiftReceiveMultiple>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGiftReceiveMultiple> _parser = new pb::MessageParser<CGiftReceiveMultiple>(() => new CGiftReceiveMultiple());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGiftReceiveMultiple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGiftReceiveMultiple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGiftReceiveMultiple(CGiftReceiveMultiple other) : this() {
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGiftReceiveMultiple Clone() {
      return new CGiftReceiveMultiple(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGiftReceiveMultiple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGiftReceiveMultiple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGiftReceiveMultiple other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CWriteLog : pb::IMessage<CWriteLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CWriteLog> _parser = new pb::MessageParser<CWriteLog>(() => new CWriteLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CWriteLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CWriteLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CWriteLog(CWriteLog other) : this() {
      logMsg_ = other.logMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CWriteLog Clone() {
      return new CWriteLog(this);
    }

    /// <summary>Field number for the "logMsg" field.</summary>
    public const int LogMsgFieldNumber = 1;
    private readonly static string LogMsgDefaultValue = "";

    private string logMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogMsg {
      get { return logMsg_ ?? LogMsgDefaultValue; }
      set {
        logMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "logMsg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLogMsg {
      get { return logMsg_ != null; }
    }
    /// <summary>Clears the value of the "logMsg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLogMsg() {
      logMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CWriteLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CWriteLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogMsg != other.LogMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLogMsg) hash ^= LogMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLogMsg) {
        output.WriteRawTag(10);
        output.WriteString(LogMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLogMsg) {
        output.WriteRawTag(10);
        output.WriteString(LogMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLogMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CWriteLog other) {
      if (other == null) {
        return;
      }
      if (other.HasLogMsg) {
        LogMsg = other.LogMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LogMsg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LogMsg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUseCoupon : pb::IMessage<CUseCoupon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUseCoupon> _parser = new pb::MessageParser<CUseCoupon>(() => new CUseCoupon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUseCoupon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseCoupon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseCoupon(CUseCoupon other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseCoupon Clone() {
      return new CUseCoupon(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUseCoupon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUseCoupon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUseCoupon other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SUseCouponResult : pb::IMessage<SUseCouponResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SUseCouponResult> _parser = new pb::MessageParser<SUseCouponResult>(() => new SUseCouponResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUseCouponResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUseCouponResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUseCouponResult(SUseCouponResult other) : this() {
      _hasBits0 = other._hasBits0;
      success_ = other.success_;
      failResult_ = other.failResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUseCouponResult Clone() {
      return new SUseCouponResult(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private readonly static bool SuccessDefaultValue = false;

    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { if ((_hasBits0 & 1) != 0) { return success_; } else { return SuccessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        success_ = value;
      }
    }
    /// <summary>Gets whether the "success" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccess {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "success" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccess() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "failResult" field.</summary>
    public const int FailResultFieldNumber = 2;
    private readonly static string FailResultDefaultValue = "";

    private string failResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FailResult {
      get { return failResult_ ?? FailResultDefaultValue; }
      set {
        failResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "failResult" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFailResult {
      get { return failResult_ != null; }
    }
    /// <summary>Clears the value of the "failResult" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFailResult() {
      failResult_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUseCouponResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUseCouponResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (FailResult != other.FailResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSuccess) hash ^= Success.GetHashCode();
      if (HasFailResult) hash ^= FailResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSuccess) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (HasFailResult) {
        output.WriteRawTag(18);
        output.WriteString(FailResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSuccess) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (HasFailResult) {
        output.WriteRawTag(18);
        output.WriteString(FailResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSuccess) {
        size += 1 + 1;
      }
      if (HasFailResult) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FailResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUseCouponResult other) {
      if (other == null) {
        return;
      }
      if (other.HasSuccess) {
        Success = other.Success;
      }
      if (other.HasFailResult) {
        FailResult = other.FailResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            FailResult = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            FailResult = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CLovelyGiftSend : pb::IMessage<CLovelyGiftSend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLovelyGiftSend> _parser = new pb::MessageParser<CLovelyGiftSend>(() => new CLovelyGiftSend());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLovelyGiftSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLovelyGiftSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLovelyGiftSend(CLovelyGiftSend other) : this() {
      _hasBits0 = other._hasBits0;
      giftId_ = other.giftId_;
      friendId_ = other.friendId_;
      count_ = other.count_;
      senderName_ = other.senderName_;
      message_ = other.message_;
      eventType_ = other.eventType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLovelyGiftSend Clone() {
      return new CLovelyGiftSend(this);
    }

    /// <summary>Field number for the "giftId" field.</summary>
    public const int GiftIdFieldNumber = 1;
    private readonly static string GiftIdDefaultValue = "";

    private string giftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GiftId {
      get { return giftId_ ?? GiftIdDefaultValue; }
      set {
        giftId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "giftId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGiftId {
      get { return giftId_ != null; }
    }
    /// <summary>Clears the value of the "giftId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGiftId() {
      giftId_ = null;
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 4;
    private readonly static string SenderNameDefaultValue = "";

    private string senderName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_ ?? SenderNameDefaultValue; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "senderName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSenderName {
      get { return senderName_ != null; }
    }
    /// <summary>Clears the value of the "senderName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSenderName() {
      senderName_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 6;
    private readonly static string EventTypeDefaultValue = "";

    private string eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_ ?? EventTypeDefaultValue; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventType {
      get { return eventType_ != null; }
    }
    /// <summary>Clears the value of the "eventType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventType() {
      eventType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLovelyGiftSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLovelyGiftSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GiftId != other.GiftId) return false;
      if (FriendId != other.FriendId) return false;
      if (Count != other.Count) return false;
      if (SenderName != other.SenderName) return false;
      if (Message != other.Message) return false;
      if (EventType != other.EventType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGiftId) hash ^= GiftId.GetHashCode();
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasSenderName) hash ^= SenderName.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasEventType) hash ^= EventType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGiftId) {
        output.WriteRawTag(10);
        output.WriteString(GiftId);
      }
      if (HasFriendId) {
        output.WriteRawTag(18);
        output.WriteString(FriendId);
      }
      if (HasCount) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (HasSenderName) {
        output.WriteRawTag(34);
        output.WriteString(SenderName);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (HasEventType) {
        output.WriteRawTag(50);
        output.WriteString(EventType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGiftId) {
        output.WriteRawTag(10);
        output.WriteString(GiftId);
      }
      if (HasFriendId) {
        output.WriteRawTag(18);
        output.WriteString(FriendId);
      }
      if (HasCount) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (HasSenderName) {
        output.WriteRawTag(34);
        output.WriteString(SenderName);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (HasEventType) {
        output.WriteRawTag(50);
        output.WriteString(EventType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGiftId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GiftId);
      }
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (HasSenderName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasEventType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLovelyGiftSend other) {
      if (other == null) {
        return;
      }
      if (other.HasGiftId) {
        GiftId = other.GiftId;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasSenderName) {
        SenderName = other.SenderName;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasEventType) {
        EventType = other.EventType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GiftId = input.ReadString();
            break;
          }
          case 18: {
            FriendId = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 34: {
            SenderName = input.ReadString();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
          case 50: {
            EventType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GiftId = input.ReadString();
            break;
          }
          case 18: {
            FriendId = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 34: {
            SenderName = input.ReadString();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
          case 50: {
            EventType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMakeSideDishStart : pb::IMessage<CMakeSideDishStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMakeSideDishStart> _parser = new pb::MessageParser<CMakeSideDishStart>(() => new CMakeSideDishStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMakeSideDishStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishStart(CMakeSideDishStart other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      descId_ = other.descId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishStart Clone() {
      return new CMakeSideDishStart(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 2;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMakeSideDishStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMakeSideDishStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (DescId != other.DescId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMakeSideDishStart other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMakeSideDishFin : pb::IMessage<CMakeSideDishFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMakeSideDishFin> _parser = new pb::MessageParser<CMakeSideDishFin>(() => new CMakeSideDishFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMakeSideDishFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishFin(CMakeSideDishFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishFin Clone() {
      return new CMakeSideDishFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMakeSideDishFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMakeSideDishFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMakeSideDishFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMakeSideDishShorten : pb::IMessage<CMakeSideDishShorten>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMakeSideDishShorten> _parser = new pb::MessageParser<CMakeSideDishShorten>(() => new CMakeSideDishShorten());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMakeSideDishShorten> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishShorten() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishShorten(CMakeSideDishShorten other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      leftSec_ = other.leftSec_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishShorten Clone() {
      return new CMakeSideDishShorten(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leftSec" field.</summary>
    public const int LeftSecFieldNumber = 2;
    private readonly static int LeftSecDefaultValue = 0;

    private int leftSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSec {
      get { if ((_hasBits0 & 2) != 0) { return leftSec_; } else { return LeftSecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leftSec_ = value;
      }
    }
    /// <summary>Gets whether the "leftSec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftSec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leftSec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftSec() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 3;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMakeSideDishShorten);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMakeSideDishShorten other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (LeftSec != other.LeftSec) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasLeftSec) hash ^= LeftSec.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasLeftSec) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSec);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasLeftSec) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSec);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasLeftSec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSec);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMakeSideDishShorten other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasLeftSec) {
        LeftSec = other.LeftSec;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMakeSideDishRevive : pb::IMessage<CMakeSideDishRevive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMakeSideDishRevive> _parser = new pb::MessageParser<CMakeSideDishRevive>(() => new CMakeSideDishRevive());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMakeSideDishRevive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishRevive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishRevive(CMakeSideDishRevive other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeSideDishRevive Clone() {
      return new CMakeSideDishRevive(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMakeSideDishRevive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMakeSideDishRevive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMakeSideDishRevive other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMakeFortuneCookieStart : pb::IMessage<CMakeFortuneCookieStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMakeFortuneCookieStart> _parser = new pb::MessageParser<CMakeFortuneCookieStart>(() => new CMakeFortuneCookieStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMakeFortuneCookieStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeFortuneCookieStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeFortuneCookieStart(CMakeFortuneCookieStart other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      descId_ = other.descId_;
      storeKey_ = other.storeKey_;
      paymentType_ = other.paymentType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeFortuneCookieStart Clone() {
      return new CMakeFortuneCookieStart(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 2;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "paymentType" field.</summary>
    public const int PaymentTypeFieldNumber = 4;
    private readonly static string PaymentTypeDefaultValue = "";

    private string paymentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentType {
      get { return paymentType_ ?? PaymentTypeDefaultValue; }
      set {
        paymentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "paymentType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPaymentType {
      get { return paymentType_ != null; }
    }
    /// <summary>Clears the value of the "paymentType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPaymentType() {
      paymentType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMakeFortuneCookieStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMakeFortuneCookieStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (DescId != other.DescId) return false;
      if (StoreKey != other.StoreKey) return false;
      if (PaymentType != other.PaymentType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasPaymentType) hash ^= PaymentType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasPaymentType) {
        output.WriteRawTag(34);
        output.WriteString(PaymentType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasPaymentType) {
        output.WriteRawTag(34);
        output.WriteString(PaymentType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasPaymentType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMakeFortuneCookieStart other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasPaymentType) {
        PaymentType = other.PaymentType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 34: {
            PaymentType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 34: {
            PaymentType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMakeFortuneCookieFin : pb::IMessage<CMakeFortuneCookieFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMakeFortuneCookieFin> _parser = new pb::MessageParser<CMakeFortuneCookieFin>(() => new CMakeFortuneCookieFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMakeFortuneCookieFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeFortuneCookieFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeFortuneCookieFin(CMakeFortuneCookieFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMakeFortuneCookieFin Clone() {
      return new CMakeFortuneCookieFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMakeFortuneCookieFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMakeFortuneCookieFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMakeFortuneCookieFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronToutInstantCompletion : pb::IMessage<CPatronToutInstantCompletion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronToutInstantCompletion> _parser = new pb::MessageParser<CPatronToutInstantCompletion>(() => new CPatronToutInstantCompletion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronToutInstantCompletion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutInstantCompletion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutInstantCompletion(CPatronToutInstantCompletion other) : this() {
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutInstantCompletion Clone() {
      return new CPatronToutInstantCompletion(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronToutInstantCompletion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronToutInstantCompletion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronToutInstantCompletion other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronToutInstantCall : pb::IMessage<CPatronToutInstantCall>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronToutInstantCall> _parser = new pb::MessageParser<CPatronToutInstantCall>(() => new CPatronToutInstantCall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronToutInstantCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutInstantCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutInstantCall(CPatronToutInstantCall other) : this() {
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronToutInstantCall Clone() {
      return new CPatronToutInstantCall(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronToutInstantCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronToutInstantCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronToutInstantCall other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTalkPatron : pb::IMessage<CTalkPatron>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTalkPatron> _parser = new pb::MessageParser<CTalkPatron>(() => new CTalkPatron());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTalkPatron> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTalkPatron() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTalkPatron(CTalkPatron other) : this() {
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTalkPatron Clone() {
      return new CTalkPatron(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTalkPatron);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTalkPatron other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTalkPatron other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSpecialTalkPatronResult : pb::IMessage<CSpecialTalkPatronResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSpecialTalkPatronResult> _parser = new pb::MessageParser<CSpecialTalkPatronResult>(() => new CSpecialTalkPatronResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSpecialTalkPatronResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialTalkPatronResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialTalkPatronResult(CSpecialTalkPatronResult other) : this() {
      _hasBits0 = other._hasBits0;
      patronId_ = other.patronId_;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialTalkPatronResult Clone() {
      return new CSpecialTalkPatronResult(this);
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 1;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private readonly static bool SuccessDefaultValue = false;

    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { if ((_hasBits0 & 1) != 0) { return success_; } else { return SuccessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        success_ = value;
      }
    }
    /// <summary>Gets whether the "success" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccess {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "success" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccess() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSpecialTalkPatronResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSpecialTalkPatronResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatronId != other.PatronId) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (HasSuccess) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (HasSuccess) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPatronId) {
        output.WriteRawTag(10);
        output.WriteString(PatronId);
      }
      if (HasSuccess) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (HasSuccess) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSpecialTalkPatronResult other) {
      if (other == null) {
        return;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      if (other.HasSuccess) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PatronId = input.ReadString();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRefreshDataAfterLevelUp : pb::IMessage<CRefreshDataAfterLevelUp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRefreshDataAfterLevelUp> _parser = new pb::MessageParser<CRefreshDataAfterLevelUp>(() => new CRefreshDataAfterLevelUp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRefreshDataAfterLevelUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRefreshDataAfterLevelUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRefreshDataAfterLevelUp(CRefreshDataAfterLevelUp other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRefreshDataAfterLevelUp Clone() {
      return new CRefreshDataAfterLevelUp(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRefreshDataAfterLevelUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRefreshDataAfterLevelUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRefreshDataAfterLevelUp other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetRecycleTip : pb::IMessage<CGetRecycleTip>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetRecycleTip> _parser = new pb::MessageParser<CGetRecycleTip>(() => new CGetRecycleTip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetRecycleTip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetRecycleTip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetRecycleTip(CGetRecycleTip other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetRecycleTip Clone() {
      return new CGetRecycleTip(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetRecycleTip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetRecycleTip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetRecycleTip other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CResponseAllQuestAndExpansion : pb::IMessage<CResponseAllQuestAndExpansion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CResponseAllQuestAndExpansion> _parser = new pb::MessageParser<CResponseAllQuestAndExpansion>(() => new CResponseAllQuestAndExpansion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CResponseAllQuestAndExpansion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResponseAllQuestAndExpansion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResponseAllQuestAndExpansion(CResponseAllQuestAndExpansion other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResponseAllQuestAndExpansion Clone() {
      return new CResponseAllQuestAndExpansion(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CResponseAllQuestAndExpansion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CResponseAllQuestAndExpansion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CResponseAllQuestAndExpansion other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CGetTranxId : pb::IMessage<CGetTranxId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetTranxId> _parser = new pb::MessageParser<CGetTranxId>(() => new CGetTranxId());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetTranxId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetTranxId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetTranxId(CGetTranxId other) : this() {
      _hasBits0 = other._hasBits0;
      descId_ = other.descId_;
      market_ = other.market_;
      bonusRate_ = other.bonusRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetTranxId Clone() {
      return new CGetTranxId(this);
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 1;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 2;
    private readonly static string MarketDefaultValue = "";

    private string market_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Market {
      get { return market_ ?? MarketDefaultValue; }
      set {
        market_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "market" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarket {
      get { return market_ != null; }
    }
    /// <summary>Clears the value of the "market" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarket() {
      market_ = null;
    }

    /// <summary>Field number for the "bonusRate" field.</summary>
    public const int BonusRateFieldNumber = 3;
    private readonly static int BonusRateDefaultValue = 0;

    private int bonusRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BonusRate {
      get { if ((_hasBits0 & 1) != 0) { return bonusRate_; } else { return BonusRateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bonusRate_ = value;
      }
    }
    /// <summary>Gets whether the "bonusRate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonusRate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bonusRate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonusRate() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetTranxId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetTranxId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DescId != other.DescId) return false;
      if (Market != other.Market) return false;
      if (BonusRate != other.BonusRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasMarket) hash ^= Market.GetHashCode();
      if (HasBonusRate) hash ^= BonusRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasMarket) {
        output.WriteRawTag(18);
        output.WriteString(Market);
      }
      if (HasBonusRate) {
        output.WriteRawTag(24);
        output.WriteInt32(BonusRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasMarket) {
        output.WriteRawTag(18);
        output.WriteString(Market);
      }
      if (HasBonusRate) {
        output.WriteRawTag(24);
        output.WriteInt32(BonusRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasMarket) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Market);
      }
      if (HasBonusRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetTranxId other) {
      if (other == null) {
        return;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasMarket) {
        Market = other.Market;
      }
      if (other.HasBonusRate) {
        BonusRate = other.BonusRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 18: {
            Market = input.ReadString();
            break;
          }
          case 24: {
            BonusRate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 18: {
            Market = input.ReadString();
            break;
          }
          case 24: {
            BonusRate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInAppPurchaseResult : pb::IMessage<CInAppPurchaseResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInAppPurchaseResult> _parser = new pb::MessageParser<CInAppPurchaseResult>(() => new CInAppPurchaseResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInAppPurchaseResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInAppPurchaseResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInAppPurchaseResult(CInAppPurchaseResult other) : this() {
      _hasBits0 = other._hasBits0;
      market_ = other.market_;
      arg0_ = other.arg0_;
      arg1_ = other.arg1_;
      billingVersion_ = other.billingVersion_;
      packageName_ = other.packageName_;
      bonusRate_ = other.bonusRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInAppPurchaseResult Clone() {
      return new CInAppPurchaseResult(this);
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 1;
    private readonly static string MarketDefaultValue = "";

    private string market_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Market {
      get { return market_ ?? MarketDefaultValue; }
      set {
        market_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "market" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarket {
      get { return market_ != null; }
    }
    /// <summary>Clears the value of the "market" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarket() {
      market_ = null;
    }

    /// <summary>Field number for the "arg0" field.</summary>
    public const int Arg0FieldNumber = 2;
    private readonly static string Arg0DefaultValue = "";

    private string arg0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arg0 {
      get { return arg0_ ?? Arg0DefaultValue; }
      set {
        arg0_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "arg0" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArg0 {
      get { return arg0_ != null; }
    }
    /// <summary>Clears the value of the "arg0" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArg0() {
      arg0_ = null;
    }

    /// <summary>Field number for the "arg1" field.</summary>
    public const int Arg1FieldNumber = 3;
    private readonly static string Arg1DefaultValue = "";

    private string arg1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arg1 {
      get { return arg1_ ?? Arg1DefaultValue; }
      set {
        arg1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "arg1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArg1 {
      get { return arg1_ != null; }
    }
    /// <summary>Clears the value of the "arg1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArg1() {
      arg1_ = null;
    }

    /// <summary>Field number for the "billingVersion" field.</summary>
    public const int BillingVersionFieldNumber = 4;
    private readonly static int BillingVersionDefaultValue = 0;

    private int billingVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BillingVersion {
      get { if ((_hasBits0 & 1) != 0) { return billingVersion_; } else { return BillingVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        billingVersion_ = value;
      }
    }
    /// <summary>Gets whether the "billingVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBillingVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "billingVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBillingVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "packageName" field.</summary>
    public const int PackageNameFieldNumber = 5;
    private readonly static string PackageNameDefaultValue = "";

    private string packageName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageName {
      get { return packageName_ ?? PackageNameDefaultValue; }
      set {
        packageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "packageName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPackageName {
      get { return packageName_ != null; }
    }
    /// <summary>Clears the value of the "packageName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPackageName() {
      packageName_ = null;
    }

    /// <summary>Field number for the "bonusRate" field.</summary>
    public const int BonusRateFieldNumber = 6;
    private readonly static int BonusRateDefaultValue = 0;

    private int bonusRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BonusRate {
      get { if ((_hasBits0 & 2) != 0) { return bonusRate_; } else { return BonusRateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bonusRate_ = value;
      }
    }
    /// <summary>Gets whether the "bonusRate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonusRate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bonusRate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonusRate() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInAppPurchaseResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInAppPurchaseResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Market != other.Market) return false;
      if (Arg0 != other.Arg0) return false;
      if (Arg1 != other.Arg1) return false;
      if (BillingVersion != other.BillingVersion) return false;
      if (PackageName != other.PackageName) return false;
      if (BonusRate != other.BonusRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMarket) hash ^= Market.GetHashCode();
      if (HasArg0) hash ^= Arg0.GetHashCode();
      if (HasArg1) hash ^= Arg1.GetHashCode();
      if (HasBillingVersion) hash ^= BillingVersion.GetHashCode();
      if (HasPackageName) hash ^= PackageName.GetHashCode();
      if (HasBonusRate) hash ^= BonusRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMarket) {
        output.WriteRawTag(10);
        output.WriteString(Market);
      }
      if (HasArg0) {
        output.WriteRawTag(18);
        output.WriteString(Arg0);
      }
      if (HasArg1) {
        output.WriteRawTag(26);
        output.WriteString(Arg1);
      }
      if (HasBillingVersion) {
        output.WriteRawTag(32);
        output.WriteInt32(BillingVersion);
      }
      if (HasPackageName) {
        output.WriteRawTag(42);
        output.WriteString(PackageName);
      }
      if (HasBonusRate) {
        output.WriteRawTag(48);
        output.WriteInt32(BonusRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMarket) {
        output.WriteRawTag(10);
        output.WriteString(Market);
      }
      if (HasArg0) {
        output.WriteRawTag(18);
        output.WriteString(Arg0);
      }
      if (HasArg1) {
        output.WriteRawTag(26);
        output.WriteString(Arg1);
      }
      if (HasBillingVersion) {
        output.WriteRawTag(32);
        output.WriteInt32(BillingVersion);
      }
      if (HasPackageName) {
        output.WriteRawTag(42);
        output.WriteString(PackageName);
      }
      if (HasBonusRate) {
        output.WriteRawTag(48);
        output.WriteInt32(BonusRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMarket) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Market);
      }
      if (HasArg0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arg0);
      }
      if (HasArg1) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arg1);
      }
      if (HasBillingVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BillingVersion);
      }
      if (HasPackageName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageName);
      }
      if (HasBonusRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInAppPurchaseResult other) {
      if (other == null) {
        return;
      }
      if (other.HasMarket) {
        Market = other.Market;
      }
      if (other.HasArg0) {
        Arg0 = other.Arg0;
      }
      if (other.HasArg1) {
        Arg1 = other.Arg1;
      }
      if (other.HasBillingVersion) {
        BillingVersion = other.BillingVersion;
      }
      if (other.HasPackageName) {
        PackageName = other.PackageName;
      }
      if (other.HasBonusRate) {
        BonusRate = other.BonusRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Market = input.ReadString();
            break;
          }
          case 18: {
            Arg0 = input.ReadString();
            break;
          }
          case 26: {
            Arg1 = input.ReadString();
            break;
          }
          case 32: {
            BillingVersion = input.ReadInt32();
            break;
          }
          case 42: {
            PackageName = input.ReadString();
            break;
          }
          case 48: {
            BonusRate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Market = input.ReadString();
            break;
          }
          case 18: {
            Arg0 = input.ReadString();
            break;
          }
          case 26: {
            Arg1 = input.ReadString();
            break;
          }
          case 32: {
            BillingVersion = input.ReadInt32();
            break;
          }
          case 42: {
            PackageName = input.ReadString();
            break;
          }
          case 48: {
            BonusRate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetDanalServerInfo : pb::IMessage<CGetDanalServerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetDanalServerInfo> _parser = new pb::MessageParser<CGetDanalServerInfo>(() => new CGetDanalServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetDanalServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetDanalServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetDanalServerInfo(CGetDanalServerInfo other) : this() {
      descId_ = other.descId_;
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetDanalServerInfo Clone() {
      return new CGetDanalServerInfo(this);
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 1;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private readonly static string InfoDefaultValue = "";

    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_ ?? InfoDefaultValue; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInfo {
      get { return info_ != null; }
    }
    /// <summary>Clears the value of the "info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInfo() {
      info_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetDanalServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetDanalServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DescId != other.DescId) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasInfo) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasInfo) {
        output.WriteRawTag(18);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasInfo) {
        output.WriteRawTag(18);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetDanalServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasInfo) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 18: {
            Info = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 18: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDanalResendOTP : pb::IMessage<CDanalResendOTP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDanalResendOTP> _parser = new pb::MessageParser<CDanalResendOTP>(() => new CDanalResendOTP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDanalResendOTP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalResendOTP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalResendOTP(CDanalResendOTP other) : this() {
      serverInfo_ = other.serverInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalResendOTP Clone() {
      return new CDanalResendOTP(this);
    }

    /// <summary>Field number for the "serverInfo" field.</summary>
    public const int ServerInfoFieldNumber = 1;
    private readonly static string ServerInfoDefaultValue = "";

    private string serverInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerInfo {
      get { return serverInfo_ ?? ServerInfoDefaultValue; }
      set {
        serverInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "serverInfo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerInfo {
      get { return serverInfo_ != null; }
    }
    /// <summary>Clears the value of the "serverInfo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerInfo() {
      serverInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDanalResendOTP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDanalResendOTP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerInfo != other.ServerInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerInfo) hash ^= ServerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasServerInfo) {
        output.WriteRawTag(10);
        output.WriteString(ServerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasServerInfo) {
        output.WriteRawTag(10);
        output.WriteString(ServerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServerInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDanalResendOTP other) {
      if (other == null) {
        return;
      }
      if (other.HasServerInfo) {
        ServerInfo = other.ServerInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerInfo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServerInfo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDanalSimBill : pb::IMessage<CDanalSimBill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDanalSimBill> _parser = new pb::MessageParser<CDanalSimBill>(() => new CDanalSimBill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDanalSimBill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalSimBill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalSimBill(CDanalSimBill other) : this() {
      serverInfo_ = other.serverInfo_;
      otp_ = other.otp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalSimBill Clone() {
      return new CDanalSimBill(this);
    }

    /// <summary>Field number for the "serverInfo" field.</summary>
    public const int ServerInfoFieldNumber = 1;
    private readonly static string ServerInfoDefaultValue = "";

    private string serverInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerInfo {
      get { return serverInfo_ ?? ServerInfoDefaultValue; }
      set {
        serverInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "serverInfo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerInfo {
      get { return serverInfo_ != null; }
    }
    /// <summary>Clears the value of the "serverInfo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerInfo() {
      serverInfo_ = null;
    }

    /// <summary>Field number for the "otp" field.</summary>
    public const int OtpFieldNumber = 2;
    private readonly static string OtpDefaultValue = "";

    private string otp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Otp {
      get { return otp_ ?? OtpDefaultValue; }
      set {
        otp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "otp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOtp {
      get { return otp_ != null; }
    }
    /// <summary>Clears the value of the "otp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOtp() {
      otp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDanalSimBill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDanalSimBill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerInfo != other.ServerInfo) return false;
      if (Otp != other.Otp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerInfo) hash ^= ServerInfo.GetHashCode();
      if (HasOtp) hash ^= Otp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasServerInfo) {
        output.WriteRawTag(10);
        output.WriteString(ServerInfo);
      }
      if (HasOtp) {
        output.WriteRawTag(18);
        output.WriteString(Otp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasServerInfo) {
        output.WriteRawTag(10);
        output.WriteString(ServerInfo);
      }
      if (HasOtp) {
        output.WriteRawTag(18);
        output.WriteString(Otp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServerInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerInfo);
      }
      if (HasOtp) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Otp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDanalSimBill other) {
      if (other == null) {
        return;
      }
      if (other.HasServerInfo) {
        ServerInfo = other.ServerInfo;
      }
      if (other.HasOtp) {
        Otp = other.Otp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerInfo = input.ReadString();
            break;
          }
          case 18: {
            Otp = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServerInfo = input.ReadString();
            break;
          }
          case 18: {
            Otp = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDanalReBillWP : pb::IMessage<CDanalReBillWP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDanalReBillWP> _parser = new pb::MessageParser<CDanalReBillWP>(() => new CDanalReBillWP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDanalReBillWP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalReBillWP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalReBillWP(CDanalReBillWP other) : this() {
      descId_ = other.descId_;
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalReBillWP Clone() {
      return new CDanalReBillWP(this);
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 1;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private readonly static string InfoDefaultValue = "";

    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_ ?? InfoDefaultValue; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInfo {
      get { return info_ != null; }
    }
    /// <summary>Clears the value of the "info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInfo() {
      info_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDanalReBillWP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDanalReBillWP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DescId != other.DescId) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasInfo) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasInfo) {
        output.WriteRawTag(18);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDescId) {
        output.WriteRawTag(10);
        output.WriteString(DescId);
      }
      if (HasInfo) {
        output.WriteRawTag(18);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDanalReBillWP other) {
      if (other == null) {
        return;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasInfo) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 18: {
            Info = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DescId = input.ReadString();
            break;
          }
          case 18: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDanalDelAuthKey : pb::IMessage<CDanalDelAuthKey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDanalDelAuthKey> _parser = new pb::MessageParser<CDanalDelAuthKey>(() => new CDanalDelAuthKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDanalDelAuthKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalDelAuthKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalDelAuthKey(CDanalDelAuthKey other) : this() {
      authKey_ = other.authKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDanalDelAuthKey Clone() {
      return new CDanalDelAuthKey(this);
    }

    /// <summary>Field number for the "authKey" field.</summary>
    public const int AuthKeyFieldNumber = 1;
    private readonly static string AuthKeyDefaultValue = "";

    private string authKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthKey {
      get { return authKey_ ?? AuthKeyDefaultValue; }
      set {
        authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "authKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthKey {
      get { return authKey_ != null; }
    }
    /// <summary>Clears the value of the "authKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthKey() {
      authKey_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDanalDelAuthKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDanalDelAuthKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthKey != other.AuthKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAuthKey) hash ^= AuthKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAuthKey) {
        output.WriteRawTag(10);
        output.WriteString(AuthKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAuthKey) {
        output.WriteRawTag(10);
        output.WriteString(AuthKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAuthKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDanalDelAuthKey other) {
      if (other == null) {
        return;
      }
      if (other.HasAuthKey) {
        AuthKey = other.AuthKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AuthKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AuthKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CForceInAppPurchaseResult : pb::IMessage<CForceInAppPurchaseResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CForceInAppPurchaseResult> _parser = new pb::MessageParser<CForceInAppPurchaseResult>(() => new CForceInAppPurchaseResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CForceInAppPurchaseResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CForceInAppPurchaseResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CForceInAppPurchaseResult(CForceInAppPurchaseResult other) : this() {
      _hasBits0 = other._hasBits0;
      txId_ = other.txId_;
      itemId_ = other.itemId_;
      arg0_ = other.arg0_;
      onlyCheckReceipt_ = other.onlyCheckReceipt_;
      bonusRate_ = other.bonusRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CForceInAppPurchaseResult Clone() {
      return new CForceInAppPurchaseResult(this);
    }

    /// <summary>Field number for the "txId" field.</summary>
    public const int TxIdFieldNumber = 1;
    private readonly static string TxIdDefaultValue = "";

    private string txId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxId {
      get { return txId_ ?? TxIdDefaultValue; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "txId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxId {
      get { return txId_ != null; }
    }
    /// <summary>Clears the value of the "txId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxId() {
      txId_ = null;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    /// <summary>Field number for the "arg0" field.</summary>
    public const int Arg0FieldNumber = 3;
    private readonly static string Arg0DefaultValue = "";

    private string arg0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arg0 {
      get { return arg0_ ?? Arg0DefaultValue; }
      set {
        arg0_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "arg0" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArg0 {
      get { return arg0_ != null; }
    }
    /// <summary>Clears the value of the "arg0" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArg0() {
      arg0_ = null;
    }

    /// <summary>Field number for the "onlyCheckReceipt" field.</summary>
    public const int OnlyCheckReceiptFieldNumber = 4;
    private readonly static bool OnlyCheckReceiptDefaultValue = false;

    private bool onlyCheckReceipt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnlyCheckReceipt {
      get { if ((_hasBits0 & 1) != 0) { return onlyCheckReceipt_; } else { return OnlyCheckReceiptDefaultValue; } }
      set {
        _hasBits0 |= 1;
        onlyCheckReceipt_ = value;
      }
    }
    /// <summary>Gets whether the "onlyCheckReceipt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOnlyCheckReceipt {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "onlyCheckReceipt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnlyCheckReceipt() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bonusRate" field.</summary>
    public const int BonusRateFieldNumber = 5;
    private readonly static int BonusRateDefaultValue = 0;

    private int bonusRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BonusRate {
      get { if ((_hasBits0 & 2) != 0) { return bonusRate_; } else { return BonusRateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bonusRate_ = value;
      }
    }
    /// <summary>Gets whether the "bonusRate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonusRate {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bonusRate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonusRate() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CForceInAppPurchaseResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CForceInAppPurchaseResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxId != other.TxId) return false;
      if (ItemId != other.ItemId) return false;
      if (Arg0 != other.Arg0) return false;
      if (OnlyCheckReceipt != other.OnlyCheckReceipt) return false;
      if (BonusRate != other.BonusRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTxId) hash ^= TxId.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (HasArg0) hash ^= Arg0.GetHashCode();
      if (HasOnlyCheckReceipt) hash ^= OnlyCheckReceipt.GetHashCode();
      if (HasBonusRate) hash ^= BonusRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTxId) {
        output.WriteRawTag(10);
        output.WriteString(TxId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (HasArg0) {
        output.WriteRawTag(26);
        output.WriteString(Arg0);
      }
      if (HasOnlyCheckReceipt) {
        output.WriteRawTag(32);
        output.WriteBool(OnlyCheckReceipt);
      }
      if (HasBonusRate) {
        output.WriteRawTag(40);
        output.WriteInt32(BonusRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTxId) {
        output.WriteRawTag(10);
        output.WriteString(TxId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (HasArg0) {
        output.WriteRawTag(26);
        output.WriteString(Arg0);
      }
      if (HasOnlyCheckReceipt) {
        output.WriteRawTag(32);
        output.WriteBool(OnlyCheckReceipt);
      }
      if (HasBonusRate) {
        output.WriteRawTag(40);
        output.WriteInt32(BonusRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTxId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxId);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (HasArg0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arg0);
      }
      if (HasOnlyCheckReceipt) {
        size += 1 + 1;
      }
      if (HasBonusRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CForceInAppPurchaseResult other) {
      if (other == null) {
        return;
      }
      if (other.HasTxId) {
        TxId = other.TxId;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasArg0) {
        Arg0 = other.Arg0;
      }
      if (other.HasOnlyCheckReceipt) {
        OnlyCheckReceipt = other.OnlyCheckReceipt;
      }
      if (other.HasBonusRate) {
        BonusRate = other.BonusRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TxId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 26: {
            Arg0 = input.ReadString();
            break;
          }
          case 32: {
            OnlyCheckReceipt = input.ReadBool();
            break;
          }
          case 40: {
            BonusRate = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TxId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 26: {
            Arg0 = input.ReadString();
            break;
          }
          case 32: {
            OnlyCheckReceipt = input.ReadBool();
            break;
          }
          case 40: {
            BonusRate = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SPurchaseConfirmed : pb::IMessage<SPurchaseConfirmed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SPurchaseConfirmed> _parser = new pb::MessageParser<SPurchaseConfirmed>(() => new SPurchaseConfirmed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SPurchaseConfirmed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPurchaseConfirmed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPurchaseConfirmed(SPurchaseConfirmed other) : this() {
      transactionId_ = other.transactionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPurchaseConfirmed Clone() {
      return new SPurchaseConfirmed(this);
    }

    /// <summary>Field number for the "transactionId" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private readonly static string TransactionIdDefaultValue = "";

    private string transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionId {
      get { return transactionId_ ?? TransactionIdDefaultValue; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "transactionId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransactionId {
      get { return transactionId_ != null; }
    }
    /// <summary>Clears the value of the "transactionId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransactionId() {
      transactionId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SPurchaseConfirmed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SPurchaseConfirmed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTransactionId) hash ^= TransactionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTransactionId) {
        output.WriteRawTag(10);
        output.WriteString(TransactionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTransactionId) {
        output.WriteRawTag(10);
        output.WriteString(TransactionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTransactionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SPurchaseConfirmed other) {
      if (other == null) {
        return;
      }
      if (other.HasTransactionId) {
        TransactionId = other.TransactionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TransactionId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TransactionId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SDanalResultReceived : pb::IMessage<SDanalResultReceived>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SDanalResultReceived> _parser = new pb::MessageParser<SDanalResultReceived>(() => new SDanalResultReceived());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SDanalResultReceived> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDanalResultReceived() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDanalResultReceived(SDanalResultReceived other) : this() {
      json_ = other.json_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDanalResultReceived Clone() {
      return new SDanalResultReceived(this);
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 1;
    private readonly static string JsonDefaultValue = "";

    private string json_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Json {
      get { return json_ ?? JsonDefaultValue; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "json" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJson {
      get { return json_ != null; }
    }
    /// <summary>Clears the value of the "json" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJson() {
      json_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SDanalResultReceived);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SDanalResultReceived other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Json != other.Json) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasJson) hash ^= Json.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasJson) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasJson) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasJson) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SDanalResultReceived other) {
      if (other == null) {
        return;
      }
      if (other.HasJson) {
        Json = other.Json;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetFriendInfo : pb::IMessage<CGetFriendInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetFriendInfo> _parser = new pb::MessageParser<CGetFriendInfo>(() => new CGetFriendInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetFriendInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetFriendInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetFriendInfo(CGetFriendInfo other) : this() {
      friendId_ = other.friendId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetFriendInfo Clone() {
      return new CGetFriendInfo(this);
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_friendId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> friendId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FriendId {
      get { return friendId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetFriendInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetFriendInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friendId_.Equals(other.friendId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friendId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      friendId_.WriteTo(output, _repeated_friendId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      friendId_.WriteTo(ref output, _repeated_friendId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendId_.CalculateSize(_repeated_friendId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetFriendInfo other) {
      if (other == null) {
        return;
      }
      friendId_.Add(other.friendId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            friendId_.AddEntriesFrom(input, _repeated_friendId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            friendId_.AddEntriesFrom(ref input, _repeated_friendId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInviteSMS : pb::IMessage<CInviteSMS>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInviteSMS> _parser = new pb::MessageParser<CInviteSMS>(() => new CInviteSMS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInviteSMS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteSMS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteSMS(CInviteSMS other) : this() {
      phoneNo_ = other.phoneNo_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteSMS Clone() {
      return new CInviteSMS(this);
    }

    /// <summary>Field number for the "phoneNo" field.</summary>
    public const int PhoneNoFieldNumber = 1;
    private readonly static string PhoneNoDefaultValue = "";

    private string phoneNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNo {
      get { return phoneNo_ ?? PhoneNoDefaultValue; }
      set {
        phoneNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phoneNo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhoneNo {
      get { return phoneNo_ != null; }
    }
    /// <summary>Clears the value of the "phoneNo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhoneNo() {
      phoneNo_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInviteSMS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInviteSMS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhoneNo != other.PhoneNo) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPhoneNo) hash ^= PhoneNo.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPhoneNo) {
        output.WriteRawTag(10);
        output.WriteString(PhoneNo);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPhoneNo) {
        output.WriteRawTag(10);
        output.WriteString(PhoneNo);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPhoneNo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNo);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInviteSMS other) {
      if (other == null) {
        return;
      }
      if (other.HasPhoneNo) {
        PhoneNo = other.PhoneNo;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PhoneNo = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PhoneNo = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInviteFriend : pb::IMessage<CInviteFriend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInviteFriend> _parser = new pb::MessageParser<CInviteFriend>(() => new CInviteFriend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInviteFriend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteFriend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteFriend(CInviteFriend other) : this() {
      friendId_ = other.friendId_;
      phoneNo_ = other.phoneNo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteFriend Clone() {
      return new CInviteFriend(this);
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    /// <summary>Field number for the "phoneNo" field.</summary>
    public const int PhoneNoFieldNumber = 2;
    private readonly static string PhoneNoDefaultValue = "";

    private string phoneNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNo {
      get { return phoneNo_ ?? PhoneNoDefaultValue; }
      set {
        phoneNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phoneNo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhoneNo {
      get { return phoneNo_ != null; }
    }
    /// <summary>Clears the value of the "phoneNo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhoneNo() {
      phoneNo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInviteFriend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInviteFriend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      if (PhoneNo != other.PhoneNo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (HasPhoneNo) hash ^= PhoneNo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFriendId) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (HasPhoneNo) {
        output.WriteRawTag(18);
        output.WriteString(PhoneNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFriendId) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (HasPhoneNo) {
        output.WriteRawTag(18);
        output.WriteString(PhoneNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (HasPhoneNo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInviteFriend other) {
      if (other == null) {
        return;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      if (other.HasPhoneNo) {
        PhoneNo = other.PhoneNo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 18: {
            PhoneNo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 18: {
            PhoneNo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInviteDormant : pb::IMessage<CInviteDormant>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInviteDormant> _parser = new pb::MessageParser<CInviteDormant>(() => new CInviteDormant());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInviteDormant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteDormant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteDormant(CInviteDormant other) : this() {
      _hasBits0 = other._hasBits0;
      friendId_ = other.friendId_;
      pfMsgBlocked_ = other.pfMsgBlocked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteDormant Clone() {
      return new CInviteDormant(this);
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    /// <summary>Field number for the "pfMsgBlocked" field.</summary>
    public const int PfMsgBlockedFieldNumber = 2;
    private readonly static bool PfMsgBlockedDefaultValue = false;

    private bool pfMsgBlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PfMsgBlocked {
      get { if ((_hasBits0 & 1) != 0) { return pfMsgBlocked_; } else { return PfMsgBlockedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pfMsgBlocked_ = value;
      }
    }
    /// <summary>Gets whether the "pfMsgBlocked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPfMsgBlocked {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pfMsgBlocked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPfMsgBlocked() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInviteDormant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInviteDormant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      if (PfMsgBlocked != other.PfMsgBlocked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (HasPfMsgBlocked) hash ^= PfMsgBlocked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFriendId) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (HasPfMsgBlocked) {
        output.WriteRawTag(16);
        output.WriteBool(PfMsgBlocked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFriendId) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (HasPfMsgBlocked) {
        output.WriteRawTag(16);
        output.WriteBool(PfMsgBlocked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (HasPfMsgBlocked) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInviteDormant other) {
      if (other == null) {
        return;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      if (other.HasPfMsgBlocked) {
        PfMsgBlocked = other.PfMsgBlocked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 16: {
            PfMsgBlocked = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 16: {
            PfMsgBlocked = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInviteComeBack : pb::IMessage<CInviteComeBack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInviteComeBack> _parser = new pb::MessageParser<CInviteComeBack>(() => new CInviteComeBack());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInviteComeBack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteComeBack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteComeBack(CInviteComeBack other) : this() {
      _hasBits0 = other._hasBits0;
      friendId_ = other.friendId_;
      pfMsgBlocked_ = other.pfMsgBlocked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteComeBack Clone() {
      return new CInviteComeBack(this);
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private readonly static string FriendIdDefaultValue = "";

    private string friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_ ?? FriendIdDefaultValue; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendId {
      get { return friendId_ != null; }
    }
    /// <summary>Clears the value of the "friendId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendId() {
      friendId_ = null;
    }

    /// <summary>Field number for the "pfMsgBlocked" field.</summary>
    public const int PfMsgBlockedFieldNumber = 2;
    private readonly static bool PfMsgBlockedDefaultValue = false;

    private bool pfMsgBlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PfMsgBlocked {
      get { if ((_hasBits0 & 1) != 0) { return pfMsgBlocked_; } else { return PfMsgBlockedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pfMsgBlocked_ = value;
      }
    }
    /// <summary>Gets whether the "pfMsgBlocked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPfMsgBlocked {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pfMsgBlocked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPfMsgBlocked() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInviteComeBack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInviteComeBack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      if (PfMsgBlocked != other.PfMsgBlocked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFriendId) hash ^= FriendId.GetHashCode();
      if (HasPfMsgBlocked) hash ^= PfMsgBlocked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFriendId) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (HasPfMsgBlocked) {
        output.WriteRawTag(16);
        output.WriteBool(PfMsgBlocked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFriendId) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (HasPfMsgBlocked) {
        output.WriteRawTag(16);
        output.WriteBool(PfMsgBlocked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFriendId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (HasPfMsgBlocked) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInviteComeBack other) {
      if (other == null) {
        return;
      }
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      if (other.HasPfMsgBlocked) {
        PfMsgBlocked = other.PfMsgBlocked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 16: {
            PfMsgBlocked = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 16: {
            PfMsgBlocked = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInviteComeBackCompleteCount : pb::IMessage<CInviteComeBackCompleteCount>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInviteComeBackCompleteCount> _parser = new pb::MessageParser<CInviteComeBackCompleteCount>(() => new CInviteComeBackCompleteCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInviteComeBackCompleteCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteComeBackCompleteCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteComeBackCompleteCount(CInviteComeBackCompleteCount other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteComeBackCompleteCount Clone() {
      return new CInviteComeBackCompleteCount(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInviteComeBackCompleteCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInviteComeBackCompleteCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInviteComeBackCompleteCount other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CGetAllWritings : pb::IMessage<CGetAllWritings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetAllWritings> _parser = new pb::MessageParser<CGetAllWritings>(() => new CGetAllWritings());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetAllWritings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetAllWritings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetAllWritings(CGetAllWritings other) : this() {
      _hasBits0 = other._hasBits0;
      lastRefresh_ = other.lastRefresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetAllWritings Clone() {
      return new CGetAllWritings(this);
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 1;
    private readonly static int LastRefreshDefaultValue = 0;

    private int lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRefresh {
      get { if ((_hasBits0 & 1) != 0) { return lastRefresh_; } else { return LastRefreshDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lastRefresh_ = value;
      }
    }
    /// <summary>Gets whether the "lastRefresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastRefresh {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lastRefresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastRefresh() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetAllWritings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetAllWritings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastRefresh != other.LastRefresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLastRefresh) hash ^= LastRefresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLastRefresh) {
        output.WriteRawTag(8);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLastRefresh) {
        output.WriteRawTag(8);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLastRefresh) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRefresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetAllWritings other) {
      if (other == null) {
        return;
      }
      if (other.HasLastRefresh) {
        LastRefresh = other.LastRefresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPushWriting : pb::IMessage<CPushWriting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPushWriting> _parser = new pb::MessageParser<CPushWriting>(() => new CPushWriting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPushWriting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPushWriting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPushWriting(CPushWriting other) : this() {
      _hasBits0 = other._hasBits0;
      guestBookId_ = other.guestBookId_;
      myId_ = other.myId_;
      message_ = other.message_;
      isSecret_ = other.isSecret_;
      lastRefresh_ = other.lastRefresh_;
      lv_ = other.lv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPushWriting Clone() {
      return new CPushWriting(this);
    }

    /// <summary>Field number for the "guestBookId" field.</summary>
    public const int GuestBookIdFieldNumber = 1;
    private readonly static string GuestBookIdDefaultValue = "";

    private string guestBookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuestBookId {
      get { return guestBookId_ ?? GuestBookIdDefaultValue; }
      set {
        guestBookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "guestBookId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuestBookId {
      get { return guestBookId_ != null; }
    }
    /// <summary>Clears the value of the "guestBookId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuestBookId() {
      guestBookId_ = null;
    }

    /// <summary>Field number for the "myId" field.</summary>
    public const int MyIdFieldNumber = 2;
    private readonly static string MyIdDefaultValue = "";

    private string myId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MyId {
      get { return myId_ ?? MyIdDefaultValue; }
      set {
        myId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "myId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMyId {
      get { return myId_ != null; }
    }
    /// <summary>Clears the value of the "myId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMyId() {
      myId_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "isSecret" field.</summary>
    public const int IsSecretFieldNumber = 4;
    private readonly static bool IsSecretDefaultValue = false;

    private bool isSecret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSecret {
      get { if ((_hasBits0 & 1) != 0) { return isSecret_; } else { return IsSecretDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isSecret_ = value;
      }
    }
    /// <summary>Gets whether the "isSecret" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSecret {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "isSecret" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSecret() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 5;
    private readonly static int LastRefreshDefaultValue = 0;

    private int lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRefresh {
      get { if ((_hasBits0 & 2) != 0) { return lastRefresh_; } else { return LastRefreshDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastRefresh_ = value;
      }
    }
    /// <summary>Gets whether the "lastRefresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastRefresh {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lastRefresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastRefresh() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 6;
    private readonly static int LvDefaultValue = 0;

    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { if ((_hasBits0 & 4) != 0) { return lv_; } else { return LvDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lv_ = value;
      }
    }
    /// <summary>Gets whether the "lv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLv {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLv() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPushWriting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPushWriting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuestBookId != other.GuestBookId) return false;
      if (MyId != other.MyId) return false;
      if (Message != other.Message) return false;
      if (IsSecret != other.IsSecret) return false;
      if (LastRefresh != other.LastRefresh) return false;
      if (Lv != other.Lv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGuestBookId) hash ^= GuestBookId.GetHashCode();
      if (HasMyId) hash ^= MyId.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasIsSecret) hash ^= IsSecret.GetHashCode();
      if (HasLastRefresh) hash ^= LastRefresh.GetHashCode();
      if (HasLv) hash ^= Lv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGuestBookId) {
        output.WriteRawTag(10);
        output.WriteString(GuestBookId);
      }
      if (HasMyId) {
        output.WriteRawTag(18);
        output.WriteString(MyId);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasIsSecret) {
        output.WriteRawTag(32);
        output.WriteBool(IsSecret);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(40);
        output.WriteInt32(LastRefresh);
      }
      if (HasLv) {
        output.WriteRawTag(48);
        output.WriteInt32(Lv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGuestBookId) {
        output.WriteRawTag(10);
        output.WriteString(GuestBookId);
      }
      if (HasMyId) {
        output.WriteRawTag(18);
        output.WriteString(MyId);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasIsSecret) {
        output.WriteRawTag(32);
        output.WriteBool(IsSecret);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(40);
        output.WriteInt32(LastRefresh);
      }
      if (HasLv) {
        output.WriteRawTag(48);
        output.WriteInt32(Lv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGuestBookId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuestBookId);
      }
      if (HasMyId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MyId);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasIsSecret) {
        size += 1 + 1;
      }
      if (HasLastRefresh) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRefresh);
      }
      if (HasLv) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPushWriting other) {
      if (other == null) {
        return;
      }
      if (other.HasGuestBookId) {
        GuestBookId = other.GuestBookId;
      }
      if (other.HasMyId) {
        MyId = other.MyId;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasIsSecret) {
        IsSecret = other.IsSecret;
      }
      if (other.HasLastRefresh) {
        LastRefresh = other.LastRefresh;
      }
      if (other.HasLv) {
        Lv = other.Lv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GuestBookId = input.ReadString();
            break;
          }
          case 18: {
            MyId = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            IsSecret = input.ReadBool();
            break;
          }
          case 40: {
            LastRefresh = input.ReadInt32();
            break;
          }
          case 48: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GuestBookId = input.ReadString();
            break;
          }
          case 18: {
            MyId = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            IsSecret = input.ReadBool();
            break;
          }
          case 40: {
            LastRefresh = input.ReadInt32();
            break;
          }
          case 48: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPushComment : pb::IMessage<CPushComment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPushComment> _parser = new pb::MessageParser<CPushComment>(() => new CPushComment());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPushComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPushComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPushComment(CPushComment other) : this() {
      _hasBits0 = other._hasBits0;
      writerId_ = other.writerId_;
      timestamp_ = other.timestamp_;
      comment_ = other.comment_;
      lastRefresh_ = other.lastRefresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPushComment Clone() {
      return new CPushComment(this);
    }

    /// <summary>Field number for the "writerId" field.</summary>
    public const int WriterIdFieldNumber = 1;
    private readonly static string WriterIdDefaultValue = "";

    private string writerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WriterId {
      get { return writerId_ ?? WriterIdDefaultValue; }
      set {
        writerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "writerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWriterId {
      get { return writerId_ != null; }
    }
    /// <summary>Clears the value of the "writerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWriterId() {
      writerId_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static int TimestampDefaultValue = 0;

    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 3;
    private readonly static string CommentDefaultValue = "";

    private string comment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_ ?? CommentDefaultValue; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "comment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComment {
      get { return comment_ != null; }
    }
    /// <summary>Clears the value of the "comment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComment() {
      comment_ = null;
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 4;
    private readonly static int LastRefreshDefaultValue = 0;

    private int lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRefresh {
      get { if ((_hasBits0 & 2) != 0) { return lastRefresh_; } else { return LastRefreshDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastRefresh_ = value;
      }
    }
    /// <summary>Gets whether the "lastRefresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastRefresh {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lastRefresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastRefresh() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPushComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPushComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WriterId != other.WriterId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Comment != other.Comment) return false;
      if (LastRefresh != other.LastRefresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWriterId) hash ^= WriterId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasComment) hash ^= Comment.GetHashCode();
      if (HasLastRefresh) hash ^= LastRefresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWriterId) {
        output.WriteRawTag(10);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (HasComment) {
        output.WriteRawTag(26);
        output.WriteString(Comment);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(32);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWriterId) {
        output.WriteRawTag(10);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (HasComment) {
        output.WriteRawTag(26);
        output.WriteString(Comment);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(32);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWriterId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WriterId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (HasComment) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (HasLastRefresh) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRefresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPushComment other) {
      if (other == null) {
        return;
      }
      if (other.HasWriterId) {
        WriterId = other.WriterId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasComment) {
        Comment = other.Comment;
      }
      if (other.HasLastRefresh) {
        LastRefresh = other.LastRefresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WriterId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Comment = input.ReadString();
            break;
          }
          case 32: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            WriterId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Comment = input.ReadString();
            break;
          }
          case 32: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGuestBookSetTitle : pb::IMessage<CGuestBookSetTitle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGuestBookSetTitle> _parser = new pb::MessageParser<CGuestBookSetTitle>(() => new CGuestBookSetTitle());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGuestBookSetTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGuestBookSetTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGuestBookSetTitle(CGuestBookSetTitle other) : this() {
      _hasBits0 = other._hasBits0;
      title_ = other.title_;
      lastRefresh_ = other.lastRefresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGuestBookSetTitle Clone() {
      return new CGuestBookSetTitle(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 2;
    private readonly static int LastRefreshDefaultValue = 0;

    private int lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRefresh {
      get { if ((_hasBits0 & 1) != 0) { return lastRefresh_; } else { return LastRefreshDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lastRefresh_ = value;
      }
    }
    /// <summary>Gets whether the "lastRefresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastRefresh {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lastRefresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastRefresh() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGuestBookSetTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGuestBookSetTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (LastRefresh != other.LastRefresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasLastRefresh) hash ^= LastRefresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(16);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(16);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (HasLastRefresh) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRefresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGuestBookSetTitle other) {
      if (other == null) {
        return;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasLastRefresh) {
        LastRefresh = other.LastRefresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 16: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 16: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGuestBookSetAllSecret : pb::IMessage<CGuestBookSetAllSecret>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGuestBookSetAllSecret> _parser = new pb::MessageParser<CGuestBookSetAllSecret>(() => new CGuestBookSetAllSecret());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGuestBookSetAllSecret> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGuestBookSetAllSecret() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGuestBookSetAllSecret(CGuestBookSetAllSecret other) : this() {
      _hasBits0 = other._hasBits0;
      allSecret_ = other.allSecret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGuestBookSetAllSecret Clone() {
      return new CGuestBookSetAllSecret(this);
    }

    /// <summary>Field number for the "allSecret" field.</summary>
    public const int AllSecretFieldNumber = 1;
    private readonly static bool AllSecretDefaultValue = false;

    private bool allSecret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllSecret {
      get { if ((_hasBits0 & 1) != 0) { return allSecret_; } else { return AllSecretDefaultValue; } }
      set {
        _hasBits0 |= 1;
        allSecret_ = value;
      }
    }
    /// <summary>Gets whether the "allSecret" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllSecret {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "allSecret" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllSecret() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGuestBookSetAllSecret);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGuestBookSetAllSecret other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllSecret != other.AllSecret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAllSecret) hash ^= AllSecret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAllSecret) {
        output.WriteRawTag(8);
        output.WriteBool(AllSecret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAllSecret) {
        output.WriteRawTag(8);
        output.WriteBool(AllSecret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAllSecret) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGuestBookSetAllSecret other) {
      if (other == null) {
        return;
      }
      if (other.HasAllSecret) {
        AllSecret = other.AllSecret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllSecret = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AllSecret = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRemoveWriting : pb::IMessage<CRemoveWriting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRemoveWriting> _parser = new pb::MessageParser<CRemoveWriting>(() => new CRemoveWriting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRemoveWriting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveWriting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveWriting(CRemoveWriting other) : this() {
      _hasBits0 = other._hasBits0;
      guestBookId_ = other.guestBookId_;
      writerId_ = other.writerId_;
      timestamp_ = other.timestamp_;
      lastRefresh_ = other.lastRefresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveWriting Clone() {
      return new CRemoveWriting(this);
    }

    /// <summary>Field number for the "guestBookId" field.</summary>
    public const int GuestBookIdFieldNumber = 1;
    private readonly static string GuestBookIdDefaultValue = "";

    private string guestBookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuestBookId {
      get { return guestBookId_ ?? GuestBookIdDefaultValue; }
      set {
        guestBookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "guestBookId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuestBookId {
      get { return guestBookId_ != null; }
    }
    /// <summary>Clears the value of the "guestBookId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuestBookId() {
      guestBookId_ = null;
    }

    /// <summary>Field number for the "writerId" field.</summary>
    public const int WriterIdFieldNumber = 2;
    private readonly static string WriterIdDefaultValue = "";

    private string writerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WriterId {
      get { return writerId_ ?? WriterIdDefaultValue; }
      set {
        writerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "writerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWriterId {
      get { return writerId_ != null; }
    }
    /// <summary>Clears the value of the "writerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWriterId() {
      writerId_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private readonly static int TimestampDefaultValue = 0;

    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 4;
    private readonly static int LastRefreshDefaultValue = 0;

    private int lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRefresh {
      get { if ((_hasBits0 & 2) != 0) { return lastRefresh_; } else { return LastRefreshDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastRefresh_ = value;
      }
    }
    /// <summary>Gets whether the "lastRefresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastRefresh {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lastRefresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastRefresh() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRemoveWriting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRemoveWriting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuestBookId != other.GuestBookId) return false;
      if (WriterId != other.WriterId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (LastRefresh != other.LastRefresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGuestBookId) hash ^= GuestBookId.GetHashCode();
      if (HasWriterId) hash ^= WriterId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasLastRefresh) hash ^= LastRefresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGuestBookId) {
        output.WriteRawTag(10);
        output.WriteString(GuestBookId);
      }
      if (HasWriterId) {
        output.WriteRawTag(18);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(24);
        output.WriteInt32(Timestamp);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(32);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGuestBookId) {
        output.WriteRawTag(10);
        output.WriteString(GuestBookId);
      }
      if (HasWriterId) {
        output.WriteRawTag(18);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(24);
        output.WriteInt32(Timestamp);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(32);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGuestBookId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuestBookId);
      }
      if (HasWriterId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WriterId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (HasLastRefresh) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRefresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRemoveWriting other) {
      if (other == null) {
        return;
      }
      if (other.HasGuestBookId) {
        GuestBookId = other.GuestBookId;
      }
      if (other.HasWriterId) {
        WriterId = other.WriterId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasLastRefresh) {
        LastRefresh = other.LastRefresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GuestBookId = input.ReadString();
            break;
          }
          case 18: {
            WriterId = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 32: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GuestBookId = input.ReadString();
            break;
          }
          case 18: {
            WriterId = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 32: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRemoveComment : pb::IMessage<CRemoveComment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRemoveComment> _parser = new pb::MessageParser<CRemoveComment>(() => new CRemoveComment());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRemoveComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveComment(CRemoveComment other) : this() {
      _hasBits0 = other._hasBits0;
      writerId_ = other.writerId_;
      timestamp_ = other.timestamp_;
      lastRefresh_ = other.lastRefresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveComment Clone() {
      return new CRemoveComment(this);
    }

    /// <summary>Field number for the "writerId" field.</summary>
    public const int WriterIdFieldNumber = 1;
    private readonly static string WriterIdDefaultValue = "";

    private string writerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WriterId {
      get { return writerId_ ?? WriterIdDefaultValue; }
      set {
        writerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "writerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWriterId {
      get { return writerId_ != null; }
    }
    /// <summary>Clears the value of the "writerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWriterId() {
      writerId_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static int TimestampDefaultValue = 0;

    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 3;
    private readonly static int LastRefreshDefaultValue = 0;

    private int lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRefresh {
      get { if ((_hasBits0 & 2) != 0) { return lastRefresh_; } else { return LastRefreshDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastRefresh_ = value;
      }
    }
    /// <summary>Gets whether the "lastRefresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastRefresh {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lastRefresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastRefresh() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRemoveComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRemoveComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WriterId != other.WriterId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (LastRefresh != other.LastRefresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWriterId) hash ^= WriterId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasLastRefresh) hash ^= LastRefresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWriterId) {
        output.WriteRawTag(10);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(24);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWriterId) {
        output.WriteRawTag(10);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(24);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWriterId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WriterId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (HasLastRefresh) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRefresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRemoveComment other) {
      if (other == null) {
        return;
      }
      if (other.HasWriterId) {
        WriterId = other.WriterId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasLastRefresh) {
        LastRefresh = other.LastRefresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WriterId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 24: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            WriterId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 24: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CModifyWriting : pb::IMessage<CModifyWriting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CModifyWriting> _parser = new pb::MessageParser<CModifyWriting>(() => new CModifyWriting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CModifyWriting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CModifyWriting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CModifyWriting(CModifyWriting other) : this() {
      _hasBits0 = other._hasBits0;
      guestBookId_ = other.guestBookId_;
      writerId_ = other.writerId_;
      timestamp_ = other.timestamp_;
      writing_ = other.writing_;
      lastRefresh_ = other.lastRefresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CModifyWriting Clone() {
      return new CModifyWriting(this);
    }

    /// <summary>Field number for the "guestBookId" field.</summary>
    public const int GuestBookIdFieldNumber = 1;
    private readonly static string GuestBookIdDefaultValue = "";

    private string guestBookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuestBookId {
      get { return guestBookId_ ?? GuestBookIdDefaultValue; }
      set {
        guestBookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "guestBookId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuestBookId {
      get { return guestBookId_ != null; }
    }
    /// <summary>Clears the value of the "guestBookId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuestBookId() {
      guestBookId_ = null;
    }

    /// <summary>Field number for the "writerId" field.</summary>
    public const int WriterIdFieldNumber = 2;
    private readonly static string WriterIdDefaultValue = "";

    private string writerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WriterId {
      get { return writerId_ ?? WriterIdDefaultValue; }
      set {
        writerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "writerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWriterId {
      get { return writerId_ != null; }
    }
    /// <summary>Clears the value of the "writerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWriterId() {
      writerId_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private readonly static int TimestampDefaultValue = 0;

    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "writing" field.</summary>
    public const int WritingFieldNumber = 4;
    private readonly static string WritingDefaultValue = "";

    private string writing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Writing {
      get { return writing_ ?? WritingDefaultValue; }
      set {
        writing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "writing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWriting {
      get { return writing_ != null; }
    }
    /// <summary>Clears the value of the "writing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWriting() {
      writing_ = null;
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 5;
    private readonly static int LastRefreshDefaultValue = 0;

    private int lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRefresh {
      get { if ((_hasBits0 & 2) != 0) { return lastRefresh_; } else { return LastRefreshDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastRefresh_ = value;
      }
    }
    /// <summary>Gets whether the "lastRefresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastRefresh {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lastRefresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastRefresh() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CModifyWriting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CModifyWriting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuestBookId != other.GuestBookId) return false;
      if (WriterId != other.WriterId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Writing != other.Writing) return false;
      if (LastRefresh != other.LastRefresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGuestBookId) hash ^= GuestBookId.GetHashCode();
      if (HasWriterId) hash ^= WriterId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasWriting) hash ^= Writing.GetHashCode();
      if (HasLastRefresh) hash ^= LastRefresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGuestBookId) {
        output.WriteRawTag(10);
        output.WriteString(GuestBookId);
      }
      if (HasWriterId) {
        output.WriteRawTag(18);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(24);
        output.WriteInt32(Timestamp);
      }
      if (HasWriting) {
        output.WriteRawTag(34);
        output.WriteString(Writing);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(40);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGuestBookId) {
        output.WriteRawTag(10);
        output.WriteString(GuestBookId);
      }
      if (HasWriterId) {
        output.WriteRawTag(18);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(24);
        output.WriteInt32(Timestamp);
      }
      if (HasWriting) {
        output.WriteRawTag(34);
        output.WriteString(Writing);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(40);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGuestBookId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuestBookId);
      }
      if (HasWriterId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WriterId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (HasWriting) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Writing);
      }
      if (HasLastRefresh) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRefresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CModifyWriting other) {
      if (other == null) {
        return;
      }
      if (other.HasGuestBookId) {
        GuestBookId = other.GuestBookId;
      }
      if (other.HasWriterId) {
        WriterId = other.WriterId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasWriting) {
        Writing = other.Writing;
      }
      if (other.HasLastRefresh) {
        LastRefresh = other.LastRefresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GuestBookId = input.ReadString();
            break;
          }
          case 18: {
            WriterId = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 34: {
            Writing = input.ReadString();
            break;
          }
          case 40: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GuestBookId = input.ReadString();
            break;
          }
          case 18: {
            WriterId = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 34: {
            Writing = input.ReadString();
            break;
          }
          case 40: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CModifyComment : pb::IMessage<CModifyComment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CModifyComment> _parser = new pb::MessageParser<CModifyComment>(() => new CModifyComment());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CModifyComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CModifyComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CModifyComment(CModifyComment other) : this() {
      _hasBits0 = other._hasBits0;
      writerId_ = other.writerId_;
      timestamp_ = other.timestamp_;
      comment_ = other.comment_;
      lastRefresh_ = other.lastRefresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CModifyComment Clone() {
      return new CModifyComment(this);
    }

    /// <summary>Field number for the "writerId" field.</summary>
    public const int WriterIdFieldNumber = 1;
    private readonly static string WriterIdDefaultValue = "";

    private string writerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WriterId {
      get { return writerId_ ?? WriterIdDefaultValue; }
      set {
        writerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "writerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWriterId {
      get { return writerId_ != null; }
    }
    /// <summary>Clears the value of the "writerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWriterId() {
      writerId_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static int TimestampDefaultValue = 0;

    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 3;
    private readonly static string CommentDefaultValue = "";

    private string comment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_ ?? CommentDefaultValue; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "comment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComment {
      get { return comment_ != null; }
    }
    /// <summary>Clears the value of the "comment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComment() {
      comment_ = null;
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 4;
    private readonly static int LastRefreshDefaultValue = 0;

    private int lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRefresh {
      get { if ((_hasBits0 & 2) != 0) { return lastRefresh_; } else { return LastRefreshDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastRefresh_ = value;
      }
    }
    /// <summary>Gets whether the "lastRefresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastRefresh {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lastRefresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastRefresh() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CModifyComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CModifyComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WriterId != other.WriterId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Comment != other.Comment) return false;
      if (LastRefresh != other.LastRefresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWriterId) hash ^= WriterId.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasComment) hash ^= Comment.GetHashCode();
      if (HasLastRefresh) hash ^= LastRefresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWriterId) {
        output.WriteRawTag(10);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (HasComment) {
        output.WriteRawTag(26);
        output.WriteString(Comment);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(32);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWriterId) {
        output.WriteRawTag(10);
        output.WriteString(WriterId);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (HasComment) {
        output.WriteRawTag(26);
        output.WriteString(Comment);
      }
      if (HasLastRefresh) {
        output.WriteRawTag(32);
        output.WriteInt32(LastRefresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWriterId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WriterId);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (HasComment) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (HasLastRefresh) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRefresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CModifyComment other) {
      if (other == null) {
        return;
      }
      if (other.HasWriterId) {
        WriterId = other.WriterId;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasComment) {
        Comment = other.Comment;
      }
      if (other.HasLastRefresh) {
        LastRefresh = other.LastRefresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WriterId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Comment = input.ReadString();
            break;
          }
          case 32: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            WriterId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Comment = input.ReadString();
            break;
          }
          case 32: {
            LastRefresh = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CJoinedGame : pb::IMessage<CJoinedGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CJoinedGame> _parser = new pb::MessageParser<CJoinedGame>(() => new CJoinedGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CJoinedGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[165]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CJoinedGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CJoinedGame(CJoinedGame other) : this() {
      phoneNo_ = other.phoneNo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CJoinedGame Clone() {
      return new CJoinedGame(this);
    }

    /// <summary>Field number for the "phoneNo" field.</summary>
    public const int PhoneNoFieldNumber = 1;
    private readonly static string PhoneNoDefaultValue = "";

    private string phoneNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNo {
      get { return phoneNo_ ?? PhoneNoDefaultValue; }
      set {
        phoneNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "phoneNo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhoneNo {
      get { return phoneNo_ != null; }
    }
    /// <summary>Clears the value of the "phoneNo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhoneNo() {
      phoneNo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CJoinedGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CJoinedGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhoneNo != other.PhoneNo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPhoneNo) hash ^= PhoneNo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPhoneNo) {
        output.WriteRawTag(10);
        output.WriteString(PhoneNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPhoneNo) {
        output.WriteRawTag(10);
        output.WriteString(PhoneNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPhoneNo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CJoinedGame other) {
      if (other == null) {
        return;
      }
      if (other.HasPhoneNo) {
        PhoneNo = other.PhoneNo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PhoneNo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PhoneNo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUnregisterGame : pb::IMessage<CUnregisterGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUnregisterGame> _parser = new pb::MessageParser<CUnregisterGame>(() => new CUnregisterGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUnregisterGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[166]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnregisterGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnregisterGame(CUnregisterGame other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUnregisterGame Clone() {
      return new CUnregisterGame(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUnregisterGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUnregisterGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUnregisterGame other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CGetCashInfo : pb::IMessage<CGetCashInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetCashInfo> _parser = new pb::MessageParser<CGetCashInfo>(() => new CGetCashInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetCashInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[167]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCashInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCashInfo(CGetCashInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCashInfo Clone() {
      return new CGetCashInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetCashInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetCashInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetCashInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CMigrateGuestToKakao : pb::IMessage<CMigrateGuestToKakao>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMigrateGuestToKakao> _parser = new pb::MessageParser<CMigrateGuestToKakao>(() => new CMigrateGuestToKakao());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMigrateGuestToKakao> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[168]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMigrateGuestToKakao() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMigrateGuestToKakao(CMigrateGuestToKakao other) : this() {
      uid_ = other.uid_;
      email_ = other.email_;
      nickname_ = other.nickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMigrateGuestToKakao Clone() {
      return new CMigrateGuestToKakao(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private readonly static string EmailDefaultValue = "";

    private string email_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_ ?? EmailDefaultValue; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "email" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEmail {
      get { return email_ != null; }
    }
    /// <summary>Clears the value of the "email" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEmail() {
      email_ = null;
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private readonly static string NicknameDefaultValue = "";

    private string nickname_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_ ?? NicknameDefaultValue; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nickname" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNickname {
      get { return nickname_ != null; }
    }
    /// <summary>Clears the value of the "nickname" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNickname() {
      nickname_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMigrateGuestToKakao);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMigrateGuestToKakao other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Email != other.Email) return false;
      if (Nickname != other.Nickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasEmail) hash ^= Email.GetHashCode();
      if (HasNickname) hash ^= Nickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasEmail) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (HasNickname) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (HasEmail) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (HasNickname) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasEmail) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (HasNickname) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMigrateGuestToKakao other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasEmail) {
        Email = other.Email;
      }
      if (other.HasNickname) {
        Nickname = other.Nickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInducedAction : pb::IMessage<CInducedAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInducedAction> _parser = new pb::MessageParser<CInducedAction>(() => new CInducedAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInducedAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[169]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInducedAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInducedAction(CInducedAction other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInducedAction Clone() {
      return new CInducedAction(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInducedAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInducedAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInducedAction other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRetryTout : pb::IMessage<CRetryTout>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRetryTout> _parser = new pb::MessageParser<CRetryTout>(() => new CRetryTout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRetryTout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[170]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRetryTout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRetryTout(CRetryTout other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRetryTout Clone() {
      return new CRetryTout(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRetryTout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRetryTout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRetryTout other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInviteKakaoEvent : pb::IMessage<CInviteKakaoEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInviteKakaoEvent> _parser = new pb::MessageParser<CInviteKakaoEvent>(() => new CInviteKakaoEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInviteKakaoEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[171]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEvent(CInviteKakaoEvent other) : this() {
      _hasBits0 = other._hasBits0;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEvent Clone() {
      return new CInviteKakaoEvent(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInviteKakaoEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInviteKakaoEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCount) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCount) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInviteKakaoEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjDecoUp : pb::IMessage<CObjDecoUp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjDecoUp> _parser = new pb::MessageParser<CObjDecoUp>(() => new CObjDecoUp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjDecoUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[172]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjDecoUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjDecoUp(CObjDecoUp other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      method_ = other.method_;
      isInvalid_ = other.isInvalid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjDecoUp Clone() {
      return new CObjDecoUp(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 2;
    private readonly static string MethodDefaultValue = "";

    private string method_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_ ?? MethodDefaultValue; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMethod {
      get { return method_ != null; }
    }
    /// <summary>Clears the value of the "method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMethod() {
      method_ = null;
    }

    /// <summary>Field number for the "isInvalid" field.</summary>
    public const int IsInvalidFieldNumber = 3;
    private readonly static bool IsInvalidDefaultValue = false;

    private bool isInvalid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvalid {
      get { if ((_hasBits0 & 2) != 0) { return isInvalid_; } else { return IsInvalidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isInvalid_ = value;
      }
    }
    /// <summary>Gets whether the "isInvalid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsInvalid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "isInvalid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsInvalid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjDecoUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjDecoUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Method != other.Method) return false;
      if (IsInvalid != other.IsInvalid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasMethod) hash ^= Method.GetHashCode();
      if (HasIsInvalid) hash ^= IsInvalid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasMethod) {
        output.WriteRawTag(18);
        output.WriteString(Method);
      }
      if (HasIsInvalid) {
        output.WriteRawTag(24);
        output.WriteBool(IsInvalid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasMethod) {
        output.WriteRawTag(18);
        output.WriteString(Method);
      }
      if (HasIsInvalid) {
        output.WriteRawTag(24);
        output.WriteBool(IsInvalid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasMethod) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (HasIsInvalid) {
        size += 1 + 1;
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjDecoUp other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasMethod) {
        Method = other.Method;
      }
      if (other.HasIsInvalid) {
        IsInvalid = other.IsInvalid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Method = input.ReadString();
            break;
          }
          case 24: {
            IsInvalid = input.ReadBool();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Method = input.ReadString();
            break;
          }
          case 24: {
            IsInvalid = input.ReadBool();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyAll : pb::IMessage<CBuyAll>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyAll> _parser = new pb::MessageParser<CBuyAll>(() => new CBuyAll());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[173]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyAll(CBuyAll other) : this() {
      _hasBits0 = other._hasBits0;
      buyList_ = other.buyList_;
      ignoreList_ = other.ignoreList_;
      moveList_ = other.moveList_;
      isImitateTiles_ = other.isImitateTiles_.Clone();
      cash_ = other.cash_;
      cost_ = other.cost_;
      invalidDeco_ = other.invalidDeco_;
      storeKey_ = other.storeKey_;
      floor_ = other.floor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyAll Clone() {
      return new CBuyAll(this);
    }

    /// <summary>Field number for the "buyList" field.</summary>
    public const int BuyListFieldNumber = 1;
    private readonly static string BuyListDefaultValue = "";

    private string buyList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuyList {
      get { return buyList_ ?? BuyListDefaultValue; }
      set {
        buyList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "buyList" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuyList {
      get { return buyList_ != null; }
    }
    /// <summary>Clears the value of the "buyList" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuyList() {
      buyList_ = null;
    }

    /// <summary>Field number for the "ignoreList" field.</summary>
    public const int IgnoreListFieldNumber = 2;
    private readonly static string IgnoreListDefaultValue = "";

    private string ignoreList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IgnoreList {
      get { return ignoreList_ ?? IgnoreListDefaultValue; }
      set {
        ignoreList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ignoreList" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIgnoreList {
      get { return ignoreList_ != null; }
    }
    /// <summary>Clears the value of the "ignoreList" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIgnoreList() {
      ignoreList_ = null;
    }

    /// <summary>Field number for the "moveList" field.</summary>
    public const int MoveListFieldNumber = 3;
    private readonly static string MoveListDefaultValue = "";

    private string moveList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveList {
      get { return moveList_ ?? MoveListDefaultValue; }
      set {
        moveList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "moveList" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveList {
      get { return moveList_ != null; }
    }
    /// <summary>Clears the value of the "moveList" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveList() {
      moveList_ = null;
    }

    /// <summary>Field number for the "isImitateTiles" field.</summary>
    public const int IsImitateTilesFieldNumber = 4;
    private static readonly pb::FieldCodec<bool> _repeated_isImitateTiles_codec
        = pb::FieldCodec.ForBool(32);
    private readonly pbc::RepeatedField<bool> isImitateTiles_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> IsImitateTiles {
      get { return isImitateTiles_; }
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 5;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 6;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 7;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 4) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 4;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 8;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 9;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 16) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 16;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuyList != other.BuyList) return false;
      if (IgnoreList != other.IgnoreList) return false;
      if (MoveList != other.MoveList) return false;
      if(!isImitateTiles_.Equals(other.isImitateTiles_)) return false;
      if (Cash != other.Cash) return false;
      if (Cost != other.Cost) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      if (StoreKey != other.StoreKey) return false;
      if (Floor != other.Floor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBuyList) hash ^= BuyList.GetHashCode();
      if (HasIgnoreList) hash ^= IgnoreList.GetHashCode();
      if (HasMoveList) hash ^= MoveList.GetHashCode();
      hash ^= isImitateTiles_.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBuyList) {
        output.WriteRawTag(10);
        output.WriteString(BuyList);
      }
      if (HasIgnoreList) {
        output.WriteRawTag(18);
        output.WriteString(IgnoreList);
      }
      if (HasMoveList) {
        output.WriteRawTag(26);
        output.WriteString(MoveList);
      }
      isImitateTiles_.WriteTo(output, _repeated_isImitateTiles_codec);
      if (HasCash) {
        output.WriteRawTag(40);
        output.WriteInt32(Cash);
      }
      if (HasCost) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(56);
        output.WriteInt32(InvalidDeco);
      }
      if (HasStoreKey) {
        output.WriteRawTag(64);
        output.WriteInt32(StoreKey);
      }
      if (HasFloor) {
        output.WriteRawTag(72);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBuyList) {
        output.WriteRawTag(10);
        output.WriteString(BuyList);
      }
      if (HasIgnoreList) {
        output.WriteRawTag(18);
        output.WriteString(IgnoreList);
      }
      if (HasMoveList) {
        output.WriteRawTag(26);
        output.WriteString(MoveList);
      }
      isImitateTiles_.WriteTo(ref output, _repeated_isImitateTiles_codec);
      if (HasCash) {
        output.WriteRawTag(40);
        output.WriteInt32(Cash);
      }
      if (HasCost) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(56);
        output.WriteInt32(InvalidDeco);
      }
      if (HasStoreKey) {
        output.WriteRawTag(64);
        output.WriteInt32(StoreKey);
      }
      if (HasFloor) {
        output.WriteRawTag(72);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBuyList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyList);
      }
      if (HasIgnoreList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IgnoreList);
      }
      if (HasMoveList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MoveList);
      }
      size += isImitateTiles_.CalculateSize(_repeated_isImitateTiles_codec);
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyAll other) {
      if (other == null) {
        return;
      }
      if (other.HasBuyList) {
        BuyList = other.BuyList;
      }
      if (other.HasIgnoreList) {
        IgnoreList = other.IgnoreList;
      }
      if (other.HasMoveList) {
        MoveList = other.MoveList;
      }
      isImitateTiles_.Add(other.isImitateTiles_);
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BuyList = input.ReadString();
            break;
          }
          case 18: {
            IgnoreList = input.ReadString();
            break;
          }
          case 26: {
            MoveList = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            isImitateTiles_.AddEntriesFrom(input, _repeated_isImitateTiles_codec);
            break;
          }
          case 40: {
            Cash = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 64: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 72: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BuyList = input.ReadString();
            break;
          }
          case 18: {
            IgnoreList = input.ReadString();
            break;
          }
          case 26: {
            MoveList = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            isImitateTiles_.AddEntriesFrom(ref input, _repeated_isImitateTiles_codec);
            break;
          }
          case 40: {
            Cash = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 64: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 72: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRevertDesign : pb::IMessage<CRevertDesign>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRevertDesign> _parser = new pb::MessageParser<CRevertDesign>(() => new CRevertDesign());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRevertDesign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[174]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRevertDesign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRevertDesign(CRevertDesign other) : this() {
      _hasBits0 = other._hasBits0;
      buyList_ = other.buyList_;
      ignoreList_ = other.ignoreList_;
      moveList_ = other.moveList_;
      isImitateTiles_ = other.isImitateTiles_.Clone();
      cash_ = other.cash_;
      cost_ = other.cost_;
      invalidDeco_ = other.invalidDeco_;
      storeKey_ = other.storeKey_;
      floor_ = other.floor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRevertDesign Clone() {
      return new CRevertDesign(this);
    }

    /// <summary>Field number for the "buyList" field.</summary>
    public const int BuyListFieldNumber = 1;
    private readonly static string BuyListDefaultValue = "";

    private string buyList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuyList {
      get { return buyList_ ?? BuyListDefaultValue; }
      set {
        buyList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "buyList" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuyList {
      get { return buyList_ != null; }
    }
    /// <summary>Clears the value of the "buyList" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuyList() {
      buyList_ = null;
    }

    /// <summary>Field number for the "ignoreList" field.</summary>
    public const int IgnoreListFieldNumber = 2;
    private readonly static string IgnoreListDefaultValue = "";

    private string ignoreList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IgnoreList {
      get { return ignoreList_ ?? IgnoreListDefaultValue; }
      set {
        ignoreList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ignoreList" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIgnoreList {
      get { return ignoreList_ != null; }
    }
    /// <summary>Clears the value of the "ignoreList" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIgnoreList() {
      ignoreList_ = null;
    }

    /// <summary>Field number for the "moveList" field.</summary>
    public const int MoveListFieldNumber = 3;
    private readonly static string MoveListDefaultValue = "";

    private string moveList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveList {
      get { return moveList_ ?? MoveListDefaultValue; }
      set {
        moveList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "moveList" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveList {
      get { return moveList_ != null; }
    }
    /// <summary>Clears the value of the "moveList" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveList() {
      moveList_ = null;
    }

    /// <summary>Field number for the "isImitateTiles" field.</summary>
    public const int IsImitateTilesFieldNumber = 4;
    private static readonly pb::FieldCodec<bool> _repeated_isImitateTiles_codec
        = pb::FieldCodec.ForBool(32);
    private readonly pbc::RepeatedField<bool> isImitateTiles_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> IsImitateTiles {
      get { return isImitateTiles_; }
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 5;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 6;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { if ((_hasBits0 & 2) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCost {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 7;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 4) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 4;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 8;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 9;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 16) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 16;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRevertDesign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRevertDesign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuyList != other.BuyList) return false;
      if (IgnoreList != other.IgnoreList) return false;
      if (MoveList != other.MoveList) return false;
      if(!isImitateTiles_.Equals(other.isImitateTiles_)) return false;
      if (Cash != other.Cash) return false;
      if (Cost != other.Cost) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      if (StoreKey != other.StoreKey) return false;
      if (Floor != other.Floor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBuyList) hash ^= BuyList.GetHashCode();
      if (HasIgnoreList) hash ^= IgnoreList.GetHashCode();
      if (HasMoveList) hash ^= MoveList.GetHashCode();
      hash ^= isImitateTiles_.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBuyList) {
        output.WriteRawTag(10);
        output.WriteString(BuyList);
      }
      if (HasIgnoreList) {
        output.WriteRawTag(18);
        output.WriteString(IgnoreList);
      }
      if (HasMoveList) {
        output.WriteRawTag(26);
        output.WriteString(MoveList);
      }
      isImitateTiles_.WriteTo(output, _repeated_isImitateTiles_codec);
      if (HasCash) {
        output.WriteRawTag(40);
        output.WriteInt32(Cash);
      }
      if (HasCost) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(56);
        output.WriteInt32(InvalidDeco);
      }
      if (HasStoreKey) {
        output.WriteRawTag(64);
        output.WriteInt32(StoreKey);
      }
      if (HasFloor) {
        output.WriteRawTag(72);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBuyList) {
        output.WriteRawTag(10);
        output.WriteString(BuyList);
      }
      if (HasIgnoreList) {
        output.WriteRawTag(18);
        output.WriteString(IgnoreList);
      }
      if (HasMoveList) {
        output.WriteRawTag(26);
        output.WriteString(MoveList);
      }
      isImitateTiles_.WriteTo(ref output, _repeated_isImitateTiles_codec);
      if (HasCash) {
        output.WriteRawTag(40);
        output.WriteInt32(Cash);
      }
      if (HasCost) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(56);
        output.WriteInt32(InvalidDeco);
      }
      if (HasStoreKey) {
        output.WriteRawTag(64);
        output.WriteInt32(StoreKey);
      }
      if (HasFloor) {
        output.WriteRawTag(72);
        output.WriteInt32(Floor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBuyList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyList);
      }
      if (HasIgnoreList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IgnoreList);
      }
      if (HasMoveList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MoveList);
      }
      size += isImitateTiles_.CalculateSize(_repeated_isImitateTiles_codec);
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRevertDesign other) {
      if (other == null) {
        return;
      }
      if (other.HasBuyList) {
        BuyList = other.BuyList;
      }
      if (other.HasIgnoreList) {
        IgnoreList = other.IgnoreList;
      }
      if (other.HasMoveList) {
        MoveList = other.MoveList;
      }
      isImitateTiles_.Add(other.isImitateTiles_);
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BuyList = input.ReadString();
            break;
          }
          case 18: {
            IgnoreList = input.ReadString();
            break;
          }
          case 26: {
            MoveList = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            isImitateTiles_.AddEntriesFrom(input, _repeated_isImitateTiles_codec);
            break;
          }
          case 40: {
            Cash = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 64: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 72: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BuyList = input.ReadString();
            break;
          }
          case 18: {
            IgnoreList = input.ReadString();
            break;
          }
          case 26: {
            MoveList = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            isImitateTiles_.AddEntriesFrom(ref input, _repeated_isImitateTiles_codec);
            break;
          }
          case 40: {
            Cash = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            InvalidDeco = input.ReadInt32();
            break;
          }
          case 64: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 72: {
            Floor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCashTreeHarvest : pb::IMessage<CCashTreeHarvest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCashTreeHarvest> _parser = new pb::MessageParser<CCashTreeHarvest>(() => new CCashTreeHarvest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCashTreeHarvest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[175]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashTreeHarvest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashTreeHarvest(CCashTreeHarvest other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashTreeHarvest Clone() {
      return new CCashTreeHarvest(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCashTreeHarvest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCashTreeHarvest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCashTreeHarvest other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRoastTicketHarvest : pb::IMessage<CRoastTicketHarvest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRoastTicketHarvest> _parser = new pb::MessageParser<CRoastTicketHarvest>(() => new CRoastTicketHarvest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRoastTicketHarvest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[176]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastTicketHarvest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastTicketHarvest(CRoastTicketHarvest other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRoastTicketHarvest Clone() {
      return new CRoastTicketHarvest(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRoastTicketHarvest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRoastTicketHarvest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRoastTicketHarvest other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCashTreePushEnable : pb::IMessage<CCashTreePushEnable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCashTreePushEnable> _parser = new pb::MessageParser<CCashTreePushEnable>(() => new CCashTreePushEnable());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCashTreePushEnable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[177]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashTreePushEnable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashTreePushEnable(CCashTreePushEnable other) : this() {
      _hasBits0 = other._hasBits0;
      enable_ = other.enable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashTreePushEnable Clone() {
      return new CCashTreePushEnable(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private readonly static bool EnableDefaultValue = false;

    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { if ((_hasBits0 & 1) != 0) { return enable_; } else { return EnableDefaultValue; } }
      set {
        _hasBits0 |= 1;
        enable_ = value;
      }
    }
    /// <summary>Gets whether the "enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnable {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnable() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCashTreePushEnable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCashTreePushEnable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEnable) hash ^= Enable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEnable) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEnable) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEnable) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCashTreePushEnable other) {
      if (other == null) {
        return;
      }
      if (other.HasEnable) {
        Enable = other.Enable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryTreeHelp : pb::IMessage<CCherryTreeHelp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryTreeHelp> _parser = new pb::MessageParser<CCherryTreeHelp>(() => new CCherryTreeHelp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryTreeHelp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[178]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHelp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHelp(CCherryTreeHelp other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      uid_ = other.uid_;
      fid_ = other.fid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHelp Clone() {
      return new CCherryTreeHelp(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 3;
    private readonly static string FidDefaultValue = "";

    private string fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fid {
      get { return fid_ ?? FidDefaultValue; }
      set {
        fid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFid {
      get { return fid_ != null; }
    }
    /// <summary>Clears the value of the "fid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFid() {
      fid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryTreeHelp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryTreeHelp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Uid != other.Uid) return false;
      if (Fid != other.Fid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasFid) hash ^= Fid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (HasFid) {
        output.WriteRawTag(26);
        output.WriteString(Fid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (HasFid) {
        output.WriteRawTag(26);
        output.WriteString(Fid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (HasFid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryTreeHelp other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasFid) {
        Fid = other.Fid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            Fid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            Fid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryTreeHelpList : pb::IMessage<CCherryTreeHelpList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryTreeHelpList> _parser = new pb::MessageParser<CCherryTreeHelpList>(() => new CCherryTreeHelpList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryTreeHelpList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[179]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHelpList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHelpList(CCherryTreeHelpList other) : this() {
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHelpList Clone() {
      return new CCherryTreeHelpList(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      uid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryTreeHelpList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryTreeHelpList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryTreeHelpList other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryTreeHarvest : pb::IMessage<CCherryTreeHarvest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryTreeHarvest> _parser = new pb::MessageParser<CCherryTreeHarvest>(() => new CCherryTreeHarvest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryTreeHarvest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[180]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHarvest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHarvest(CCherryTreeHarvest other) : this() {
      actionType_ = other.actionType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeHarvest Clone() {
      return new CCherryTreeHarvest(this);
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 2;
    private readonly static string ActionTypeDefaultValue = "";

    private string actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionType {
      get { return actionType_ ?? ActionTypeDefaultValue; }
      set {
        actionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "actionType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionType {
      get { return actionType_ != null; }
    }
    /// <summary>Clears the value of the "actionType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionType() {
      actionType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryTreeHarvest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryTreeHarvest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionType != other.ActionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasActionType) hash ^= ActionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasActionType) {
        output.WriteRawTag(18);
        output.WriteString(ActionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasActionType) {
        output.WriteRawTag(18);
        output.WriteString(ActionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasActionType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryTreeHarvest other) {
      if (other == null) {
        return;
      }
      if (other.HasActionType) {
        ActionType = other.ActionType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            ActionType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            ActionType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryTreeInitHelp : pb::IMessage<CCherryTreeInitHelp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryTreeInitHelp> _parser = new pb::MessageParser<CCherryTreeInitHelp>(() => new CCherryTreeInitHelp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryTreeInitHelp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[181]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeInitHelp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeInitHelp(CCherryTreeInitHelp other) : this() {
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryTreeInitHelp Clone() {
      return new CCherryTreeInitHelp(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      uid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryTreeInitHelp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryTreeInitHelp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryTreeInitHelp other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExistCherryTreeInven : pb::IMessage<CExistCherryTreeInven>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExistCherryTreeInven> _parser = new pb::MessageParser<CExistCherryTreeInven>(() => new CExistCherryTreeInven());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExistCherryTreeInven> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[182]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExistCherryTreeInven() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExistCherryTreeInven(CExistCherryTreeInven other) : this() {
      fid_ = other.fid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExistCherryTreeInven Clone() {
      return new CExistCherryTreeInven(this);
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 1;
    private readonly static string FidDefaultValue = "";

    private string fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fid {
      get { return fid_ ?? FidDefaultValue; }
      set {
        fid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFid {
      get { return fid_ != null; }
    }
    /// <summary>Clears the value of the "fid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFid() {
      fid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExistCherryTreeInven);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExistCherryTreeInven other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fid != other.Fid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFid) hash ^= Fid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFid) {
        output.WriteRawTag(10);
        output.WriteString(Fid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFid) {
        output.WriteRawTag(10);
        output.WriteString(Fid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExistCherryTreeInven other) {
      if (other == null) {
        return;
      }
      if (other.HasFid) {
        Fid = other.Fid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Fid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPurchaseGold : pb::IMessage<CPurchaseGold>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPurchaseGold> _parser = new pb::MessageParser<CPurchaseGold>(() => new CPurchaseGold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPurchaseGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[183]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPurchaseGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPurchaseGold(CPurchaseGold other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPurchaseGold Clone() {
      return new CPurchaseGold(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPurchaseGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPurchaseGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPurchaseGold other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAutoCoffeeMachineStart : pb::IMessage<CAutoCoffeeMachineStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAutoCoffeeMachineStart> _parser = new pb::MessageParser<CAutoCoffeeMachineStart>(() => new CAutoCoffeeMachineStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAutoCoffeeMachineStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[184]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineStart(CAutoCoffeeMachineStart other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      descId_ = other.descId_.Clone();
      count_ = other.count_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineStart Clone() {
      return new CAutoCoffeeMachineStart(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_descId_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> descId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DescId {
      get { return descId_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_count_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Count {
      get { return count_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAutoCoffeeMachineStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAutoCoffeeMachineStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      if(!descId_.Equals(other.descId_)) return false;
      if(!count_.Equals(other.count_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      hash ^= descId_.GetHashCode();
      hash ^= count_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      descId_.WriteTo(output, _repeated_descId_codec);
      count_.WriteTo(output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      descId_.WriteTo(ref output, _repeated_descId_codec);
      count_.WriteTo(ref output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      size += descId_.CalculateSize(_repeated_descId_codec);
      size += count_.CalculateSize(_repeated_count_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAutoCoffeeMachineStart other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      descId_.Add(other.descId_);
      count_.Add(other.count_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            descId_.AddEntriesFrom(input, _repeated_descId_codec);
            break;
          }
          case 34:
          case 32: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            descId_.AddEntriesFrom(ref input, _repeated_descId_codec);
            break;
          }
          case 34:
          case 32: {
            count_.AddEntriesFrom(ref input, _repeated_count_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAutoCoffeeMachineFin : pb::IMessage<CAutoCoffeeMachineFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAutoCoffeeMachineFin> _parser = new pb::MessageParser<CAutoCoffeeMachineFin>(() => new CAutoCoffeeMachineFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAutoCoffeeMachineFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[185]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineFin(CAutoCoffeeMachineFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineFin Clone() {
      return new CAutoCoffeeMachineFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAutoCoffeeMachineFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAutoCoffeeMachineFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAutoCoffeeMachineFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAutoCoffeeMachineShorten : pb::IMessage<CAutoCoffeeMachineShorten>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAutoCoffeeMachineShorten> _parser = new pb::MessageParser<CAutoCoffeeMachineShorten>(() => new CAutoCoffeeMachineShorten());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAutoCoffeeMachineShorten> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[186]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineShorten() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineShorten(CAutoCoffeeMachineShorten other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoCoffeeMachineShorten Clone() {
      return new CAutoCoffeeMachineShorten(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAutoCoffeeMachineShorten);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAutoCoffeeMachineShorten other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAutoCoffeeMachineShorten other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffeeFinAuto : pb::IMessage<CCoffeeFinAuto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffeeFinAuto> _parser = new pb::MessageParser<CCoffeeFinAuto>(() => new CCoffeeFinAuto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffeeFinAuto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[187]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeFinAuto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeFinAuto(CCoffeeFinAuto other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      fids_ = other.fids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeFinAuto Clone() {
      return new CCoffeeFinAuto(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "fids" field.</summary>
    public const int FidsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fids_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fids {
      get { return fids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffeeFinAuto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffeeFinAuto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      if(!fids_.Equals(other.fids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      hash ^= fids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      fids_.WriteTo(output, _repeated_fids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      fids_.WriteTo(ref output, _repeated_fids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      size += fids_.CalculateSize(_repeated_fids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffeeFinAuto other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      fids_.Add(other.fids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            fids_.AddEntriesFrom(input, _repeated_fids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            fids_.AddEntriesFrom(ref input, _repeated_fids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CConfirmExpiredSaleEvent : pb::IMessage<CConfirmExpiredSaleEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CConfirmExpiredSaleEvent> _parser = new pb::MessageParser<CConfirmExpiredSaleEvent>(() => new CConfirmExpiredSaleEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CConfirmExpiredSaleEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[188]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CConfirmExpiredSaleEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CConfirmExpiredSaleEvent(CConfirmExpiredSaleEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CConfirmExpiredSaleEvent Clone() {
      return new CConfirmExpiredSaleEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CConfirmExpiredSaleEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CConfirmExpiredSaleEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CConfirmExpiredSaleEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CSendClover : pb::IMessage<CSendClover>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSendClover> _parser = new pb::MessageParser<CSendClover>(() => new CSendClover());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSendClover> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[189]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSendClover() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSendClover(CSendClover other) : this() {
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSendClover Clone() {
      return new CSendClover(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      uid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSendClover);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSendClover other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSendClover other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetCloverReward : pb::IMessage<CGetCloverReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetCloverReward> _parser = new pb::MessageParser<CGetCloverReward>(() => new CGetCloverReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetCloverReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[190]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCloverReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCloverReward(CGetCloverReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCloverReward Clone() {
      return new CGetCloverReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetCloverReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetCloverReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetCloverReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyPointItem : pb::IMessage<CBuyPointItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyPointItem> _parser = new pb::MessageParser<CBuyPointItem>(() => new CBuyPointItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyPointItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[191]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPointItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPointItem(CBuyPointItem other) : this() {
      shopId_ = other.shopId_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPointItem Clone() {
      return new CBuyPointItem(this);
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private readonly static string ShopIdDefaultValue = "";

    private string shopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShopId {
      get { return shopId_ ?? ShopIdDefaultValue; }
      set {
        shopId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shopId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShopId {
      get { return shopId_ != null; }
    }
    /// <summary>Clears the value of the "shopId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShopId() {
      shopId_ = null;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyPointItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyPointItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasShopId) hash ^= ShopId.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasShopId) {
        output.WriteRawTag(10);
        output.WriteString(ShopId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasShopId) {
        output.WriteRawTag(10);
        output.WriteString(ShopId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasShopId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopId);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyPointItem other) {
      if (other == null) {
        return;
      }
      if (other.HasShopId) {
        ShopId = other.ShopId;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ShopId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ShopId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyShopPoint : pb::IMessage<CBuyShopPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyShopPoint> _parser = new pb::MessageParser<CBuyShopPoint>(() => new CBuyShopPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyShopPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[192]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyShopPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyShopPoint(CBuyShopPoint other) : this() {
      shopId_ = other.shopId_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyShopPoint Clone() {
      return new CBuyShopPoint(this);
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private readonly static string ShopIdDefaultValue = "";

    private string shopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShopId {
      get { return shopId_ ?? ShopIdDefaultValue; }
      set {
        shopId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shopId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShopId {
      get { return shopId_ != null; }
    }
    /// <summary>Clears the value of the "shopId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShopId() {
      shopId_ = null;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyShopPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyShopPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasShopId) hash ^= ShopId.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasShopId) {
        output.WriteRawTag(10);
        output.WriteString(ShopId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasShopId) {
        output.WriteRawTag(10);
        output.WriteString(ShopId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasShopId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopId);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyShopPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasShopId) {
        ShopId = other.ShopId;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ShopId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ShopId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CConfirmRefreshChargeEvent : pb::IMessage<CConfirmRefreshChargeEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CConfirmRefreshChargeEvent> _parser = new pb::MessageParser<CConfirmRefreshChargeEvent>(() => new CConfirmRefreshChargeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CConfirmRefreshChargeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[193]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CConfirmRefreshChargeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CConfirmRefreshChargeEvent(CConfirmRefreshChargeEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CConfirmRefreshChargeEvent Clone() {
      return new CConfirmRefreshChargeEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CConfirmRefreshChargeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CConfirmRefreshChargeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CConfirmRefreshChargeEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CChangeRandomFriendConfig : pb::IMessage<CChangeRandomFriendConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChangeRandomFriendConfig> _parser = new pb::MessageParser<CChangeRandomFriendConfig>(() => new CChangeRandomFriendConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChangeRandomFriendConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[194]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeRandomFriendConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeRandomFriendConfig(CChangeRandomFriendConfig other) : this() {
      _hasBits0 = other._hasBits0;
      useRandomFriend_ = other.useRandomFriend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeRandomFriendConfig Clone() {
      return new CChangeRandomFriendConfig(this);
    }

    /// <summary>Field number for the "useRandomFriend" field.</summary>
    public const int UseRandomFriendFieldNumber = 1;
    private readonly static bool UseRandomFriendDefaultValue = false;

    private bool useRandomFriend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRandomFriend {
      get { if ((_hasBits0 & 1) != 0) { return useRandomFriend_; } else { return UseRandomFriendDefaultValue; } }
      set {
        _hasBits0 |= 1;
        useRandomFriend_ = value;
      }
    }
    /// <summary>Gets whether the "useRandomFriend" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseRandomFriend {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "useRandomFriend" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseRandomFriend() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChangeRandomFriendConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChangeRandomFriendConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseRandomFriend != other.UseRandomFriend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUseRandomFriend) hash ^= UseRandomFriend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUseRandomFriend) {
        output.WriteRawTag(8);
        output.WriteBool(UseRandomFriend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUseRandomFriend) {
        output.WriteRawTag(8);
        output.WriteBool(UseRandomFriend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUseRandomFriend) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChangeRandomFriendConfig other) {
      if (other == null) {
        return;
      }
      if (other.HasUseRandomFriend) {
        UseRandomFriend = other.UseRandomFriend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseRandomFriend = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UseRandomFriend = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChangeRandomFriendName : pb::IMessage<CChangeRandomFriendName>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChangeRandomFriendName> _parser = new pb::MessageParser<CChangeRandomFriendName>(() => new CChangeRandomFriendName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChangeRandomFriendName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[195]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeRandomFriendName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeRandomFriendName(CChangeRandomFriendName other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeRandomFriendName Clone() {
      return new CChangeRandomFriendName(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChangeRandomFriendName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChangeRandomFriendName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChangeRandomFriendName other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CHideRandomFriendFollower : pb::IMessage<CHideRandomFriendFollower>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CHideRandomFriendFollower> _parser = new pb::MessageParser<CHideRandomFriendFollower>(() => new CHideRandomFriendFollower());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CHideRandomFriendFollower> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[196]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHideRandomFriendFollower() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHideRandomFriendFollower(CHideRandomFriendFollower other) : this() {
      fid_ = other.fid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHideRandomFriendFollower Clone() {
      return new CHideRandomFriendFollower(this);
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 1;
    private readonly static string FidDefaultValue = "";

    private string fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fid {
      get { return fid_ ?? FidDefaultValue; }
      set {
        fid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFid {
      get { return fid_ != null; }
    }
    /// <summary>Clears the value of the "fid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFid() {
      fid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CHideRandomFriendFollower);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CHideRandomFriendFollower other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fid != other.Fid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFid) hash ^= Fid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFid) {
        output.WriteRawTag(10);
        output.WriteString(Fid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFid) {
        output.WriteRawTag(10);
        output.WriteString(Fid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CHideRandomFriendFollower other) {
      if (other == null) {
        return;
      }
      if (other.HasFid) {
        Fid = other.Fid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Fid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRemoveHideFollower : pb::IMessage<CRemoveHideFollower>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRemoveHideFollower> _parser = new pb::MessageParser<CRemoveHideFollower>(() => new CRemoveHideFollower());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRemoveHideFollower> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[197]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveHideFollower() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveHideFollower(CRemoveHideFollower other) : this() {
      uid_ = other.uid_;
      removeList_ = other.removeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveHideFollower Clone() {
      return new CRemoveHideFollower(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static string UidDefaultValue = "";

    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_ ?? UidDefaultValue; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "removeList" field.</summary>
    public const int RemoveListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_removeList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> removeList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RemoveList {
      get { return removeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRemoveHideFollower);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRemoveHideFollower other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if(!removeList_.Equals(other.removeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      hash ^= removeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      removeList_.WriteTo(output, _repeated_removeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      removeList_.WriteTo(ref output, _repeated_removeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      size += removeList_.CalculateSize(_repeated_removeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRemoveHideFollower other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      removeList_.Add(other.removeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            removeList_.AddEntriesFrom(input, _repeated_removeList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            removeList_.AddEntriesFrom(ref input, _repeated_removeList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetHideRandomFriendFollower : pb::IMessage<CGetHideRandomFriendFollower>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetHideRandomFriendFollower> _parser = new pb::MessageParser<CGetHideRandomFriendFollower>(() => new CGetHideRandomFriendFollower());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetHideRandomFriendFollower> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[198]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetHideRandomFriendFollower() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetHideRandomFriendFollower(CGetHideRandomFriendFollower other) : this() {
      fid_ = other.fid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetHideRandomFriendFollower Clone() {
      return new CGetHideRandomFriendFollower(this);
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 2;
    private readonly static string FidDefaultValue = "";

    private string fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fid {
      get { return fid_ ?? FidDefaultValue; }
      set {
        fid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFid {
      get { return fid_ != null; }
    }
    /// <summary>Clears the value of the "fid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFid() {
      fid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetHideRandomFriendFollower);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetHideRandomFriendFollower other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fid != other.Fid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFid) hash ^= Fid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFid) {
        output.WriteRawTag(18);
        output.WriteString(Fid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFid) {
        output.WriteRawTag(18);
        output.WriteString(Fid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetHideRandomFriendFollower other) {
      if (other == null) {
        return;
      }
      if (other.HasFid) {
        Fid = other.Fid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Fid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            Fid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyLuckyBox : pb::IMessage<CBuyLuckyBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyLuckyBox> _parser = new pb::MessageParser<CBuyLuckyBox>(() => new CBuyLuckyBox());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyLuckyBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[199]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyLuckyBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyLuckyBox(CBuyLuckyBox other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      count_ = other.count_;
      isCost2_ = other.isCost2_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyLuckyBox Clone() {
      return new CBuyLuckyBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "isCost2" field.</summary>
    public const int IsCost2FieldNumber = 3;
    private readonly static bool IsCost2DefaultValue = false;

    private bool isCost2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCost2 {
      get { if ((_hasBits0 & 2) != 0) { return isCost2_; } else { return IsCost2DefaultValue; } }
      set {
        _hasBits0 |= 2;
        isCost2_ = value;
      }
    }
    /// <summary>Gets whether the "isCost2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsCost2 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "isCost2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsCost2() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 4) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyLuckyBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyLuckyBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (IsCost2 != other.IsCost2) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasIsCost2) hash ^= IsCost2.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasIsCost2) {
        output.WriteRawTag(24);
        output.WriteBool(IsCost2);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasIsCost2) {
        output.WriteRawTag(24);
        output.WriteBool(IsCost2);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (HasIsCost2) {
        size += 1 + 1;
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyLuckyBox other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasIsCost2) {
        IsCost2 = other.IsCost2;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            IsCost2 = input.ReadBool();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            IsCost2 = input.ReadBool();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class COpenLuckyBox : pb::IMessage<COpenLuckyBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<COpenLuckyBox> _parser = new pb::MessageParser<COpenLuckyBox>(() => new COpenLuckyBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<COpenLuckyBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[200]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenLuckyBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenLuckyBox(COpenLuckyBox other) : this() {
      id_ = other.id_;
      magCouponId_ = other.magCouponId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenLuckyBox Clone() {
      return new COpenLuckyBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "magCouponId" field.</summary>
    public const int MagCouponIdFieldNumber = 2;
    private readonly static string MagCouponIdDefaultValue = "";

    private string magCouponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagCouponId {
      get { return magCouponId_ ?? MagCouponIdDefaultValue; }
      set {
        magCouponId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "magCouponId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMagCouponId {
      get { return magCouponId_ != null; }
    }
    /// <summary>Clears the value of the "magCouponId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMagCouponId() {
      magCouponId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as COpenLuckyBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(COpenLuckyBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MagCouponId != other.MagCouponId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasMagCouponId) hash ^= MagCouponId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasMagCouponId) {
        output.WriteRawTag(18);
        output.WriteString(MagCouponId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasMagCouponId) {
        output.WriteRawTag(18);
        output.WriteString(MagCouponId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasMagCouponId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MagCouponId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(COpenLuckyBox other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasMagCouponId) {
        MagCouponId = other.MagCouponId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MagCouponId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MagCouponId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyPackageBox : pb::IMessage<CBuyPackageBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyPackageBox> _parser = new pb::MessageParser<CBuyPackageBox>(() => new CBuyPackageBox());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyPackageBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[201]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPackageBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPackageBox(CBuyPackageBox other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      cash_ = other.cash_;
      itemIds_ = other.itemIds_.Clone();
      itemCounts_ = other.itemCounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPackageBox Clone() {
      return new CBuyPackageBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_itemIds_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> itemIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "itemCounts" field.</summary>
    public const int ItemCountsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_itemCounts_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> itemCounts_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemCounts {
      get { return itemCounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyPackageBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyPackageBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cash != other.Cash) return false;
      if(!itemIds_.Equals(other.itemIds_)) return false;
      if(!itemCounts_.Equals(other.itemCounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      hash ^= itemIds_.GetHashCode();
      hash ^= itemCounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      itemCounts_.WriteTo(output, _repeated_itemCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      itemIds_.WriteTo(ref output, _repeated_itemIds_codec);
      itemCounts_.WriteTo(ref output, _repeated_itemCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += itemCounts_.CalculateSize(_repeated_itemCounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyPackageBox other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      itemIds_.Add(other.itemIds_);
      itemCounts_.Add(other.itemCounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 26: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 34:
          case 32: {
            itemCounts_.AddEntriesFrom(input, _repeated_itemCounts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 26: {
            itemIds_.AddEntriesFrom(ref input, _repeated_itemIds_codec);
            break;
          }
          case 34:
          case 32: {
            itemCounts_.AddEntriesFrom(ref input, _repeated_itemCounts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class COpenPackageBox : pb::IMessage<COpenPackageBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<COpenPackageBox> _parser = new pb::MessageParser<COpenPackageBox>(() => new COpenPackageBox());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<COpenPackageBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[202]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenPackageBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenPackageBox(COpenPackageBox other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      itemIds_ = other.itemIds_.Clone();
      itemCounts_ = other.itemCounts_.Clone();
      expire_ = other.expire_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenPackageBox Clone() {
      return new COpenPackageBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_itemIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> itemIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "itemCounts" field.</summary>
    public const int ItemCountsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_itemCounts_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> itemCounts_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemCounts {
      get { return itemCounts_; }
    }

    /// <summary>Field number for the "expire" field.</summary>
    public const int ExpireFieldNumber = 4;
    private readonly static int ExpireDefaultValue = 0;

    private int expire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Expire {
      get { if ((_hasBits0 & 1) != 0) { return expire_; } else { return ExpireDefaultValue; } }
      set {
        _hasBits0 |= 1;
        expire_ = value;
      }
    }
    /// <summary>Gets whether the "expire" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpire {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "expire" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpire() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as COpenPackageBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(COpenPackageBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!itemIds_.Equals(other.itemIds_)) return false;
      if(!itemCounts_.Equals(other.itemCounts_)) return false;
      if (Expire != other.Expire) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= itemIds_.GetHashCode();
      hash ^= itemCounts_.GetHashCode();
      if (HasExpire) hash ^= Expire.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      itemCounts_.WriteTo(output, _repeated_itemCounts_codec);
      if (HasExpire) {
        output.WriteRawTag(32);
        output.WriteInt32(Expire);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      itemIds_.WriteTo(ref output, _repeated_itemIds_codec);
      itemCounts_.WriteTo(ref output, _repeated_itemCounts_codec);
      if (HasExpire) {
        output.WriteRawTag(32);
        output.WriteInt32(Expire);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += itemCounts_.CalculateSize(_repeated_itemCounts_codec);
      if (HasExpire) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Expire);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(COpenPackageBox other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      itemIds_.Add(other.itemIds_);
      itemCounts_.Add(other.itemCounts_);
      if (other.HasExpire) {
        Expire = other.Expire;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 26:
          case 24: {
            itemCounts_.AddEntriesFrom(input, _repeated_itemCounts_codec);
            break;
          }
          case 32: {
            Expire = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            itemIds_.AddEntriesFrom(ref input, _repeated_itemIds_codec);
            break;
          }
          case 26:
          case 24: {
            itemCounts_.AddEntriesFrom(ref input, _repeated_itemCounts_codec);
            break;
          }
          case 32: {
            Expire = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyItemCoupon : pb::IMessage<CBuyItemCoupon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyItemCoupon> _parser = new pb::MessageParser<CBuyItemCoupon>(() => new CBuyItemCoupon());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyItemCoupon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[203]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyItemCoupon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyItemCoupon(CBuyItemCoupon other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      count_ = other.count_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyItemCoupon Clone() {
      return new CBuyItemCoupon(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 2) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyItemCoupon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyItemCoupon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasPrice) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasPrice) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyItemCoupon other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUseItemCoupon : pb::IMessage<CUseItemCoupon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUseItemCoupon> _parser = new pb::MessageParser<CUseItemCoupon>(() => new CUseItemCoupon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUseItemCoupon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[204]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseItemCoupon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseItemCoupon(CUseItemCoupon other) : this() {
      couponId_ = other.couponId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseItemCoupon Clone() {
      return new CUseItemCoupon(this);
    }

    /// <summary>Field number for the "couponId" field.</summary>
    public const int CouponIdFieldNumber = 1;
    private readonly static string CouponIdDefaultValue = "";

    private string couponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CouponId {
      get { return couponId_ ?? CouponIdDefaultValue; }
      set {
        couponId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "couponId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCouponId {
      get { return couponId_ != null; }
    }
    /// <summary>Clears the value of the "couponId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCouponId() {
      couponId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUseItemCoupon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUseItemCoupon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CouponId != other.CouponId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCouponId) hash ^= CouponId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCouponId) {
        output.WriteRawTag(10);
        output.WriteString(CouponId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCouponId) {
        output.WriteRawTag(10);
        output.WriteString(CouponId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCouponId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CouponId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUseItemCoupon other) {
      if (other == null) {
        return;
      }
      if (other.HasCouponId) {
        CouponId = other.CouponId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CouponId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CouponId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyNPCGift : pb::IMessage<CBuyNPCGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyNPCGift> _parser = new pb::MessageParser<CBuyNPCGift>(() => new CBuyNPCGift());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyNPCGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[205]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyNPCGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyNPCGift(CBuyNPCGift other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      itemCount_ = other.itemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyNPCGift Clone() {
      return new CBuyNPCGift(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    /// <summary>Field number for the "itemCount" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private readonly static int ItemCountDefaultValue = 0;

    private int itemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { if ((_hasBits0 & 1) != 0) { return itemCount_; } else { return ItemCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemCount_ = value;
      }
    }
    /// <summary>Gets whether the "itemCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "itemCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyNPCGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyNPCGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (ItemCount != other.ItemCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasItemCount) hash ^= ItemCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasItemCount) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasItemCount) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (HasItemCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyNPCGift other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasItemCount) {
        ItemCount = other.ItemCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSubmitSurvey : pb::IMessage<CSubmitSurvey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSubmitSurvey> _parser = new pb::MessageParser<CSubmitSurvey>(() => new CSubmitSurvey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSubmitSurvey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[206]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSubmitSurvey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSubmitSurvey(CSubmitSurvey other) : this() {
      id_ = other.id_;
      answer_ = other.answer_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSubmitSurvey Clone() {
      return new CSubmitSurvey(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_answer_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> answer_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Answer {
      get { return answer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSubmitSurvey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSubmitSurvey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!answer_.Equals(other.answer_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= answer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      answer_.WriteTo(output, _repeated_answer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      answer_.WriteTo(ref output, _repeated_answer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += answer_.CalculateSize(_repeated_answer_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSubmitSurvey other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      answer_.Add(other.answer_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            answer_.AddEntriesFrom(input, _repeated_answer_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            answer_.AddEntriesFrom(ref input, _repeated_answer_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSubmitSurveyTest : pb::IMessage<CSubmitSurveyTest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSubmitSurveyTest> _parser = new pb::MessageParser<CSubmitSurveyTest>(() => new CSubmitSurveyTest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSubmitSurveyTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[207]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSubmitSurveyTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSubmitSurveyTest(CSubmitSurveyTest other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      finalSubmit_ = other.finalSubmit_;
      answer_ = other.answer_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSubmitSurveyTest Clone() {
      return new CSubmitSurveyTest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "finalSubmit" field.</summary>
    public const int FinalSubmitFieldNumber = 2;
    private readonly static bool FinalSubmitDefaultValue = false;

    private bool finalSubmit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinalSubmit {
      get { if ((_hasBits0 & 1) != 0) { return finalSubmit_; } else { return FinalSubmitDefaultValue; } }
      set {
        _hasBits0 |= 1;
        finalSubmit_ = value;
      }
    }
    /// <summary>Gets whether the "finalSubmit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFinalSubmit {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "finalSubmit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFinalSubmit() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_answer_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> answer_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Answer {
      get { return answer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSubmitSurveyTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSubmitSurveyTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FinalSubmit != other.FinalSubmit) return false;
      if(!answer_.Equals(other.answer_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasFinalSubmit) hash ^= FinalSubmit.GetHashCode();
      hash ^= answer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasFinalSubmit) {
        output.WriteRawTag(16);
        output.WriteBool(FinalSubmit);
      }
      answer_.WriteTo(output, _repeated_answer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasFinalSubmit) {
        output.WriteRawTag(16);
        output.WriteBool(FinalSubmit);
      }
      answer_.WriteTo(ref output, _repeated_answer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasFinalSubmit) {
        size += 1 + 1;
      }
      size += answer_.CalculateSize(_repeated_answer_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSubmitSurveyTest other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasFinalSubmit) {
        FinalSubmit = other.FinalSubmit;
      }
      answer_.Add(other.answer_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            FinalSubmit = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            answer_.AddEntriesFrom(input, _repeated_answer_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            FinalSubmit = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            answer_.AddEntriesFrom(ref input, _repeated_answer_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CResetSurveyTest : pb::IMessage<CResetSurveyTest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CResetSurveyTest> _parser = new pb::MessageParser<CResetSurveyTest>(() => new CResetSurveyTest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CResetSurveyTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[208]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResetSurveyTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResetSurveyTest(CResetSurveyTest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CResetSurveyTest Clone() {
      return new CResetSurveyTest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CResetSurveyTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CResetSurveyTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CResetSurveyTest other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSendEventGift : pb::IMessage<CSendEventGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSendEventGift> _parser = new pb::MessageParser<CSendEventGift>(() => new CSendEventGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSendEventGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[209]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSendEventGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSendEventGift(CSendEventGift other) : this() {
      eventName_ = other.eventName_;
      fids_ = other.fids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSendEventGift Clone() {
      return new CSendEventGift(this);
    }

    /// <summary>Field number for the "eventName" field.</summary>
    public const int EventNameFieldNumber = 1;
    private readonly static string EventNameDefaultValue = "";

    private string eventName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventName {
      get { return eventName_ ?? EventNameDefaultValue; }
      set {
        eventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventName {
      get { return eventName_ != null; }
    }
    /// <summary>Clears the value of the "eventName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventName() {
      eventName_ = null;
    }

    /// <summary>Field number for the "fids" field.</summary>
    public const int FidsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_fids_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> fids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fids {
      get { return fids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSendEventGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSendEventGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventName != other.EventName) return false;
      if(!fids_.Equals(other.fids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventName) hash ^= EventName.GetHashCode();
      hash ^= fids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventName) {
        output.WriteRawTag(10);
        output.WriteString(EventName);
      }
      fids_.WriteTo(output, _repeated_fids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventName) {
        output.WriteRawTag(10);
        output.WriteString(EventName);
      }
      fids_.WriteTo(ref output, _repeated_fids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventName);
      }
      size += fids_.CalculateSize(_repeated_fids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSendEventGift other) {
      if (other == null) {
        return;
      }
      if (other.HasEventName) {
        EventName = other.EventName;
      }
      fids_.Add(other.fids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventName = input.ReadString();
            break;
          }
          case 18: {
            fids_.AddEntriesFrom(input, _repeated_fids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventName = input.ReadString();
            break;
          }
          case 18: {
            fids_.AddEntriesFrom(ref input, _repeated_fids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SEventUpdated : pb::IMessage<SEventUpdated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SEventUpdated> _parser = new pb::MessageParser<SEventUpdated>(() => new SEventUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SEventUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[210]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SEventUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SEventUpdated(SEventUpdated other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SEventUpdated Clone() {
      return new SEventUpdated(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SEventUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SEventUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SEventUpdated other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CReduceEvent : pb::IMessage<CReduceEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CReduceEvent> _parser = new pb::MessageParser<CReduceEvent>(() => new CReduceEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CReduceEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[211]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReduceEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReduceEvent(CReduceEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReduceEvent Clone() {
      return new CReduceEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CReduceEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CReduceEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CReduceEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CStampEvent : pb::IMessage<CStampEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStampEvent> _parser = new pb::MessageParser<CStampEvent>(() => new CStampEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStampEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[212]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEvent(CStampEvent other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      goalId_ = other.goalId_;
      contribution_ = other.contribution_;
      tip_ = other.tip_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEvent Clone() {
      return new CStampEvent(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    /// <summary>Field number for the "goalId" field.</summary>
    public const int GoalIdFieldNumber = 2;
    private readonly static string GoalIdDefaultValue = "";

    private string goalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoalId {
      get { return goalId_ ?? GoalIdDefaultValue; }
      set {
        goalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "goalId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoalId {
      get { return goalId_ != null; }
    }
    /// <summary>Clears the value of the "goalId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoalId() {
      goalId_ = null;
    }

    /// <summary>Field number for the "contribution" field.</summary>
    public const int ContributionFieldNumber = 3;
    private readonly static int ContributionDefaultValue = 0;

    private int contribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Contribution {
      get { if ((_hasBits0 & 1) != 0) { return contribution_; } else { return ContributionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contribution_ = value;
      }
    }
    /// <summary>Gets whether the "contribution" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContribution {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contribution" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContribution() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tip" field.</summary>
    public const int TipFieldNumber = 4;
    private readonly static int TipDefaultValue = 0;

    private int tip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tip {
      get { if ((_hasBits0 & 2) != 0) { return tip_; } else { return TipDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tip_ = value;
      }
    }
    /// <summary>Gets whether the "tip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTip {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTip() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 5;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStampEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStampEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (GoalId != other.GoalId) return false;
      if (Contribution != other.Contribution) return false;
      if (Tip != other.Tip) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasGoalId) hash ^= GoalId.GetHashCode();
      if (HasContribution) hash ^= Contribution.GetHashCode();
      if (HasTip) hash ^= Tip.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasGoalId) {
        output.WriteRawTag(18);
        output.WriteString(GoalId);
      }
      if (HasContribution) {
        output.WriteRawTag(24);
        output.WriteInt32(Contribution);
      }
      if (HasTip) {
        output.WriteRawTag(32);
        output.WriteInt32(Tip);
      }
      if (HasItemId) {
        output.WriteRawTag(42);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasGoalId) {
        output.WriteRawTag(18);
        output.WriteString(GoalId);
      }
      if (HasContribution) {
        output.WriteRawTag(24);
        output.WriteInt32(Contribution);
      }
      if (HasTip) {
        output.WriteRawTag(32);
        output.WriteInt32(Tip);
      }
      if (HasItemId) {
        output.WriteRawTag(42);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (HasGoalId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoalId);
      }
      if (HasContribution) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Contribution);
      }
      if (HasTip) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tip);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStampEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasGoalId) {
        GoalId = other.GoalId;
      }
      if (other.HasContribution) {
        Contribution = other.Contribution;
      }
      if (other.HasTip) {
        Tip = other.Tip;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            GoalId = input.ReadString();
            break;
          }
          case 24: {
            Contribution = input.ReadInt32();
            break;
          }
          case 32: {
            Tip = input.ReadInt32();
            break;
          }
          case 42: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            GoalId = input.ReadString();
            break;
          }
          case 24: {
            Contribution = input.ReadInt32();
            break;
          }
          case 32: {
            Tip = input.ReadInt32();
            break;
          }
          case 42: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CStampEventClaimReward : pb::IMessage<CStampEventClaimReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStampEventClaimReward> _parser = new pb::MessageParser<CStampEventClaimReward>(() => new CStampEventClaimReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStampEventClaimReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[213]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEventClaimReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEventClaimReward(CStampEventClaimReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEventClaimReward Clone() {
      return new CStampEventClaimReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStampEventClaimReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStampEventClaimReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStampEventClaimReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CStampEventCashStamp : pb::IMessage<CStampEventCashStamp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStampEventCashStamp> _parser = new pb::MessageParser<CStampEventCashStamp>(() => new CStampEventCashStamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStampEventCashStamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[214]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEventCashStamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEventCashStamp(CStampEventCashStamp other) : this() {
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStampEventCashStamp Clone() {
      return new CStampEventCashStamp(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStampEventCashStamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStampEventCashStamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStampEventCashStamp other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInviteKakaoEventSend : pb::IMessage<CInviteKakaoEventSend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInviteKakaoEventSend> _parser = new pb::MessageParser<CInviteKakaoEventSend>(() => new CInviteKakaoEventSend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInviteKakaoEventSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[215]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEventSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEventSend(CInviteKakaoEventSend other) : this() {
      eventId_ = other.eventId_;
      myKey_ = other.myKey_;
      friendIds_ = other.friendIds_.Clone();
      friendKeys_ = other.friendKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEventSend Clone() {
      return new CInviteKakaoEventSend(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    /// <summary>Field number for the "myKey" field.</summary>
    public const int MyKeyFieldNumber = 2;
    private readonly static string MyKeyDefaultValue = "";

    private string myKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MyKey {
      get { return myKey_ ?? MyKeyDefaultValue; }
      set {
        myKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "myKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMyKey {
      get { return myKey_ != null; }
    }
    /// <summary>Clears the value of the "myKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMyKey() {
      myKey_ = null;
    }

    /// <summary>Field number for the "friendIds" field.</summary>
    public const int FriendIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_friendIds_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> friendIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FriendIds {
      get { return friendIds_; }
    }

    /// <summary>Field number for the "friendKeys" field.</summary>
    public const int FriendKeysFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_friendKeys_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> friendKeys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FriendKeys {
      get { return friendKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInviteKakaoEventSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInviteKakaoEventSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (MyKey != other.MyKey) return false;
      if(!friendIds_.Equals(other.friendIds_)) return false;
      if(!friendKeys_.Equals(other.friendKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasMyKey) hash ^= MyKey.GetHashCode();
      hash ^= friendIds_.GetHashCode();
      hash ^= friendKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasMyKey) {
        output.WriteRawTag(18);
        output.WriteString(MyKey);
      }
      friendIds_.WriteTo(output, _repeated_friendIds_codec);
      friendKeys_.WriteTo(output, _repeated_friendKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasMyKey) {
        output.WriteRawTag(18);
        output.WriteString(MyKey);
      }
      friendIds_.WriteTo(ref output, _repeated_friendIds_codec);
      friendKeys_.WriteTo(ref output, _repeated_friendKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (HasMyKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MyKey);
      }
      size += friendIds_.CalculateSize(_repeated_friendIds_codec);
      size += friendKeys_.CalculateSize(_repeated_friendKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInviteKakaoEventSend other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasMyKey) {
        MyKey = other.MyKey;
      }
      friendIds_.Add(other.friendIds_);
      friendKeys_.Add(other.friendKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            MyKey = input.ReadString();
            break;
          }
          case 26: {
            friendIds_.AddEntriesFrom(input, _repeated_friendIds_codec);
            break;
          }
          case 34: {
            friendKeys_.AddEntriesFrom(input, _repeated_friendKeys_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            MyKey = input.ReadString();
            break;
          }
          case 26: {
            friendIds_.AddEntriesFrom(ref input, _repeated_friendIds_codec);
            break;
          }
          case 34: {
            friendKeys_.AddEntriesFrom(ref input, _repeated_friendKeys_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInviteKakaoEventThanks : pb::IMessage<CInviteKakaoEventThanks>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInviteKakaoEventThanks> _parser = new pb::MessageParser<CInviteKakaoEventThanks>(() => new CInviteKakaoEventThanks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInviteKakaoEventThanks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[216]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEventThanks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEventThanks(CInviteKakaoEventThanks other) : this() {
      eventId_ = other.eventId_;
      myKey_ = other.myKey_;
      friendKey_ = other.friendKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInviteKakaoEventThanks Clone() {
      return new CInviteKakaoEventThanks(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    /// <summary>Field number for the "myKey" field.</summary>
    public const int MyKeyFieldNumber = 2;
    private readonly static string MyKeyDefaultValue = "";

    private string myKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MyKey {
      get { return myKey_ ?? MyKeyDefaultValue; }
      set {
        myKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "myKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMyKey {
      get { return myKey_ != null; }
    }
    /// <summary>Clears the value of the "myKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMyKey() {
      myKey_ = null;
    }

    /// <summary>Field number for the "friendKey" field.</summary>
    public const int FriendKeyFieldNumber = 3;
    private readonly static string FriendKeyDefaultValue = "";

    private string friendKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendKey {
      get { return friendKey_ ?? FriendKeyDefaultValue; }
      set {
        friendKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "friendKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFriendKey {
      get { return friendKey_ != null; }
    }
    /// <summary>Clears the value of the "friendKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFriendKey() {
      friendKey_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInviteKakaoEventThanks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInviteKakaoEventThanks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (MyKey != other.MyKey) return false;
      if (FriendKey != other.FriendKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasMyKey) hash ^= MyKey.GetHashCode();
      if (HasFriendKey) hash ^= FriendKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasMyKey) {
        output.WriteRawTag(18);
        output.WriteString(MyKey);
      }
      if (HasFriendKey) {
        output.WriteRawTag(26);
        output.WriteString(FriendKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasMyKey) {
        output.WriteRawTag(18);
        output.WriteString(MyKey);
      }
      if (HasFriendKey) {
        output.WriteRawTag(26);
        output.WriteString(FriendKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (HasMyKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MyKey);
      }
      if (HasFriendKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInviteKakaoEventThanks other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasMyKey) {
        MyKey = other.MyKey;
      }
      if (other.HasFriendKey) {
        FriendKey = other.FriendKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            MyKey = input.ReadString();
            break;
          }
          case 26: {
            FriendKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            MyKey = input.ReadString();
            break;
          }
          case 26: {
            FriendKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CReportFriendsCount : pb::IMessage<CReportFriendsCount>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CReportFriendsCount> _parser = new pb::MessageParser<CReportFriendsCount>(() => new CReportFriendsCount());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CReportFriendsCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[217]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReportFriendsCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReportFriendsCount(CReportFriendsCount other) : this() {
      _hasBits0 = other._hasBits0;
      fr_ = other.fr_;
      aFr_ = other.aFr_;
      rf_ = other.rf_;
      aRf_ = other.aRf_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReportFriendsCount Clone() {
      return new CReportFriendsCount(this);
    }

    /// <summary>Field number for the "fr" field.</summary>
    public const int FrFieldNumber = 1;
    private readonly static int FrDefaultValue = 0;

    private int fr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fr {
      get { if ((_hasBits0 & 1) != 0) { return fr_; } else { return FrDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fr_ = value;
      }
    }
    /// <summary>Gets whether the "fr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFr {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFr() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "aFr" field.</summary>
    public const int AFrFieldNumber = 2;
    private readonly static int AFrDefaultValue = 0;

    private int aFr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AFr {
      get { if ((_hasBits0 & 2) != 0) { return aFr_; } else { return AFrDefaultValue; } }
      set {
        _hasBits0 |= 2;
        aFr_ = value;
      }
    }
    /// <summary>Gets whether the "aFr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAFr {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "aFr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAFr() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rf" field.</summary>
    public const int RfFieldNumber = 3;
    private readonly static int RfDefaultValue = 0;

    private int rf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rf {
      get { if ((_hasBits0 & 4) != 0) { return rf_; } else { return RfDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rf_ = value;
      }
    }
    /// <summary>Gets whether the "rf" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRf {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rf" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRf() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "aRf" field.</summary>
    public const int ARfFieldNumber = 4;
    private readonly static int ARfDefaultValue = 0;

    private int aRf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ARf {
      get { if ((_hasBits0 & 8) != 0) { return aRf_; } else { return ARfDefaultValue; } }
      set {
        _hasBits0 |= 8;
        aRf_ = value;
      }
    }
    /// <summary>Gets whether the "aRf" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasARf {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "aRf" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearARf() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CReportFriendsCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CReportFriendsCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fr != other.Fr) return false;
      if (AFr != other.AFr) return false;
      if (Rf != other.Rf) return false;
      if (ARf != other.ARf) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFr) hash ^= Fr.GetHashCode();
      if (HasAFr) hash ^= AFr.GetHashCode();
      if (HasRf) hash ^= Rf.GetHashCode();
      if (HasARf) hash ^= ARf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFr) {
        output.WriteRawTag(8);
        output.WriteInt32(Fr);
      }
      if (HasAFr) {
        output.WriteRawTag(16);
        output.WriteInt32(AFr);
      }
      if (HasRf) {
        output.WriteRawTag(24);
        output.WriteInt32(Rf);
      }
      if (HasARf) {
        output.WriteRawTag(32);
        output.WriteInt32(ARf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFr) {
        output.WriteRawTag(8);
        output.WriteInt32(Fr);
      }
      if (HasAFr) {
        output.WriteRawTag(16);
        output.WriteInt32(AFr);
      }
      if (HasRf) {
        output.WriteRawTag(24);
        output.WriteInt32(Rf);
      }
      if (HasARf) {
        output.WriteRawTag(32);
        output.WriteInt32(ARf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fr);
      }
      if (HasAFr) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AFr);
      }
      if (HasRf) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rf);
      }
      if (HasARf) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ARf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CReportFriendsCount other) {
      if (other == null) {
        return;
      }
      if (other.HasFr) {
        Fr = other.Fr;
      }
      if (other.HasAFr) {
        AFr = other.AFr;
      }
      if (other.HasRf) {
        Rf = other.Rf;
      }
      if (other.HasARf) {
        ARf = other.ARf;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fr = input.ReadInt32();
            break;
          }
          case 16: {
            AFr = input.ReadInt32();
            break;
          }
          case 24: {
            Rf = input.ReadInt32();
            break;
          }
          case 32: {
            ARf = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Fr = input.ReadInt32();
            break;
          }
          case 16: {
            AFr = input.ReadInt32();
            break;
          }
          case 24: {
            Rf = input.ReadInt32();
            break;
          }
          case 32: {
            ARf = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChangeItemColor : pb::IMessage<CChangeItemColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChangeItemColor> _parser = new pb::MessageParser<CChangeItemColor>(() => new CChangeItemColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChangeItemColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[218]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeItemColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeItemColor(CChangeItemColor other) : this() {
      storeItem_ = other.storeItem_.Clone();
      invenItem_ = other.invenItem_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeItemColor Clone() {
      return new CChangeItemColor(this);
    }

    /// <summary>Field number for the "storeItem" field.</summary>
    public const int StoreItemFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_storeItem_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> storeItem_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StoreItem {
      get { return storeItem_; }
    }

    /// <summary>Field number for the "invenItem" field.</summary>
    public const int InvenItemFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_invenItem_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> invenItem_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InvenItem {
      get { return invenItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChangeItemColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChangeItemColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!storeItem_.Equals(other.storeItem_)) return false;
      if(!invenItem_.Equals(other.invenItem_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= storeItem_.GetHashCode();
      hash ^= invenItem_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      storeItem_.WriteTo(output, _repeated_storeItem_codec);
      invenItem_.WriteTo(output, _repeated_invenItem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      storeItem_.WriteTo(ref output, _repeated_storeItem_codec);
      invenItem_.WriteTo(ref output, _repeated_invenItem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += storeItem_.CalculateSize(_repeated_storeItem_codec);
      size += invenItem_.CalculateSize(_repeated_invenItem_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChangeItemColor other) {
      if (other == null) {
        return;
      }
      storeItem_.Add(other.storeItem_);
      invenItem_.Add(other.invenItem_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            storeItem_.AddEntriesFrom(input, _repeated_storeItem_codec);
            break;
          }
          case 18: {
            invenItem_.AddEntriesFrom(input, _repeated_invenItem_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            storeItem_.AddEntriesFrom(ref input, _repeated_storeItem_codec);
            break;
          }
          case 18: {
            invenItem_.AddEntriesFrom(ref input, _repeated_invenItem_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDevCommand : pb::IMessage<CDevCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDevCommand> _parser = new pb::MessageParser<CDevCommand>(() => new CDevCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDevCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[219]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDevCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDevCommand(CDevCommand other) : this() {
      cmd_ = other.cmd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDevCommand Clone() {
      return new CDevCommand(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private readonly static string CmdDefaultValue = "";

    private string cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_ ?? CmdDefaultValue; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cmd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCmd {
      get { return cmd_ != null; }
    }
    /// <summary>Clears the value of the "cmd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCmd() {
      cmd_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDevCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDevCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCmd) hash ^= Cmd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCmd) {
        output.WriteRawTag(10);
        output.WriteString(Cmd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCmd) {
        output.WriteRawTag(10);
        output.WriteString(Cmd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCmd) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDevCommand other) {
      if (other == null) {
        return;
      }
      if (other.HasCmd) {
        Cmd = other.Cmd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cmd = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Cmd = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SPopupMessage : pb::IMessage<SPopupMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SPopupMessage> _parser = new pb::MessageParser<SPopupMessage>(() => new SPopupMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SPopupMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[220]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPopupMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPopupMessage(SPopupMessage other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPopupMessage Clone() {
      return new SPopupMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SPopupMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SPopupMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMessage) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SPopupMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUpdateSleepSettings : pb::IMessage<CUpdateSleepSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUpdateSleepSettings> _parser = new pb::MessageParser<CUpdateSleepSettings>(() => new CUpdateSleepSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUpdateSleepSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[221]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUpdateSleepSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUpdateSleepSettings(CUpdateSleepSettings other) : this() {
      sleepSettings_ = other.sleepSettings_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUpdateSleepSettings Clone() {
      return new CUpdateSleepSettings(this);
    }

    /// <summary>Field number for the "sleepSettings" field.</summary>
    public const int SleepSettingsFieldNumber = 1;
    private readonly static string SleepSettingsDefaultValue = "";

    private string sleepSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SleepSettings {
      get { return sleepSettings_ ?? SleepSettingsDefaultValue; }
      set {
        sleepSettings_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sleepSettings" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSleepSettings {
      get { return sleepSettings_ != null; }
    }
    /// <summary>Clears the value of the "sleepSettings" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSleepSettings() {
      sleepSettings_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUpdateSleepSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUpdateSleepSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SleepSettings != other.SleepSettings) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSleepSettings) hash ^= SleepSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSleepSettings) {
        output.WriteRawTag(10);
        output.WriteString(SleepSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSleepSettings) {
        output.WriteRawTag(10);
        output.WriteString(SleepSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSleepSettings) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SleepSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUpdateSleepSettings other) {
      if (other == null) {
        return;
      }
      if (other.HasSleepSettings) {
        SleepSettings = other.SleepSettings;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SleepSettings = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SleepSettings = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class COpenSpecialBox : pb::IMessage<COpenSpecialBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<COpenSpecialBox> _parser = new pb::MessageParser<COpenSpecialBox>(() => new COpenSpecialBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<COpenSpecialBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[222]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenSpecialBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenSpecialBox(COpenSpecialBox other) : this() {
      boxId_ = other.boxId_;
      itemId_ = other.itemId_;
      expire_ = other.expire_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenSpecialBox Clone() {
      return new COpenSpecialBox(this);
    }

    /// <summary>Field number for the "boxId" field.</summary>
    public const int BoxIdFieldNumber = 1;
    private readonly static string BoxIdDefaultValue = "";

    private string boxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxId {
      get { return boxId_ ?? BoxIdDefaultValue; }
      set {
        boxId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "boxId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBoxId {
      get { return boxId_ != null; }
    }
    /// <summary>Clears the value of the "boxId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBoxId() {
      boxId_ = null;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    /// <summary>Field number for the "expire" field.</summary>
    public const int ExpireFieldNumber = 3;
    private readonly static string ExpireDefaultValue = "";

    private string expire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Expire {
      get { return expire_ ?? ExpireDefaultValue; }
      set {
        expire_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expire" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpire {
      get { return expire_ != null; }
    }
    /// <summary>Clears the value of the "expire" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpire() {
      expire_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as COpenSpecialBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(COpenSpecialBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoxId != other.BoxId) return false;
      if (ItemId != other.ItemId) return false;
      if (Expire != other.Expire) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBoxId) hash ^= BoxId.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (HasExpire) hash ^= Expire.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBoxId) {
        output.WriteRawTag(10);
        output.WriteString(BoxId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (HasExpire) {
        output.WriteRawTag(26);
        output.WriteString(Expire);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBoxId) {
        output.WriteRawTag(10);
        output.WriteString(BoxId);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (HasExpire) {
        output.WriteRawTag(26);
        output.WriteString(Expire);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBoxId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoxId);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (HasExpire) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expire);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(COpenSpecialBox other) {
      if (other == null) {
        return;
      }
      if (other.HasBoxId) {
        BoxId = other.BoxId;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasExpire) {
        Expire = other.Expire;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BoxId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 26: {
            Expire = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BoxId = input.ReadString();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 26: {
            Expire = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChangeCafeTitle : pb::IMessage<CChangeCafeTitle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChangeCafeTitle> _parser = new pb::MessageParser<CChangeCafeTitle>(() => new CChangeCafeTitle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChangeCafeTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[223]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeCafeTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeCafeTitle(CChangeCafeTitle other) : this() {
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeCafeTitle Clone() {
      return new CChangeCafeTitle(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChangeCafeTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChangeCafeTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTitle) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChangeCafeTitle other) {
      if (other == null) {
        return;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChangeFirstVisitStore : pb::IMessage<CChangeFirstVisitStore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChangeFirstVisitStore> _parser = new pb::MessageParser<CChangeFirstVisitStore>(() => new CChangeFirstVisitStore());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChangeFirstVisitStore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[224]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeFirstVisitStore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeFirstVisitStore(CChangeFirstVisitStore other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChangeFirstVisitStore Clone() {
      return new CChangeFirstVisitStore(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChangeFirstVisitStore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChangeFirstVisitStore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChangeFirstVisitStore other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CHarvestAllWorkObj : pb::IMessage<CHarvestAllWorkObj>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CHarvestAllWorkObj> _parser = new pb::MessageParser<CHarvestAllWorkObj>(() => new CHarvestAllWorkObj());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CHarvestAllWorkObj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[225]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHarvestAllWorkObj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHarvestAllWorkObj(CHarvestAllWorkObj other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      workFloor_ = other.workFloor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHarvestAllWorkObj Clone() {
      return new CHarvestAllWorkObj(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "workFloor" field.</summary>
    public const int WorkFloorFieldNumber = 2;
    private readonly static int WorkFloorDefaultValue = 0;

    private int workFloor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkFloor {
      get { if ((_hasBits0 & 2) != 0) { return workFloor_; } else { return WorkFloorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        workFloor_ = value;
      }
    }
    /// <summary>Gets whether the "workFloor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWorkFloor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "workFloor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWorkFloor() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CHarvestAllWorkObj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CHarvestAllWorkObj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (WorkFloor != other.WorkFloor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasWorkFloor) hash ^= WorkFloor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasWorkFloor) {
        output.WriteRawTag(16);
        output.WriteInt32(WorkFloor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasWorkFloor) {
        output.WriteRawTag(16);
        output.WriteInt32(WorkFloor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasWorkFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkFloor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CHarvestAllWorkObj other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasWorkFloor) {
        WorkFloor = other.WorkFloor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            WorkFloor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            WorkFloor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CInvenObjChangeColor : pb::IMessage<CInvenObjChangeColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CInvenObjChangeColor> _parser = new pb::MessageParser<CInvenObjChangeColor>(() => new CInvenObjChangeColor());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CInvenObjChangeColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[226]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInvenObjChangeColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInvenObjChangeColor(CInvenObjChangeColor other) : this() {
      _hasBits0 = other._hasBits0;
      destItemId_ = other.destItemId_;
      newItemId_ = other.newItemId_;
      useCoupon_ = other.useCoupon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CInvenObjChangeColor Clone() {
      return new CInvenObjChangeColor(this);
    }

    /// <summary>Field number for the "destItemId" field.</summary>
    public const int DestItemIdFieldNumber = 1;
    private readonly static string DestItemIdDefaultValue = "";

    private string destItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestItemId {
      get { return destItemId_ ?? DestItemIdDefaultValue; }
      set {
        destItemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "destItemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestItemId {
      get { return destItemId_ != null; }
    }
    /// <summary>Clears the value of the "destItemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestItemId() {
      destItemId_ = null;
    }

    /// <summary>Field number for the "newItemId" field.</summary>
    public const int NewItemIdFieldNumber = 2;
    private readonly static string NewItemIdDefaultValue = "";

    private string newItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewItemId {
      get { return newItemId_ ?? NewItemIdDefaultValue; }
      set {
        newItemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "newItemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewItemId {
      get { return newItemId_ != null; }
    }
    /// <summary>Clears the value of the "newItemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNewItemId() {
      newItemId_ = null;
    }

    /// <summary>Field number for the "useCoupon" field.</summary>
    public const int UseCouponFieldNumber = 3;
    private readonly static bool UseCouponDefaultValue = false;

    private bool useCoupon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCoupon {
      get { if ((_hasBits0 & 1) != 0) { return useCoupon_; } else { return UseCouponDefaultValue; } }
      set {
        _hasBits0 |= 1;
        useCoupon_ = value;
      }
    }
    /// <summary>Gets whether the "useCoupon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseCoupon {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "useCoupon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseCoupon() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CInvenObjChangeColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CInvenObjChangeColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestItemId != other.DestItemId) return false;
      if (NewItemId != other.NewItemId) return false;
      if (UseCoupon != other.UseCoupon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDestItemId) hash ^= DestItemId.GetHashCode();
      if (HasNewItemId) hash ^= NewItemId.GetHashCode();
      if (HasUseCoupon) hash ^= UseCoupon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDestItemId) {
        output.WriteRawTag(10);
        output.WriteString(DestItemId);
      }
      if (HasNewItemId) {
        output.WriteRawTag(18);
        output.WriteString(NewItemId);
      }
      if (HasUseCoupon) {
        output.WriteRawTag(24);
        output.WriteBool(UseCoupon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDestItemId) {
        output.WriteRawTag(10);
        output.WriteString(DestItemId);
      }
      if (HasNewItemId) {
        output.WriteRawTag(18);
        output.WriteString(NewItemId);
      }
      if (HasUseCoupon) {
        output.WriteRawTag(24);
        output.WriteBool(UseCoupon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDestItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestItemId);
      }
      if (HasNewItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewItemId);
      }
      if (HasUseCoupon) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CInvenObjChangeColor other) {
      if (other == null) {
        return;
      }
      if (other.HasDestItemId) {
        DestItemId = other.DestItemId;
      }
      if (other.HasNewItemId) {
        NewItemId = other.NewItemId;
      }
      if (other.HasUseCoupon) {
        UseCoupon = other.UseCoupon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DestItemId = input.ReadString();
            break;
          }
          case 18: {
            NewItemId = input.ReadString();
            break;
          }
          case 24: {
            UseCoupon = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DestItemId = input.ReadString();
            break;
          }
          case 18: {
            NewItemId = input.ReadString();
            break;
          }
          case 24: {
            UseCoupon = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjChangeColor : pb::IMessage<CObjChangeColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjChangeColor> _parser = new pb::MessageParser<CObjChangeColor>(() => new CObjChangeColor());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjChangeColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[227]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjChangeColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjChangeColor(CObjChangeColor other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      destItemId_ = other.destItemId_;
      x_ = other.x_;
      y_ = other.y_;
      floor_ = other.floor_;
      flip_ = other.flip_;
      storeKey_ = other.storeKey_;
      useCoupon_ = other.useCoupon_;
      invalidDeco_ = other.invalidDeco_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjChangeColor Clone() {
      return new CObjChangeColor(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "destItemId" field.</summary>
    public const int DestItemIdFieldNumber = 2;
    private readonly static string DestItemIdDefaultValue = "";

    private string destItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestItemId {
      get { return destItemId_ ?? DestItemIdDefaultValue; }
      set {
        destItemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "destItemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestItemId {
      get { return destItemId_ != null; }
    }
    /// <summary>Clears the value of the "destItemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestItemId() {
      destItemId_ = null;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private readonly static int XDefaultValue = 0;

    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 2) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 2;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private readonly static int YDefaultValue = 0;

    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 4) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 4;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 5;
    private readonly static int FloorDefaultValue = 0;

    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { if ((_hasBits0 & 8) != 0) { return floor_; } else { return FloorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        floor_ = value;
      }
    }
    /// <summary>Gets whether the "floor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloor {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "floor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloor() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "flip" field.</summary>
    public const int FlipFieldNumber = 6;
    private readonly static int FlipDefaultValue = 0;

    private int flip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flip {
      get { if ((_hasBits0 & 16) != 0) { return flip_; } else { return FlipDefaultValue; } }
      set {
        _hasBits0 |= 16;
        flip_ = value;
      }
    }
    /// <summary>Gets whether the "flip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlip {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "flip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlip() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 7;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 32) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "useCoupon" field.</summary>
    public const int UseCouponFieldNumber = 8;
    private readonly static string UseCouponDefaultValue = "";

    private string useCoupon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UseCoupon {
      get { return useCoupon_ ?? UseCouponDefaultValue; }
      set {
        useCoupon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "useCoupon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseCoupon {
      get { return useCoupon_ != null; }
    }
    /// <summary>Clears the value of the "useCoupon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseCoupon() {
      useCoupon_ = null;
    }

    /// <summary>Field number for the "invalidDeco" field.</summary>
    public const int InvalidDecoFieldNumber = 9;
    private readonly static int InvalidDecoDefaultValue = 0;

    private int invalidDeco_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidDeco {
      get { if ((_hasBits0 & 64) != 0) { return invalidDeco_; } else { return InvalidDecoDefaultValue; } }
      set {
        _hasBits0 |= 64;
        invalidDeco_ = value;
      }
    }
    /// <summary>Gets whether the "invalidDeco" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidDeco {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "invalidDeco" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidDeco() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjChangeColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjChangeColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (DestItemId != other.DestItemId) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Floor != other.Floor) return false;
      if (Flip != other.Flip) return false;
      if (StoreKey != other.StoreKey) return false;
      if (UseCoupon != other.UseCoupon) return false;
      if (InvalidDeco != other.InvalidDeco) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasDestItemId) hash ^= DestItemId.GetHashCode();
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasFloor) hash ^= Floor.GetHashCode();
      if (HasFlip) hash ^= Flip.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasUseCoupon) hash ^= UseCoupon.GetHashCode();
      if (HasInvalidDeco) hash ^= InvalidDeco.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDestItemId) {
        output.WriteRawTag(18);
        output.WriteString(DestItemId);
      }
      if (HasX) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(40);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(48);
        output.WriteInt32(Flip);
      }
      if (HasStoreKey) {
        output.WriteRawTag(56);
        output.WriteInt32(StoreKey);
      }
      if (HasUseCoupon) {
        output.WriteRawTag(66);
        output.WriteString(UseCoupon);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(72);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDestItemId) {
        output.WriteRawTag(18);
        output.WriteString(DestItemId);
      }
      if (HasX) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (HasY) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (HasFloor) {
        output.WriteRawTag(40);
        output.WriteInt32(Floor);
      }
      if (HasFlip) {
        output.WriteRawTag(48);
        output.WriteInt32(Flip);
      }
      if (HasStoreKey) {
        output.WriteRawTag(56);
        output.WriteInt32(StoreKey);
      }
      if (HasUseCoupon) {
        output.WriteRawTag(66);
        output.WriteString(UseCoupon);
      }
      if (HasInvalidDeco) {
        output.WriteRawTag(72);
        output.WriteInt32(InvalidDeco);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasDestItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestItemId);
      }
      if (HasX) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (HasY) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (HasFloor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (HasFlip) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flip);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasUseCoupon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UseCoupon);
      }
      if (HasInvalidDeco) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidDeco);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjChangeColor other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasDestItemId) {
        DestItemId = other.DestItemId;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasFloor) {
        Floor = other.Floor;
      }
      if (other.HasFlip) {
        Flip = other.Flip;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasUseCoupon) {
        UseCoupon = other.UseCoupon;
      }
      if (other.HasInvalidDeco) {
        InvalidDeco = other.InvalidDeco;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DestItemId = input.ReadString();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Floor = input.ReadInt32();
            break;
          }
          case 48: {
            Flip = input.ReadInt32();
            break;
          }
          case 56: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 66: {
            UseCoupon = input.ReadString();
            break;
          }
          case 72: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DestItemId = input.ReadString();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Floor = input.ReadInt32();
            break;
          }
          case 48: {
            Flip = input.ReadInt32();
            break;
          }
          case 56: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 66: {
            UseCoupon = input.ReadString();
            break;
          }
          case 72: {
            InvalidDeco = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCarChangeColor : pb::IMessage<CCarChangeColor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCarChangeColor> _parser = new pb::MessageParser<CCarChangeColor>(() => new CCarChangeColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCarChangeColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[228]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCarChangeColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCarChangeColor(CCarChangeColor other) : this() {
      carId_ = other.carId_;
      useCoupon_ = other.useCoupon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCarChangeColor Clone() {
      return new CCarChangeColor(this);
    }

    /// <summary>Field number for the "carId" field.</summary>
    public const int CarIdFieldNumber = 1;
    private readonly static string CarIdDefaultValue = "";

    private string carId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarId {
      get { return carId_ ?? CarIdDefaultValue; }
      set {
        carId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "carId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCarId {
      get { return carId_ != null; }
    }
    /// <summary>Clears the value of the "carId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCarId() {
      carId_ = null;
    }

    /// <summary>Field number for the "useCoupon" field.</summary>
    public const int UseCouponFieldNumber = 2;
    private readonly static string UseCouponDefaultValue = "";

    private string useCoupon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UseCoupon {
      get { return useCoupon_ ?? UseCouponDefaultValue; }
      set {
        useCoupon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "useCoupon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseCoupon {
      get { return useCoupon_ != null; }
    }
    /// <summary>Clears the value of the "useCoupon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseCoupon() {
      useCoupon_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCarChangeColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCarChangeColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarId != other.CarId) return false;
      if (UseCoupon != other.UseCoupon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCarId) hash ^= CarId.GetHashCode();
      if (HasUseCoupon) hash ^= UseCoupon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCarId) {
        output.WriteRawTag(10);
        output.WriteString(CarId);
      }
      if (HasUseCoupon) {
        output.WriteRawTag(18);
        output.WriteString(UseCoupon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCarId) {
        output.WriteRawTag(10);
        output.WriteString(CarId);
      }
      if (HasUseCoupon) {
        output.WriteRawTag(18);
        output.WriteString(UseCoupon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCarId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarId);
      }
      if (HasUseCoupon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UseCoupon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCarChangeColor other) {
      if (other == null) {
        return;
      }
      if (other.HasCarId) {
        CarId = other.CarId;
      }
      if (other.HasUseCoupon) {
        UseCoupon = other.UseCoupon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CarId = input.ReadString();
            break;
          }
          case 18: {
            UseCoupon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CarId = input.ReadString();
            break;
          }
          case 18: {
            UseCoupon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjExtensionPeriod : pb::IMessage<CObjExtensionPeriod>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjExtensionPeriod> _parser = new pb::MessageParser<CObjExtensionPeriod>(() => new CObjExtensionPeriod());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjExtensionPeriod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[229]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjExtensionPeriod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjExtensionPeriod(CObjExtensionPeriod other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjExtensionPeriod Clone() {
      return new CObjExtensionPeriod(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjExtensionPeriod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjExtensionPeriod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjExtensionPeriod other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMixItem : pb::IMessage<CMixItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMixItem> _parser = new pb::MessageParser<CMixItem>(() => new CMixItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMixItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[230]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItem(CMixItem other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      invenElems_ = other.invenElems_.Clone();
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItem Clone() {
      return new CMixItem(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "invenElems" field.</summary>
    public const int InvenElemsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_invenElems_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> invenElems_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InvenElems {
      get { return invenElems_; }
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMixItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMixItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if(!invenElems_.Equals(other.invenElems_)) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      hash ^= invenElems_.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      invenElems_.WriteTo(output, _repeated_invenElems_codec);
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      invenElems_.WriteTo(ref output, _repeated_invenElems_codec);
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      size += invenElems_.CalculateSize(_repeated_invenElems_codec);
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMixItem other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      invenElems_.Add(other.invenElems_);
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            invenElems_.AddEntriesFrom(input, _repeated_invenElems_codec);
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            invenElems_.AddEntriesFrom(ref input, _repeated_invenElems_codec);
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMixItemFin : pb::IMessage<CMixItemFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMixItemFin> _parser = new pb::MessageParser<CMixItemFin>(() => new CMixItemFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMixItemFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[231]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItemFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItemFin(CMixItemFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItemFin Clone() {
      return new CMixItemFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMixItemFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMixItemFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMixItemFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMixItemShorten : pb::IMessage<CMixItemShorten>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMixItemShorten> _parser = new pb::MessageParser<CMixItemShorten>(() => new CMixItemShorten());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMixItemShorten> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[232]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItemShorten() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItemShorten(CMixItemShorten other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMixItemShorten Clone() {
      return new CMixItemShorten(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMixItemShorten);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMixItemShorten other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMixItemShorten other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CIsItemMixerWorking : pb::IMessage<CIsItemMixerWorking>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CIsItemMixerWorking> _parser = new pb::MessageParser<CIsItemMixerWorking>(() => new CIsItemMixerWorking());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIsItemMixerWorking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[233]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIsItemMixerWorking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIsItemMixerWorking(CIsItemMixerWorking other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIsItemMixerWorking Clone() {
      return new CIsItemMixerWorking(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIsItemMixerWorking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIsItemMixerWorking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIsItemMixerWorking other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CIncBeanLevel : pb::IMessage<CIncBeanLevel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CIncBeanLevel> _parser = new pb::MessageParser<CIncBeanLevel>(() => new CIncBeanLevel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CIncBeanLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[234]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncBeanLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncBeanLevel(CIncBeanLevel other) : this() {
      _hasBits0 = other._hasBits0;
      beanId_ = other.beanId_;
      cash_ = other.cash_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CIncBeanLevel Clone() {
      return new CIncBeanLevel(this);
    }

    /// <summary>Field number for the "beanId" field.</summary>
    public const int BeanIdFieldNumber = 1;
    private readonly static string BeanIdDefaultValue = "";

    private string beanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeanId {
      get { return beanId_ ?? BeanIdDefaultValue; }
      set {
        beanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "beanId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBeanId {
      get { return beanId_ != null; }
    }
    /// <summary>Clears the value of the "beanId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBeanId() {
      beanId_ = null;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 3;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CIncBeanLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CIncBeanLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeanId != other.BeanId) return false;
      if (Cash != other.Cash) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBeanId) hash ^= BeanId.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBeanId) {
        output.WriteRawTag(10);
        output.WriteString(BeanId);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasItemId) {
        output.WriteRawTag(26);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBeanId) {
        output.WriteRawTag(10);
        output.WriteString(BeanId);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasItemId) {
        output.WriteRawTag(26);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBeanId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeanId);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CIncBeanLevel other) {
      if (other == null) {
        return;
      }
      if (other.HasBeanId) {
        BeanId = other.BeanId;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BeanId = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 26: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BeanId = input.ReadString();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 26: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CObjBuyTwoPlusOne : pb::IMessage<CObjBuyTwoPlusOne>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CObjBuyTwoPlusOne> _parser = new pb::MessageParser<CObjBuyTwoPlusOne>(() => new CObjBuyTwoPlusOne());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CObjBuyTwoPlusOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[235]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjBuyTwoPlusOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjBuyTwoPlusOne(CObjBuyTwoPlusOne other) : this() {
      kind_ = other.kind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CObjBuyTwoPlusOne Clone() {
      return new CObjBuyTwoPlusOne(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static string KindDefaultValue = "";

    private string kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_ ?? KindDefaultValue; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return kind_ != null; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CObjBuyTwoPlusOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CObjBuyTwoPlusOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CObjBuyTwoPlusOne other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpandSecondFloor : pb::IMessage<CExpandSecondFloor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpandSecondFloor> _parser = new pb::MessageParser<CExpandSecondFloor>(() => new CExpandSecondFloor());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpandSecondFloor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[236]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandSecondFloor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandSecondFloor(CExpandSecondFloor other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      expandId_ = other.expandId_;
      useCash_ = other.useCash_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandSecondFloor Clone() {
      return new CExpandSecondFloor(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expandId" field.</summary>
    public const int ExpandIdFieldNumber = 2;
    private readonly static string ExpandIdDefaultValue = "";

    private string expandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandId {
      get { return expandId_ ?? ExpandIdDefaultValue; }
      set {
        expandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expandId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpandId {
      get { return expandId_ != null; }
    }
    /// <summary>Clears the value of the "expandId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpandId() {
      expandId_ = null;
    }

    /// <summary>Field number for the "useCash" field.</summary>
    public const int UseCashFieldNumber = 3;
    private readonly static bool UseCashDefaultValue = false;

    private bool useCash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCash {
      get { if ((_hasBits0 & 2) != 0) { return useCash_; } else { return UseCashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        useCash_ = value;
      }
    }
    /// <summary>Gets whether the "useCash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "useCash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 4) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpandSecondFloor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpandSecondFloor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (ExpandId != other.ExpandId) return false;
      if (UseCash != other.UseCash) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasExpandId) hash ^= ExpandId.GetHashCode();
      if (HasUseCash) hash ^= UseCash.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasExpandId) {
        output.WriteRawTag(18);
        output.WriteString(ExpandId);
      }
      if (HasUseCash) {
        output.WriteRawTag(24);
        output.WriteBool(UseCash);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasExpandId) {
        output.WriteRawTag(18);
        output.WriteString(ExpandId);
      }
      if (HasUseCash) {
        output.WriteRawTag(24);
        output.WriteBool(UseCash);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasExpandId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandId);
      }
      if (HasUseCash) {
        size += 1 + 1;
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpandSecondFloor other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasExpandId) {
        ExpandId = other.ExpandId;
      }
      if (other.HasUseCash) {
        UseCash = other.UseCash;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            ExpandId = input.ReadString();
            break;
          }
          case 24: {
            UseCash = input.ReadBool();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            ExpandId = input.ReadString();
            break;
          }
          case 24: {
            UseCash = input.ReadBool();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpandThirdStore : pb::IMessage<CExpandThirdStore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpandThirdStore> _parser = new pb::MessageParser<CExpandThirdStore>(() => new CExpandThirdStore());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpandThirdStore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[237]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStore(CExpandThirdStore other) : this() {
      _hasBits0 = other._hasBits0;
      useCash_ = other.useCash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStore Clone() {
      return new CExpandThirdStore(this);
    }

    /// <summary>Field number for the "useCash" field.</summary>
    public const int UseCashFieldNumber = 1;
    private readonly static bool UseCashDefaultValue = false;

    private bool useCash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCash {
      get { if ((_hasBits0 & 1) != 0) { return useCash_; } else { return UseCashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        useCash_ = value;
      }
    }
    /// <summary>Gets whether the "useCash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "useCash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseCash() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpandThirdStore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpandThirdStore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseCash != other.UseCash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUseCash) hash ^= UseCash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUseCash) {
        output.WriteRawTag(8);
        output.WriteBool(UseCash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUseCash) {
        output.WriteRawTag(8);
        output.WriteBool(UseCash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUseCash) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpandThirdStore other) {
      if (other == null) {
        return;
      }
      if (other.HasUseCash) {
        UseCash = other.UseCash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseCash = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UseCash = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpandThirdStoreInstant : pb::IMessage<CExpandThirdStoreInstant>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpandThirdStoreInstant> _parser = new pb::MessageParser<CExpandThirdStoreInstant>(() => new CExpandThirdStoreInstant());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpandThirdStoreInstant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[238]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStoreInstant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStoreInstant(CExpandThirdStoreInstant other) : this() {
      _hasBits0 = other._hasBits0;
      cash_ = other.cash_;
      leftSec_ = other.leftSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStoreInstant Clone() {
      return new CExpandThirdStoreInstant(this);
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 1;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leftSec" field.</summary>
    public const int LeftSecFieldNumber = 2;
    private readonly static int LeftSecDefaultValue = 0;

    private int leftSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSec {
      get { if ((_hasBits0 & 2) != 0) { return leftSec_; } else { return LeftSecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leftSec_ = value;
      }
    }
    /// <summary>Gets whether the "leftSec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftSec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leftSec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftSec() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpandThirdStoreInstant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpandThirdStoreInstant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cash != other.Cash) return false;
      if (LeftSec != other.LeftSec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasLeftSec) hash ^= LeftSec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCash) {
        output.WriteRawTag(8);
        output.WriteInt32(Cash);
      }
      if (HasLeftSec) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCash) {
        output.WriteRawTag(8);
        output.WriteInt32(Cash);
      }
      if (HasLeftSec) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasLeftSec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpandThirdStoreInstant other) {
      if (other == null) {
        return;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasLeftSec) {
        LeftSec = other.LeftSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cash = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSec = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cash = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSec = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpandThirdStoreComplete : pb::IMessage<CExpandThirdStoreComplete>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpandThirdStoreComplete> _parser = new pb::MessageParser<CExpandThirdStoreComplete>(() => new CExpandThirdStoreComplete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpandThirdStoreComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[239]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStoreComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStoreComplete(CExpandThirdStoreComplete other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandThirdStoreComplete Clone() {
      return new CExpandThirdStoreComplete(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpandThirdStoreComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpandThirdStoreComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpandThirdStoreComplete other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CRestartThirdStore : pb::IMessage<CRestartThirdStore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRestartThirdStore> _parser = new pb::MessageParser<CRestartThirdStore>(() => new CRestartThirdStore());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRestartThirdStore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[240]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRestartThirdStore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRestartThirdStore(CRestartThirdStore other) : this() {
      _hasBits0 = other._hasBits0;
      casher_ = other.casher_;
      pickup_ = other.pickup_;
      recycle_ = other.recycle_;
      necessaryShop1_ = other.necessaryShop1_;
      necessaryShop2_ = other.necessaryShop2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRestartThirdStore Clone() {
      return new CRestartThirdStore(this);
    }

    /// <summary>Field number for the "casher" field.</summary>
    public const int CasherFieldNumber = 1;
    private readonly static string CasherDefaultValue = "";

    private string casher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Casher {
      get { return casher_ ?? CasherDefaultValue; }
      set {
        casher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "casher" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCasher {
      get { return casher_ != null; }
    }
    /// <summary>Clears the value of the "casher" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCasher() {
      casher_ = null;
    }

    /// <summary>Field number for the "pickup" field.</summary>
    public const int PickupFieldNumber = 2;
    private readonly static string PickupDefaultValue = "";

    private string pickup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pickup {
      get { return pickup_ ?? PickupDefaultValue; }
      set {
        pickup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pickup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPickup {
      get { return pickup_ != null; }
    }
    /// <summary>Clears the value of the "pickup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPickup() {
      pickup_ = null;
    }

    /// <summary>Field number for the "recycle" field.</summary>
    public const int RecycleFieldNumber = 3;
    private readonly static string RecycleDefaultValue = "";

    private string recycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recycle {
      get { return recycle_ ?? RecycleDefaultValue; }
      set {
        recycle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "recycle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecycle {
      get { return recycle_ != null; }
    }
    /// <summary>Clears the value of the "recycle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecycle() {
      recycle_ = null;
    }

    /// <summary>Field number for the "necessaryShop1" field.</summary>
    public const int NecessaryShop1FieldNumber = 4;
    private readonly static int NecessaryShop1DefaultValue = 0;

    private int necessaryShop1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NecessaryShop1 {
      get { if ((_hasBits0 & 1) != 0) { return necessaryShop1_; } else { return NecessaryShop1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        necessaryShop1_ = value;
      }
    }
    /// <summary>Gets whether the "necessaryShop1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNecessaryShop1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "necessaryShop1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNecessaryShop1() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "necessaryShop2" field.</summary>
    public const int NecessaryShop2FieldNumber = 5;
    private readonly static int NecessaryShop2DefaultValue = 0;

    private int necessaryShop2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NecessaryShop2 {
      get { if ((_hasBits0 & 2) != 0) { return necessaryShop2_; } else { return NecessaryShop2DefaultValue; } }
      set {
        _hasBits0 |= 2;
        necessaryShop2_ = value;
      }
    }
    /// <summary>Gets whether the "necessaryShop2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNecessaryShop2 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "necessaryShop2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNecessaryShop2() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRestartThirdStore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRestartThirdStore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Casher != other.Casher) return false;
      if (Pickup != other.Pickup) return false;
      if (Recycle != other.Recycle) return false;
      if (NecessaryShop1 != other.NecessaryShop1) return false;
      if (NecessaryShop2 != other.NecessaryShop2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCasher) hash ^= Casher.GetHashCode();
      if (HasPickup) hash ^= Pickup.GetHashCode();
      if (HasRecycle) hash ^= Recycle.GetHashCode();
      if (HasNecessaryShop1) hash ^= NecessaryShop1.GetHashCode();
      if (HasNecessaryShop2) hash ^= NecessaryShop2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCasher) {
        output.WriteRawTag(10);
        output.WriteString(Casher);
      }
      if (HasPickup) {
        output.WriteRawTag(18);
        output.WriteString(Pickup);
      }
      if (HasRecycle) {
        output.WriteRawTag(26);
        output.WriteString(Recycle);
      }
      if (HasNecessaryShop1) {
        output.WriteRawTag(32);
        output.WriteInt32(NecessaryShop1);
      }
      if (HasNecessaryShop2) {
        output.WriteRawTag(40);
        output.WriteInt32(NecessaryShop2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCasher) {
        output.WriteRawTag(10);
        output.WriteString(Casher);
      }
      if (HasPickup) {
        output.WriteRawTag(18);
        output.WriteString(Pickup);
      }
      if (HasRecycle) {
        output.WriteRawTag(26);
        output.WriteString(Recycle);
      }
      if (HasNecessaryShop1) {
        output.WriteRawTag(32);
        output.WriteInt32(NecessaryShop1);
      }
      if (HasNecessaryShop2) {
        output.WriteRawTag(40);
        output.WriteInt32(NecessaryShop2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCasher) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Casher);
      }
      if (HasPickup) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pickup);
      }
      if (HasRecycle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recycle);
      }
      if (HasNecessaryShop1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NecessaryShop1);
      }
      if (HasNecessaryShop2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NecessaryShop2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRestartThirdStore other) {
      if (other == null) {
        return;
      }
      if (other.HasCasher) {
        Casher = other.Casher;
      }
      if (other.HasPickup) {
        Pickup = other.Pickup;
      }
      if (other.HasRecycle) {
        Recycle = other.Recycle;
      }
      if (other.HasNecessaryShop1) {
        NecessaryShop1 = other.NecessaryShop1;
      }
      if (other.HasNecessaryShop2) {
        NecessaryShop2 = other.NecessaryShop2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Casher = input.ReadString();
            break;
          }
          case 18: {
            Pickup = input.ReadString();
            break;
          }
          case 26: {
            Recycle = input.ReadString();
            break;
          }
          case 32: {
            NecessaryShop1 = input.ReadInt32();
            break;
          }
          case 40: {
            NecessaryShop2 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Casher = input.ReadString();
            break;
          }
          case 18: {
            Pickup = input.ReadString();
            break;
          }
          case 26: {
            Recycle = input.ReadString();
            break;
          }
          case 32: {
            NecessaryShop1 = input.ReadInt32();
            break;
          }
          case 40: {
            NecessaryShop2 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRestartThirdStoreExpansion : pb::IMessage<CRestartThirdStoreExpansion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRestartThirdStoreExpansion> _parser = new pb::MessageParser<CRestartThirdStoreExpansion>(() => new CRestartThirdStoreExpansion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRestartThirdStoreExpansion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[241]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRestartThirdStoreExpansion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRestartThirdStoreExpansion(CRestartThirdStoreExpansion other) : this() {
      _hasBits0 = other._hasBits0;
      necessaryShop1_ = other.necessaryShop1_;
      necessaryShop2_ = other.necessaryShop2_;
      oid_ = other.oid_.Clone();
      recycle_ = other.recycle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRestartThirdStoreExpansion Clone() {
      return new CRestartThirdStoreExpansion(this);
    }

    /// <summary>Field number for the "necessaryShop1" field.</summary>
    public const int NecessaryShop1FieldNumber = 1;
    private readonly static int NecessaryShop1DefaultValue = 0;

    private int necessaryShop1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NecessaryShop1 {
      get { if ((_hasBits0 & 1) != 0) { return necessaryShop1_; } else { return NecessaryShop1DefaultValue; } }
      set {
        _hasBits0 |= 1;
        necessaryShop1_ = value;
      }
    }
    /// <summary>Gets whether the "necessaryShop1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNecessaryShop1 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "necessaryShop1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNecessaryShop1() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "necessaryShop2" field.</summary>
    public const int NecessaryShop2FieldNumber = 2;
    private readonly static int NecessaryShop2DefaultValue = 0;

    private int necessaryShop2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NecessaryShop2 {
      get { if ((_hasBits0 & 2) != 0) { return necessaryShop2_; } else { return NecessaryShop2DefaultValue; } }
      set {
        _hasBits0 |= 2;
        necessaryShop2_ = value;
      }
    }
    /// <summary>Gets whether the "necessaryShop2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNecessaryShop2 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "necessaryShop2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNecessaryShop2() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_oid_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> oid_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Oid {
      get { return oid_; }
    }

    /// <summary>Field number for the "recycle" field.</summary>
    public const int RecycleFieldNumber = 4;
    private readonly static string RecycleDefaultValue = "";

    private string recycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recycle {
      get { return recycle_ ?? RecycleDefaultValue; }
      set {
        recycle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "recycle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecycle {
      get { return recycle_ != null; }
    }
    /// <summary>Clears the value of the "recycle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecycle() {
      recycle_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRestartThirdStoreExpansion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRestartThirdStoreExpansion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NecessaryShop1 != other.NecessaryShop1) return false;
      if (NecessaryShop2 != other.NecessaryShop2) return false;
      if(!oid_.Equals(other.oid_)) return false;
      if (Recycle != other.Recycle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNecessaryShop1) hash ^= NecessaryShop1.GetHashCode();
      if (HasNecessaryShop2) hash ^= NecessaryShop2.GetHashCode();
      hash ^= oid_.GetHashCode();
      if (HasRecycle) hash ^= Recycle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNecessaryShop1) {
        output.WriteRawTag(8);
        output.WriteInt32(NecessaryShop1);
      }
      if (HasNecessaryShop2) {
        output.WriteRawTag(16);
        output.WriteInt32(NecessaryShop2);
      }
      oid_.WriteTo(output, _repeated_oid_codec);
      if (HasRecycle) {
        output.WriteRawTag(34);
        output.WriteString(Recycle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNecessaryShop1) {
        output.WriteRawTag(8);
        output.WriteInt32(NecessaryShop1);
      }
      if (HasNecessaryShop2) {
        output.WriteRawTag(16);
        output.WriteInt32(NecessaryShop2);
      }
      oid_.WriteTo(ref output, _repeated_oid_codec);
      if (HasRecycle) {
        output.WriteRawTag(34);
        output.WriteString(Recycle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNecessaryShop1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NecessaryShop1);
      }
      if (HasNecessaryShop2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NecessaryShop2);
      }
      size += oid_.CalculateSize(_repeated_oid_codec);
      if (HasRecycle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recycle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRestartThirdStoreExpansion other) {
      if (other == null) {
        return;
      }
      if (other.HasNecessaryShop1) {
        NecessaryShop1 = other.NecessaryShop1;
      }
      if (other.HasNecessaryShop2) {
        NecessaryShop2 = other.NecessaryShop2;
      }
      oid_.Add(other.oid_);
      if (other.HasRecycle) {
        Recycle = other.Recycle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NecessaryShop1 = input.ReadInt32();
            break;
          }
          case 16: {
            NecessaryShop2 = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            oid_.AddEntriesFrom(input, _repeated_oid_codec);
            break;
          }
          case 34: {
            Recycle = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NecessaryShop1 = input.ReadInt32();
            break;
          }
          case 16: {
            NecessaryShop2 = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            oid_.AddEntriesFrom(ref input, _repeated_oid_codec);
            break;
          }
          case 34: {
            Recycle = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CThirdStoreRecvExpandReward : pb::IMessage<CThirdStoreRecvExpandReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThirdStoreRecvExpandReward> _parser = new pb::MessageParser<CThirdStoreRecvExpandReward>(() => new CThirdStoreRecvExpandReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThirdStoreRecvExpandReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[242]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecvExpandReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecvExpandReward(CThirdStoreRecvExpandReward other) : this() {
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecvExpandReward Clone() {
      return new CThirdStoreRecvExpandReward(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThirdStoreRecvExpandReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThirdStoreRecvExpandReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemId) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemId) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThirdStoreRecvExpandReward other) {
      if (other == null) {
        return;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CThirdStoreRecalcExpandReward : pb::IMessage<CThirdStoreRecalcExpandReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThirdStoreRecalcExpandReward> _parser = new pb::MessageParser<CThirdStoreRecalcExpandReward>(() => new CThirdStoreRecalcExpandReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThirdStoreRecalcExpandReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[243]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecalcExpandReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecalcExpandReward(CThirdStoreRecalcExpandReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecalcExpandReward Clone() {
      return new CThirdStoreRecalcExpandReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThirdStoreRecalcExpandReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThirdStoreRecalcExpandReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThirdStoreRecalcExpandReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CThirdStoreRecvRareReward : pb::IMessage<CThirdStoreRecvRareReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThirdStoreRecvRareReward> _parser = new pb::MessageParser<CThirdStoreRecvRareReward>(() => new CThirdStoreRecvRareReward());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThirdStoreRecvRareReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[244]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecvRareReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecvRareReward(CThirdStoreRecvRareReward other) : this() {
      _hasBits0 = other._hasBits0;
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreRecvRareReward Clone() {
      return new CThirdStoreRecvRareReward(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    /// <summary>Field number for the "itemCount" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private readonly static int ItemCountDefaultValue = 0;

    private int itemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { if ((_hasBits0 & 1) != 0) { return itemCount_; } else { return ItemCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        itemCount_ = value;
      }
    }
    /// <summary>Gets whether the "itemCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "itemCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThirdStoreRecvRareReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThirdStoreRecvRareReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (HasItemCount) hash ^= ItemCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemId) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (HasItemCount) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemId) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (HasItemCount) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (HasItemCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThirdStoreRecvRareReward other) {
      if (other == null) {
        return;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasItemCount) {
        ItemCount = other.ItemCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGrantNewDailyQuest : pb::IMessage<CGrantNewDailyQuest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGrantNewDailyQuest> _parser = new pb::MessageParser<CGrantNewDailyQuest>(() => new CGrantNewDailyQuest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGrantNewDailyQuest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[245]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewDailyQuest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewDailyQuest(CGrantNewDailyQuest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewDailyQuest Clone() {
      return new CGrantNewDailyQuest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGrantNewDailyQuest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGrantNewDailyQuest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGrantNewDailyQuest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CDailyQuestProgress : pb::IMessage<CDailyQuestProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDailyQuestProgress> _parser = new pb::MessageParser<CDailyQuestProgress>(() => new CDailyQuestProgress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDailyQuestProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[246]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestProgress(CDailyQuestProgress other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      goal_ = other.goal_;
      state_ = other.state_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestProgress Clone() {
      return new CDailyQuestProgress(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 2;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 2) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private readonly static int StateDefaultValue = 0;

    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { if ((_hasBits0 & 4) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDailyQuestProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDailyQuestProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      if (State != other.State) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDailyQuestProgress other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDailyQuestFinish : pb::IMessage<CDailyQuestFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDailyQuestFinish> _parser = new pb::MessageParser<CDailyQuestFinish>(() => new CDailyQuestFinish());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDailyQuestFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[247]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestFinish(CDailyQuestFinish other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestFinish Clone() {
      return new CDailyQuestFinish(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDailyQuestFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDailyQuestFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDailyQuestFinish other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDailyQuestInstantCompletion : pb::IMessage<CDailyQuestInstantCompletion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDailyQuestInstantCompletion> _parser = new pb::MessageParser<CDailyQuestInstantCompletion>(() => new CDailyQuestInstantCompletion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDailyQuestInstantCompletion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[248]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestInstantCompletion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestInstantCompletion(CDailyQuestInstantCompletion other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      goal_ = other.goal_;
      cash_ = other.cash_;
      currentState_ = other.currentState_;
      isEventCashAmount_ = other.isEventCashAmount_;
      petOid_ = other.petOid_;
      petSkillId_ = other.petSkillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestInstantCompletion Clone() {
      return new CDailyQuestInstantCompletion(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 2;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 2) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 3;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "currentState" field.</summary>
    public const int CurrentStateFieldNumber = 4;
    private readonly static int CurrentStateDefaultValue = 0;

    private int currentState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentState {
      get { if ((_hasBits0 & 8) != 0) { return currentState_; } else { return CurrentStateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        currentState_ = value;
      }
    }
    /// <summary>Gets whether the "currentState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentState {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "currentState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentState() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "isEventCashAmount" field.</summary>
    public const int IsEventCashAmountFieldNumber = 5;
    private readonly static bool IsEventCashAmountDefaultValue = false;

    private bool isEventCashAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEventCashAmount {
      get { if ((_hasBits0 & 16) != 0) { return isEventCashAmount_; } else { return IsEventCashAmountDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isEventCashAmount_ = value;
      }
    }
    /// <summary>Gets whether the "isEventCashAmount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsEventCashAmount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "isEventCashAmount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsEventCashAmount() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "petOid" field.</summary>
    public const int PetOidFieldNumber = 8;
    private readonly static int PetOidDefaultValue = 0;

    private int petOid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PetOid {
      get { if ((_hasBits0 & 32) != 0) { return petOid_; } else { return PetOidDefaultValue; } }
      set {
        _hasBits0 |= 32;
        petOid_ = value;
      }
    }
    /// <summary>Gets whether the "petOid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPetOid {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "petOid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPetOid() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "petSkillId" field.</summary>
    public const int PetSkillIdFieldNumber = 9;
    private readonly static string PetSkillIdDefaultValue = "";

    private string petSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PetSkillId {
      get { return petSkillId_ ?? PetSkillIdDefaultValue; }
      set {
        petSkillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "petSkillId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPetSkillId {
      get { return petSkillId_ != null; }
    }
    /// <summary>Clears the value of the "petSkillId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPetSkillId() {
      petSkillId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDailyQuestInstantCompletion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDailyQuestInstantCompletion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      if (Cash != other.Cash) return false;
      if (CurrentState != other.CurrentState) return false;
      if (IsEventCashAmount != other.IsEventCashAmount) return false;
      if (PetOid != other.PetOid) return false;
      if (PetSkillId != other.PetSkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasCurrentState) hash ^= CurrentState.GetHashCode();
      if (HasIsEventCashAmount) hash ^= IsEventCashAmount.GetHashCode();
      if (HasPetOid) hash ^= PetOid.GetHashCode();
      if (HasPetSkillId) hash ^= PetSkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasCurrentState) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentState);
      }
      if (HasIsEventCashAmount) {
        output.WriteRawTag(40);
        output.WriteBool(IsEventCashAmount);
      }
      if (HasPetOid) {
        output.WriteRawTag(64);
        output.WriteInt32(PetOid);
      }
      if (HasPetSkillId) {
        output.WriteRawTag(74);
        output.WriteString(PetSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasCurrentState) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentState);
      }
      if (HasIsEventCashAmount) {
        output.WriteRawTag(40);
        output.WriteBool(IsEventCashAmount);
      }
      if (HasPetOid) {
        output.WriteRawTag(64);
        output.WriteInt32(PetOid);
      }
      if (HasPetSkillId) {
        output.WriteRawTag(74);
        output.WriteString(PetSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasCurrentState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentState);
      }
      if (HasIsEventCashAmount) {
        size += 1 + 1;
      }
      if (HasPetOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PetOid);
      }
      if (HasPetSkillId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PetSkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDailyQuestInstantCompletion other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasCurrentState) {
        CurrentState = other.CurrentState;
      }
      if (other.HasIsEventCashAmount) {
        IsEventCashAmount = other.IsEventCashAmount;
      }
      if (other.HasPetOid) {
        PetOid = other.PetOid;
      }
      if (other.HasPetSkillId) {
        PetSkillId = other.PetSkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            CurrentState = input.ReadInt32();
            break;
          }
          case 40: {
            IsEventCashAmount = input.ReadBool();
            break;
          }
          case 64: {
            PetOid = input.ReadInt32();
            break;
          }
          case 74: {
            PetSkillId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            CurrentState = input.ReadInt32();
            break;
          }
          case 40: {
            IsEventCashAmount = input.ReadBool();
            break;
          }
          case 64: {
            PetOid = input.ReadInt32();
            break;
          }
          case 74: {
            PetSkillId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDailyQuestGetData : pb::IMessage<CDailyQuestGetData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDailyQuestGetData> _parser = new pb::MessageParser<CDailyQuestGetData>(() => new CDailyQuestGetData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDailyQuestGetData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[249]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestGetData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestGetData(CDailyQuestGetData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDailyQuestGetData Clone() {
      return new CDailyQuestGetData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDailyQuestGetData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDailyQuestGetData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDailyQuestGetData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CGetAchievementReward : pb::IMessage<CGetAchievementReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetAchievementReward> _parser = new pb::MessageParser<CGetAchievementReward>(() => new CGetAchievementReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetAchievementReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[250]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetAchievementReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetAchievementReward(CGetAchievementReward other) : this() {
      achievementId_ = other.achievementId_;
      goalId_ = other.goalId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetAchievementReward Clone() {
      return new CGetAchievementReward(this);
    }

    /// <summary>Field number for the "achievementId" field.</summary>
    public const int AchievementIdFieldNumber = 1;
    private readonly static string AchievementIdDefaultValue = "";

    private string achievementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AchievementId {
      get { return achievementId_ ?? AchievementIdDefaultValue; }
      set {
        achievementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "achievementId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAchievementId {
      get { return achievementId_ != null; }
    }
    /// <summary>Clears the value of the "achievementId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAchievementId() {
      achievementId_ = null;
    }

    /// <summary>Field number for the "goalId" field.</summary>
    public const int GoalIdFieldNumber = 2;
    private readonly static string GoalIdDefaultValue = "";

    private string goalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoalId {
      get { return goalId_ ?? GoalIdDefaultValue; }
      set {
        goalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "goalId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoalId {
      get { return goalId_ != null; }
    }
    /// <summary>Clears the value of the "goalId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoalId() {
      goalId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetAchievementReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetAchievementReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AchievementId != other.AchievementId) return false;
      if (GoalId != other.GoalId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAchievementId) hash ^= AchievementId.GetHashCode();
      if (HasGoalId) hash ^= GoalId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAchievementId) {
        output.WriteRawTag(10);
        output.WriteString(AchievementId);
      }
      if (HasGoalId) {
        output.WriteRawTag(18);
        output.WriteString(GoalId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAchievementId) {
        output.WriteRawTag(10);
        output.WriteString(AchievementId);
      }
      if (HasGoalId) {
        output.WriteRawTag(18);
        output.WriteString(GoalId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAchievementId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AchievementId);
      }
      if (HasGoalId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoalId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetAchievementReward other) {
      if (other == null) {
        return;
      }
      if (other.HasAchievementId) {
        AchievementId = other.AchievementId;
      }
      if (other.HasGoalId) {
        GoalId = other.GoalId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AchievementId = input.ReadString();
            break;
          }
          case 18: {
            GoalId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AchievementId = input.ReadString();
            break;
          }
          case 18: {
            GoalId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CProceedAchievement : pb::IMessage<CProceedAchievement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CProceedAchievement> _parser = new pb::MessageParser<CProceedAchievement>(() => new CProceedAchievement());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CProceedAchievement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[251]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CProceedAchievement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CProceedAchievement(CProceedAchievement other) : this() {
      _hasBits0 = other._hasBits0;
      achievementId_ = other.achievementId_;
      key_ = other.key_;
      count_ = other.count_;
      isSet_ = other.isSet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CProceedAchievement Clone() {
      return new CProceedAchievement(this);
    }

    /// <summary>Field number for the "achievementId" field.</summary>
    public const int AchievementIdFieldNumber = 1;
    private readonly static string AchievementIdDefaultValue = "";

    private string achievementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AchievementId {
      get { return achievementId_ ?? AchievementIdDefaultValue; }
      set {
        achievementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "achievementId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAchievementId {
      get { return achievementId_ != null; }
    }
    /// <summary>Clears the value of the "achievementId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAchievementId() {
      achievementId_ = null;
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "isSet" field.</summary>
    public const int IsSetFieldNumber = 4;
    private readonly static bool IsSetDefaultValue = false;

    private bool isSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSet {
      get { if ((_hasBits0 & 2) != 0) { return isSet_; } else { return IsSetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isSet_ = value;
      }
    }
    /// <summary>Gets whether the "isSet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSet {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "isSet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSet() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CProceedAchievement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CProceedAchievement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AchievementId != other.AchievementId) return false;
      if (Key != other.Key) return false;
      if (Count != other.Count) return false;
      if (IsSet != other.IsSet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAchievementId) hash ^= AchievementId.GetHashCode();
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasIsSet) hash ^= IsSet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAchievementId) {
        output.WriteRawTag(10);
        output.WriteString(AchievementId);
      }
      if (HasKey) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (HasCount) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (HasIsSet) {
        output.WriteRawTag(32);
        output.WriteBool(IsSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAchievementId) {
        output.WriteRawTag(10);
        output.WriteString(AchievementId);
      }
      if (HasKey) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (HasCount) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (HasIsSet) {
        output.WriteRawTag(32);
        output.WriteBool(IsSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAchievementId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AchievementId);
      }
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (HasIsSet) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CProceedAchievement other) {
      if (other == null) {
        return;
      }
      if (other.HasAchievementId) {
        AchievementId = other.AchievementId;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasIsSet) {
        IsSet = other.IsSet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AchievementId = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            IsSet = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AchievementId = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            IsSet = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CHotDealBuy : pb::IMessage<CHotDealBuy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CHotDealBuy> _parser = new pb::MessageParser<CHotDealBuy>(() => new CHotDealBuy());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CHotDealBuy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[252]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHotDealBuy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHotDealBuy(CHotDealBuy other) : this() {
      _hasBits0 = other._hasBits0;
      itemId_ = other.itemId_;
      isSpecialItem_ = other.isSpecialItem_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHotDealBuy Clone() {
      return new CHotDealBuy(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    /// <summary>Field number for the "isSpecialItem" field.</summary>
    public const int IsSpecialItemFieldNumber = 2;
    private readonly static bool IsSpecialItemDefaultValue = false;

    private bool isSpecialItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSpecialItem {
      get { if ((_hasBits0 & 1) != 0) { return isSpecialItem_; } else { return IsSpecialItemDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isSpecialItem_ = value;
      }
    }
    /// <summary>Gets whether the "isSpecialItem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSpecialItem {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "isSpecialItem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSpecialItem() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CHotDealBuy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CHotDealBuy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (IsSpecialItem != other.IsSpecialItem) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (HasIsSpecialItem) hash ^= IsSpecialItem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemId) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (HasIsSpecialItem) {
        output.WriteRawTag(16);
        output.WriteBool(IsSpecialItem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemId) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (HasIsSpecialItem) {
        output.WriteRawTag(16);
        output.WriteBool(IsSpecialItem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (HasIsSpecialItem) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CHotDealBuy other) {
      if (other == null) {
        return;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasIsSpecialItem) {
        IsSpecialItem = other.IsSpecialItem;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
          case 16: {
            IsSpecialItem = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
          case 16: {
            IsSpecialItem = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CHotDealPoll : pb::IMessage<CHotDealPoll>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CHotDealPoll> _parser = new pb::MessageParser<CHotDealPoll>(() => new CHotDealPoll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CHotDealPoll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[253]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHotDealPoll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHotDealPoll(CHotDealPoll other) : this() {
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CHotDealPoll Clone() {
      return new CHotDealPoll(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CHotDealPoll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CHotDealPoll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CHotDealPoll other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetChargeObject : pb::IMessage<CGetChargeObject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetChargeObject> _parser = new pb::MessageParser<CGetChargeObject>(() => new CGetChargeObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetChargeObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[254]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetChargeObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetChargeObject(CGetChargeObject other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetChargeObject Clone() {
      return new CGetChargeObject(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetChargeObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetChargeObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetChargeObject other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CPointMissionFinish : pb::IMessage<CPointMissionFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPointMissionFinish> _parser = new pb::MessageParser<CPointMissionFinish>(() => new CPointMissionFinish());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPointMissionFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[255]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionFinish(CPointMissionFinish other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionFinish Clone() {
      return new CPointMissionFinish(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPointMissionFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPointMissionFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPointMissionFinish other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPointMissionInstantCompletion : pb::IMessage<CPointMissionInstantCompletion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPointMissionInstantCompletion> _parser = new pb::MessageParser<CPointMissionInstantCompletion>(() => new CPointMissionInstantCompletion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPointMissionInstantCompletion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[256]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionInstantCompletion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionInstantCompletion(CPointMissionInstantCompletion other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      goal_ = other.goal_;
      cash_ = other.cash_;
      cv_ = other.cv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionInstantCompletion Clone() {
      return new CPointMissionInstantCompletion(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 2;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 2) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 3;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cv" field.</summary>
    public const int CvFieldNumber = 4;
    private readonly static int CvDefaultValue = 0;

    private int cv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cv {
      get { if ((_hasBits0 & 8) != 0) { return cv_; } else { return CvDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cv_ = value;
      }
    }
    /// <summary>Gets whether the "cv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCv {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCv() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPointMissionInstantCompletion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPointMissionInstantCompletion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      if (Cash != other.Cash) return false;
      if (Cv != other.Cv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasCv) hash ^= Cv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasCv) {
        output.WriteRawTag(32);
        output.WriteInt32(Cv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasCv) {
        output.WriteRawTag(32);
        output.WriteInt32(Cv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasCv) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPointMissionInstantCompletion other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasCv) {
        Cv = other.Cv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            Cv = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            Cv = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGrantNewPointMission : pb::IMessage<CGrantNewPointMission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGrantNewPointMission> _parser = new pb::MessageParser<CGrantNewPointMission>(() => new CGrantNewPointMission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGrantNewPointMission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[257]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewPointMission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewPointMission(CGrantNewPointMission other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewPointMission Clone() {
      return new CGrantNewPointMission(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGrantNewPointMission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGrantNewPointMission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGrantNewPointMission other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CPointMissionGetPresent : pb::IMessage<CPointMissionGetPresent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPointMissionGetPresent> _parser = new pb::MessageParser<CPointMissionGetPresent>(() => new CPointMissionGetPresent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPointMissionGetPresent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[258]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionGetPresent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionGetPresent(CPointMissionGetPresent other) : this() {
      _hasBits0 = other._hasBits0;
      point_ = other.point_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPointMissionGetPresent Clone() {
      return new CPointMissionGetPresent(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private readonly static int PointDefaultValue = 0;

    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { if ((_hasBits0 & 1) != 0) { return point_; } else { return PointDefaultValue; } }
      set {
        _hasBits0 |= 1;
        point_ = value;
      }
    }
    /// <summary>Gets whether the "point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPoint {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoint() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPointMissionGetPresent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPointMissionGetPresent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Point != other.Point) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPoint) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPoint) {
        output.WriteRawTag(8);
        output.WriteInt32(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPoint) {
        output.WriteRawTag(8);
        output.WriteInt32(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPointMissionGetPresent other) {
      if (other == null) {
        return;
      }
      if (other.HasPoint) {
        Point = other.Point;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Point = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Point = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBingoMissionFinish : pb::IMessage<CBingoMissionFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBingoMissionFinish> _parser = new pb::MessageParser<CBingoMissionFinish>(() => new CBingoMissionFinish());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBingoMissionFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[259]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionFinish(CBingoMissionFinish other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionFinish Clone() {
      return new CBingoMissionFinish(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBingoMissionFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBingoMissionFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBingoMissionFinish other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBingoMissionInstantCompletion : pb::IMessage<CBingoMissionInstantCompletion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBingoMissionInstantCompletion> _parser = new pb::MessageParser<CBingoMissionInstantCompletion>(() => new CBingoMissionInstantCompletion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBingoMissionInstantCompletion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[260]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionInstantCompletion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionInstantCompletion(CBingoMissionInstantCompletion other) : this() {
      _hasBits0 = other._hasBits0;
      questId_ = other.questId_;
      goal_ = other.goal_;
      cash_ = other.cash_;
      cv_ = other.cv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionInstantCompletion Clone() {
      return new CBingoMissionInstantCompletion(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static int QuestIdDefaultValue = 0;

    private int questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestId {
      get { if ((_hasBits0 & 1) != 0) { return questId_; } else { return QuestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        questId_ = value;
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "goal" field.</summary>
    public const int GoalFieldNumber = 2;
    private readonly static int GoalDefaultValue = 0;

    private int goal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goal {
      get { if ((_hasBits0 & 2) != 0) { return goal_; } else { return GoalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        goal_ = value;
      }
    }
    /// <summary>Gets whether the "goal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "goal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 3;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cv" field.</summary>
    public const int CvFieldNumber = 4;
    private readonly static int CvDefaultValue = 0;

    private int cv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cv {
      get { if ((_hasBits0 & 8) != 0) { return cv_; } else { return CvDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cv_ = value;
      }
    }
    /// <summary>Gets whether the "cv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCv {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCv() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBingoMissionInstantCompletion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBingoMissionInstantCompletion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      if (Goal != other.Goal) return false;
      if (Cash != other.Cash) return false;
      if (Cv != other.Cv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (HasGoal) hash ^= Goal.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasCv) hash ^= Cv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasCv) {
        output.WriteRawTag(32);
        output.WriteInt32(Cv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(8);
        output.WriteInt32(QuestId);
      }
      if (HasGoal) {
        output.WriteRawTag(16);
        output.WriteInt32(Goal);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasCv) {
        output.WriteRawTag(32);
        output.WriteInt32(Cv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestId);
      }
      if (HasGoal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goal);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasCv) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBingoMissionInstantCompletion other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      if (other.HasGoal) {
        Goal = other.Goal;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasCv) {
        Cv = other.Cv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            Cv = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            QuestId = input.ReadInt32();
            break;
          }
          case 16: {
            Goal = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            Cv = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGrantNewBingoMission : pb::IMessage<CGrantNewBingoMission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGrantNewBingoMission> _parser = new pb::MessageParser<CGrantNewBingoMission>(() => new CGrantNewBingoMission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGrantNewBingoMission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[261]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewBingoMission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewBingoMission(CGrantNewBingoMission other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGrantNewBingoMission Clone() {
      return new CGrantNewBingoMission(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGrantNewBingoMission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGrantNewBingoMission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGrantNewBingoMission other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CBingoMissionGetPresent : pb::IMessage<CBingoMissionGetPresent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBingoMissionGetPresent> _parser = new pb::MessageParser<CBingoMissionGetPresent>(() => new CBingoMissionGetPresent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBingoMissionGetPresent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[262]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionGetPresent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionGetPresent(CBingoMissionGetPresent other) : this() {
      _hasBits0 = other._hasBits0;
      point_ = other.point_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionGetPresent Clone() {
      return new CBingoMissionGetPresent(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private readonly static int PointDefaultValue = 0;

    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { if ((_hasBits0 & 1) != 0) { return point_; } else { return PointDefaultValue; } }
      set {
        _hasBits0 |= 1;
        point_ = value;
      }
    }
    /// <summary>Gets whether the "point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPoint {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoint() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBingoMissionGetPresent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBingoMissionGetPresent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Point != other.Point) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPoint) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPoint) {
        output.WriteRawTag(8);
        output.WriteInt32(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPoint) {
        output.WriteRawTag(8);
        output.WriteInt32(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBingoMissionGetPresent other) {
      if (other == null) {
        return;
      }
      if (other.HasPoint) {
        Point = other.Point;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Point = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Point = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBingoMissionGetNumber : pb::IMessage<CBingoMissionGetNumber>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBingoMissionGetNumber> _parser = new pb::MessageParser<CBingoMissionGetNumber>(() => new CBingoMissionGetNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBingoMissionGetNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[263]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionGetNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionGetNumber(CBingoMissionGetNumber other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionGetNumber Clone() {
      return new CBingoMissionGetNumber(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBingoMissionGetNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBingoMissionGetNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBingoMissionGetNumber other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CBingoMissionQuestReset : pb::IMessage<CBingoMissionQuestReset>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBingoMissionQuestReset> _parser = new pb::MessageParser<CBingoMissionQuestReset>(() => new CBingoMissionQuestReset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBingoMissionQuestReset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[264]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionQuestReset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionQuestReset(CBingoMissionQuestReset other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBingoMissionQuestReset Clone() {
      return new CBingoMissionQuestReset(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBingoMissionQuestReset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBingoMissionQuestReset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBingoMissionQuestReset other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CStoreBeanBox : pb::IMessage<CStoreBeanBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CStoreBeanBox> _parser = new pb::MessageParser<CStoreBeanBox>(() => new CStoreBeanBox());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStoreBeanBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[265]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStoreBeanBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStoreBeanBox(CStoreBeanBox other) : this() {
      _hasBits0 = other._hasBits0;
      invenElem_ = other.invenElem_;
      storeKey_ = other.storeKey_;
      fromInven_ = other.fromInven_;
      oid_ = other.oid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStoreBeanBox Clone() {
      return new CStoreBeanBox(this);
    }

    /// <summary>Field number for the "invenElem" field.</summary>
    public const int InvenElemFieldNumber = 1;
    private readonly static string InvenElemDefaultValue = "";

    private string invenElem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvenElem {
      get { return invenElem_ ?? InvenElemDefaultValue; }
      set {
        invenElem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "invenElem" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvenElem {
      get { return invenElem_ != null; }
    }
    /// <summary>Clears the value of the "invenElem" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvenElem() {
      invenElem_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "fromInven" field.</summary>
    public const int FromInvenFieldNumber = 3;
    private readonly static bool FromInvenDefaultValue = false;

    private bool fromInven_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FromInven {
      get { if ((_hasBits0 & 2) != 0) { return fromInven_; } else { return FromInvenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fromInven_ = value;
      }
    }
    /// <summary>Gets whether the "fromInven" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromInven {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "fromInven" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromInven() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 4;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 4) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStoreBeanBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStoreBeanBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InvenElem != other.InvenElem) return false;
      if (StoreKey != other.StoreKey) return false;
      if (FromInven != other.FromInven) return false;
      if (Oid != other.Oid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInvenElem) hash ^= InvenElem.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasFromInven) hash ^= FromInven.GetHashCode();
      if (HasOid) hash ^= Oid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInvenElem) {
        output.WriteRawTag(10);
        output.WriteString(InvenElem);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasFromInven) {
        output.WriteRawTag(24);
        output.WriteBool(FromInven);
      }
      if (HasOid) {
        output.WriteRawTag(32);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInvenElem) {
        output.WriteRawTag(10);
        output.WriteString(InvenElem);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasFromInven) {
        output.WriteRawTag(24);
        output.WriteBool(FromInven);
      }
      if (HasOid) {
        output.WriteRawTag(32);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasInvenElem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvenElem);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasFromInven) {
        size += 1 + 1;
      }
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStoreBeanBox other) {
      if (other == null) {
        return;
      }
      if (other.HasInvenElem) {
        InvenElem = other.InvenElem;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasFromInven) {
        FromInven = other.FromInven;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InvenElem = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            FromInven = input.ReadBool();
            break;
          }
          case 32: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InvenElem = input.ReadString();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 24: {
            FromInven = input.ReadBool();
            break;
          }
          case 32: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUpgradeBeanDepot : pb::IMessage<CUpgradeBeanDepot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUpgradeBeanDepot> _parser = new pb::MessageParser<CUpgradeBeanDepot>(() => new CUpgradeBeanDepot());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUpgradeBeanDepot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[266]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUpgradeBeanDepot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUpgradeBeanDepot(CUpgradeBeanDepot other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      useGold_ = other.useGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUpgradeBeanDepot Clone() {
      return new CUpgradeBeanDepot(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "useGold" field.</summary>
    public const int UseGoldFieldNumber = 2;
    private readonly static bool UseGoldDefaultValue = false;

    private bool useGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGold {
      get { if ((_hasBits0 & 2) != 0) { return useGold_; } else { return UseGoldDefaultValue; } }
      set {
        _hasBits0 |= 2;
        useGold_ = value;
      }
    }
    /// <summary>Gets whether the "useGold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseGold {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "useGold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseGold() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUpgradeBeanDepot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUpgradeBeanDepot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UseGold != other.UseGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasUseGold) hash ^= UseGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasUseGold) {
        output.WriteRawTag(16);
        output.WriteBool(UseGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasUseGold) {
        output.WriteRawTag(16);
        output.WriteBool(UseGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HasUseGold) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUpgradeBeanDepot other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasUseGold) {
        UseGold = other.UseGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            UseGold = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            UseGold = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceReset : pb::IMessage<CEventDiceReset>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceReset> _parser = new pb::MessageParser<CEventDiceReset>(() => new CEventDiceReset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceReset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[267]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceReset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceReset(CEventDiceReset other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceReset Clone() {
      return new CEventDiceReset(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceReset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceReset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceReset other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceFinish : pb::IMessage<CEventDiceFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceFinish> _parser = new pb::MessageParser<CEventDiceFinish>(() => new CEventDiceFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[268]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceFinish(CEventDiceFinish other) : this() {
      questId_ = other.questId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceFinish Clone() {
      return new CEventDiceFinish(this);
    }

    /// <summary>Field number for the "questId" field.</summary>
    public const int QuestIdFieldNumber = 1;
    private readonly static string QuestIdDefaultValue = "";

    private string questId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuestId {
      get { return questId_ ?? QuestIdDefaultValue; }
      set {
        questId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "questId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestId {
      get { return questId_ != null; }
    }
    /// <summary>Clears the value of the "questId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestId() {
      questId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QuestId != other.QuestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuestId) hash ^= QuestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuestId) {
        output.WriteRawTag(10);
        output.WriteString(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuestId) {
        output.WriteRawTag(10);
        output.WriteString(QuestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasQuestId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceFinish other) {
      if (other == null) {
        return;
      }
      if (other.HasQuestId) {
        QuestId = other.QuestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            QuestId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            QuestId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceUseDice : pb::IMessage<CEventDiceUseDice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceUseDice> _parser = new pb::MessageParser<CEventDiceUseDice>(() => new CEventDiceUseDice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceUseDice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[269]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceUseDice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceUseDice(CEventDiceUseDice other) : this() {
      _hasBits0 = other._hasBits0;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceUseDice Clone() {
      return new CEventDiceUseDice(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private readonly static int NumDefaultValue = 0;

    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { if ((_hasBits0 & 1) != 0) { return num_; } else { return NumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        num_ = value;
      }
    }
    /// <summary>Gets whether the "num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNum() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceUseDice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceUseDice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNum) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNum) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNum) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceUseDice other) {
      if (other == null) {
        return;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceBuyDice : pb::IMessage<CEventDiceBuyDice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceBuyDice> _parser = new pb::MessageParser<CEventDiceBuyDice>(() => new CEventDiceBuyDice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceBuyDice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[270]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceBuyDice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceBuyDice(CEventDiceBuyDice other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceBuyDice Clone() {
      return new CEventDiceBuyDice(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceBuyDice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceBuyDice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceBuyDice other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceForceMoveStartPoint : pb::IMessage<CEventDiceForceMoveStartPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceForceMoveStartPoint> _parser = new pb::MessageParser<CEventDiceForceMoveStartPoint>(() => new CEventDiceForceMoveStartPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceForceMoveStartPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[271]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceForceMoveStartPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceForceMoveStartPoint(CEventDiceForceMoveStartPoint other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceForceMoveStartPoint Clone() {
      return new CEventDiceForceMoveStartPoint(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceForceMoveStartPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceForceMoveStartPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceForceMoveStartPoint other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceForceMoveByGoldCard : pb::IMessage<CEventDiceForceMoveByGoldCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceForceMoveByGoldCard> _parser = new pb::MessageParser<CEventDiceForceMoveByGoldCard>(() => new CEventDiceForceMoveByGoldCard());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceForceMoveByGoldCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[272]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceForceMoveByGoldCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceForceMoveByGoldCard(CEventDiceForceMoveByGoldCard other) : this() {
      _hasBits0 = other._hasBits0;
      foward_ = other.foward_;
      dist_ = other.dist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceForceMoveByGoldCard Clone() {
      return new CEventDiceForceMoveByGoldCard(this);
    }

    /// <summary>Field number for the "foward" field.</summary>
    public const int FowardFieldNumber = 1;
    private readonly static bool FowardDefaultValue = false;

    private bool foward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Foward {
      get { if ((_hasBits0 & 1) != 0) { return foward_; } else { return FowardDefaultValue; } }
      set {
        _hasBits0 |= 1;
        foward_ = value;
      }
    }
    /// <summary>Gets whether the "foward" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFoward {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "foward" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFoward() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dist" field.</summary>
    public const int DistFieldNumber = 2;
    private readonly static int DistDefaultValue = 0;

    private int dist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dist {
      get { if ((_hasBits0 & 2) != 0) { return dist_; } else { return DistDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dist_ = value;
      }
    }
    /// <summary>Gets whether the "dist" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDist {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "dist" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDist() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceForceMoveByGoldCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceForceMoveByGoldCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Foward != other.Foward) return false;
      if (Dist != other.Dist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFoward) hash ^= Foward.GetHashCode();
      if (HasDist) hash ^= Dist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFoward) {
        output.WriteRawTag(8);
        output.WriteBool(Foward);
      }
      if (HasDist) {
        output.WriteRawTag(16);
        output.WriteInt32(Dist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFoward) {
        output.WriteRawTag(8);
        output.WriteBool(Foward);
      }
      if (HasDist) {
        output.WriteRawTag(16);
        output.WriteInt32(Dist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFoward) {
        size += 1 + 1;
      }
      if (HasDist) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dist);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceForceMoveByGoldCard other) {
      if (other == null) {
        return;
      }
      if (other.HasFoward) {
        Foward = other.Foward;
      }
      if (other.HasDist) {
        Dist = other.Dist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Foward = input.ReadBool();
            break;
          }
          case 16: {
            Dist = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Foward = input.ReadBool();
            break;
          }
          case 16: {
            Dist = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceSendGift : pb::IMessage<CEventDiceSendGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceSendGift> _parser = new pb::MessageParser<CEventDiceSendGift>(() => new CEventDiceSendGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceSendGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[273]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceSendGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceSendGift(CEventDiceSendGift other) : this() {
      fids_ = other.fids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceSendGift Clone() {
      return new CEventDiceSendGift(this);
    }

    /// <summary>Field number for the "fids" field.</summary>
    public const int FidsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_fids_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> fids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fids {
      get { return fids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceSendGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceSendGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fids_.Equals(other.fids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fids_.WriteTo(output, _repeated_fids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fids_.WriteTo(ref output, _repeated_fids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fids_.CalculateSize(_repeated_fids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceSendGift other) {
      if (other == null) {
        return;
      }
      fids_.Add(other.fids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            fids_.AddEntriesFrom(input, _repeated_fids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            fids_.AddEntriesFrom(ref input, _repeated_fids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceRecvGift : pb::IMessage<CEventDiceRecvGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceRecvGift> _parser = new pb::MessageParser<CEventDiceRecvGift>(() => new CEventDiceRecvGift());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceRecvGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[274]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceRecvGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceRecvGift(CEventDiceRecvGift other) : this() {
      _hasBits0 = other._hasBits0;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceRecvGift Clone() {
      return new CEventDiceRecvGift(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceRecvGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceRecvGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCount) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCount) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceRecvGift other) {
      if (other == null) {
        return;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceResetGift : pb::IMessage<CEventDiceResetGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceResetGift> _parser = new pb::MessageParser<CEventDiceResetGift>(() => new CEventDiceResetGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceResetGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[275]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceResetGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceResetGift(CEventDiceResetGift other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceResetGift Clone() {
      return new CEventDiceResetGift(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceResetGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceResetGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceResetGift other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CEventDiceFirstVisit : pb::IMessage<CEventDiceFirstVisit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventDiceFirstVisit> _parser = new pb::MessageParser<CEventDiceFirstVisit>(() => new CEventDiceFirstVisit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventDiceFirstVisit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[276]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceFirstVisit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceFirstVisit(CEventDiceFirstVisit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventDiceFirstVisit Clone() {
      return new CEventDiceFirstVisit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventDiceFirstVisit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventDiceFirstVisit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventDiceFirstVisit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CComeBackSendGift : pb::IMessage<CComeBackSendGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CComeBackSendGift> _parser = new pb::MessageParser<CComeBackSendGift>(() => new CComeBackSendGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CComeBackSendGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[277]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CComeBackSendGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CComeBackSendGift(CComeBackSendGift other) : this() {
      fids_ = other.fids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CComeBackSendGift Clone() {
      return new CComeBackSendGift(this);
    }

    /// <summary>Field number for the "fids" field.</summary>
    public const int FidsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_fids_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> fids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fids {
      get { return fids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CComeBackSendGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CComeBackSendGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fids_.Equals(other.fids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fids_.WriteTo(output, _repeated_fids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fids_.WriteTo(ref output, _repeated_fids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fids_.CalculateSize(_repeated_fids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CComeBackSendGift other) {
      if (other == null) {
        return;
      }
      fids_.Add(other.fids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            fids_.AddEntriesFrom(input, _repeated_fids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            fids_.AddEntriesFrom(ref input, _repeated_fids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CComeBackRecvGift : pb::IMessage<CComeBackRecvGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CComeBackRecvGift> _parser = new pb::MessageParser<CComeBackRecvGift>(() => new CComeBackRecvGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CComeBackRecvGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[278]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CComeBackRecvGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CComeBackRecvGift(CComeBackRecvGift other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CComeBackRecvGift Clone() {
      return new CComeBackRecvGift(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CComeBackRecvGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CComeBackRecvGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CComeBackRecvGift other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CEventGomCheckReward : pb::IMessage<CEventGomCheckReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CEventGomCheckReward> _parser = new pb::MessageParser<CEventGomCheckReward>(() => new CEventGomCheckReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CEventGomCheckReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[279]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventGomCheckReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventGomCheckReward(CEventGomCheckReward other) : this() {
      stageId_ = other.stageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CEventGomCheckReward Clone() {
      return new CEventGomCheckReward(this);
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 1;
    private readonly static string StageIdDefaultValue = "";

    private string stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StageId {
      get { return stageId_ ?? StageIdDefaultValue; }
      set {
        stageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "stageId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStageId {
      get { return stageId_ != null; }
    }
    /// <summary>Clears the value of the "stageId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStageId() {
      stageId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CEventGomCheckReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CEventGomCheckReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageId != other.StageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStageId) hash ^= StageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStageId) {
        output.WriteRawTag(10);
        output.WriteString(StageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStageId) {
        output.WriteRawTag(10);
        output.WriteString(StageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStageId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CEventGomCheckReward other) {
      if (other == null) {
        return;
      }
      if (other.HasStageId) {
        StageId = other.StageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StageId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StageId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTarotQuestion : pb::IMessage<CTarotQuestion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTarotQuestion> _parser = new pb::MessageParser<CTarotQuestion>(() => new CTarotQuestion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTarotQuestion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[280]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotQuestion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotQuestion(CTarotQuestion other) : this() {
      _hasBits0 = other._hasBits0;
      genre_ = other.genre_;
      main_ = other.main_;
      sub_ = other.sub_;
      category_ = other.category_;
      questionIndex_ = other.questionIndex_;
      questionContent_ = other.questionContent_;
      useTicket_ = other.useTicket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotQuestion Clone() {
      return new CTarotQuestion(this);
    }

    /// <summary>Field number for the "genre" field.</summary>
    public const int GenreFieldNumber = 1;
    private readonly static string GenreDefaultValue = "";

    private string genre_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Genre {
      get { return genre_ ?? GenreDefaultValue; }
      set {
        genre_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "genre" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGenre {
      get { return genre_ != null; }
    }
    /// <summary>Clears the value of the "genre" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGenre() {
      genre_ = null;
    }

    /// <summary>Field number for the "main" field.</summary>
    public const int MainFieldNumber = 2;
    private readonly static string MainDefaultValue = "";

    private string main_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Main {
      get { return main_ ?? MainDefaultValue; }
      set {
        main_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "main" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMain {
      get { return main_ != null; }
    }
    /// <summary>Clears the value of the "main" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMain() {
      main_ = null;
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 3;
    private readonly static string SubDefaultValue = "";

    private string sub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sub {
      get { return sub_ ?? SubDefaultValue; }
      set {
        sub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sub" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSub {
      get { return sub_ != null; }
    }
    /// <summary>Clears the value of the "sub" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSub() {
      sub_ = null;
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 4;
    private readonly static string CategoryDefaultValue = "";

    private string category_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Category {
      get { return category_ ?? CategoryDefaultValue; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "category" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCategory {
      get { return category_ != null; }
    }
    /// <summary>Clears the value of the "category" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCategory() {
      category_ = null;
    }

    /// <summary>Field number for the "questionIndex" field.</summary>
    public const int QuestionIndexFieldNumber = 5;
    private readonly static string QuestionIndexDefaultValue = "";

    private string questionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuestionIndex {
      get { return questionIndex_ ?? QuestionIndexDefaultValue; }
      set {
        questionIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "questionIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestionIndex {
      get { return questionIndex_ != null; }
    }
    /// <summary>Clears the value of the "questionIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestionIndex() {
      questionIndex_ = null;
    }

    /// <summary>Field number for the "questionContent" field.</summary>
    public const int QuestionContentFieldNumber = 6;
    private readonly static string QuestionContentDefaultValue = "";

    private string questionContent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuestionContent {
      get { return questionContent_ ?? QuestionContentDefaultValue; }
      set {
        questionContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "questionContent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuestionContent {
      get { return questionContent_ != null; }
    }
    /// <summary>Clears the value of the "questionContent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuestionContent() {
      questionContent_ = null;
    }

    /// <summary>Field number for the "useTicket" field.</summary>
    public const int UseTicketFieldNumber = 7;
    private readonly static bool UseTicketDefaultValue = false;

    private bool useTicket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseTicket {
      get { if ((_hasBits0 & 1) != 0) { return useTicket_; } else { return UseTicketDefaultValue; } }
      set {
        _hasBits0 |= 1;
        useTicket_ = value;
      }
    }
    /// <summary>Gets whether the "useTicket" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseTicket {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "useTicket" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseTicket() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTarotQuestion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTarotQuestion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Genre != other.Genre) return false;
      if (Main != other.Main) return false;
      if (Sub != other.Sub) return false;
      if (Category != other.Category) return false;
      if (QuestionIndex != other.QuestionIndex) return false;
      if (QuestionContent != other.QuestionContent) return false;
      if (UseTicket != other.UseTicket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGenre) hash ^= Genre.GetHashCode();
      if (HasMain) hash ^= Main.GetHashCode();
      if (HasSub) hash ^= Sub.GetHashCode();
      if (HasCategory) hash ^= Category.GetHashCode();
      if (HasQuestionIndex) hash ^= QuestionIndex.GetHashCode();
      if (HasQuestionContent) hash ^= QuestionContent.GetHashCode();
      if (HasUseTicket) hash ^= UseTicket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGenre) {
        output.WriteRawTag(10);
        output.WriteString(Genre);
      }
      if (HasMain) {
        output.WriteRawTag(18);
        output.WriteString(Main);
      }
      if (HasSub) {
        output.WriteRawTag(26);
        output.WriteString(Sub);
      }
      if (HasCategory) {
        output.WriteRawTag(34);
        output.WriteString(Category);
      }
      if (HasQuestionIndex) {
        output.WriteRawTag(42);
        output.WriteString(QuestionIndex);
      }
      if (HasQuestionContent) {
        output.WriteRawTag(50);
        output.WriteString(QuestionContent);
      }
      if (HasUseTicket) {
        output.WriteRawTag(56);
        output.WriteBool(UseTicket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGenre) {
        output.WriteRawTag(10);
        output.WriteString(Genre);
      }
      if (HasMain) {
        output.WriteRawTag(18);
        output.WriteString(Main);
      }
      if (HasSub) {
        output.WriteRawTag(26);
        output.WriteString(Sub);
      }
      if (HasCategory) {
        output.WriteRawTag(34);
        output.WriteString(Category);
      }
      if (HasQuestionIndex) {
        output.WriteRawTag(42);
        output.WriteString(QuestionIndex);
      }
      if (HasQuestionContent) {
        output.WriteRawTag(50);
        output.WriteString(QuestionContent);
      }
      if (HasUseTicket) {
        output.WriteRawTag(56);
        output.WriteBool(UseTicket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGenre) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Genre);
      }
      if (HasMain) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Main);
      }
      if (HasSub) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sub);
      }
      if (HasCategory) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      if (HasQuestionIndex) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestionIndex);
      }
      if (HasQuestionContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestionContent);
      }
      if (HasUseTicket) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTarotQuestion other) {
      if (other == null) {
        return;
      }
      if (other.HasGenre) {
        Genre = other.Genre;
      }
      if (other.HasMain) {
        Main = other.Main;
      }
      if (other.HasSub) {
        Sub = other.Sub;
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasQuestionIndex) {
        QuestionIndex = other.QuestionIndex;
      }
      if (other.HasQuestionContent) {
        QuestionContent = other.QuestionContent;
      }
      if (other.HasUseTicket) {
        UseTicket = other.UseTicket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Genre = input.ReadString();
            break;
          }
          case 18: {
            Main = input.ReadString();
            break;
          }
          case 26: {
            Sub = input.ReadString();
            break;
          }
          case 34: {
            Category = input.ReadString();
            break;
          }
          case 42: {
            QuestionIndex = input.ReadString();
            break;
          }
          case 50: {
            QuestionContent = input.ReadString();
            break;
          }
          case 56: {
            UseTicket = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Genre = input.ReadString();
            break;
          }
          case 18: {
            Main = input.ReadString();
            break;
          }
          case 26: {
            Sub = input.ReadString();
            break;
          }
          case 34: {
            Category = input.ReadString();
            break;
          }
          case 42: {
            QuestionIndex = input.ReadString();
            break;
          }
          case 50: {
            QuestionContent = input.ReadString();
            break;
          }
          case 56: {
            UseTicket = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CTarotReward : pb::IMessage<CTarotReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTarotReward> _parser = new pb::MessageParser<CTarotReward>(() => new CTarotReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTarotReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[281]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotReward(CTarotReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotReward Clone() {
      return new CTarotReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTarotReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTarotReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTarotReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CApplyTarotSkill : pb::IMessage<CApplyTarotSkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CApplyTarotSkill> _parser = new pb::MessageParser<CApplyTarotSkill>(() => new CApplyTarotSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CApplyTarotSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[282]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CApplyTarotSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CApplyTarotSkill(CApplyTarotSkill other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CApplyTarotSkill Clone() {
      return new CApplyTarotSkill(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CApplyTarotSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CApplyTarotSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CApplyTarotSkill other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CTarotBuyTicket : pb::IMessage<CTarotBuyTicket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CTarotBuyTicket> _parser = new pb::MessageParser<CTarotBuyTicket>(() => new CTarotBuyTicket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CTarotBuyTicket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[283]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotBuyTicket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotBuyTicket(CTarotBuyTicket other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CTarotBuyTicket Clone() {
      return new CTarotBuyTicket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CTarotBuyTicket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CTarotBuyTicket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CTarotBuyTicket other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CThirdStoreGetAdditFavor : pb::IMessage<CThirdStoreGetAdditFavor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThirdStoreGetAdditFavor> _parser = new pb::MessageParser<CThirdStoreGetAdditFavor>(() => new CThirdStoreGetAdditFavor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThirdStoreGetAdditFavor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[284]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreGetAdditFavor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreGetAdditFavor(CThirdStoreGetAdditFavor other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreGetAdditFavor Clone() {
      return new CThirdStoreGetAdditFavor(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThirdStoreGetAdditFavor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThirdStoreGetAdditFavor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThirdStoreGetAdditFavor other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CThirdStoreHostDailyReward : pb::IMessage<CThirdStoreHostDailyReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThirdStoreHostDailyReward> _parser = new pb::MessageParser<CThirdStoreHostDailyReward>(() => new CThirdStoreHostDailyReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThirdStoreHostDailyReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[285]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreHostDailyReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreHostDailyReward(CThirdStoreHostDailyReward other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreHostDailyReward Clone() {
      return new CThirdStoreHostDailyReward(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThirdStoreHostDailyReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThirdStoreHostDailyReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThirdStoreHostDailyReward other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CThirdStoreCompleteFavor : pb::IMessage<CThirdStoreCompleteFavor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThirdStoreCompleteFavor> _parser = new pb::MessageParser<CThirdStoreCompleteFavor>(() => new CThirdStoreCompleteFavor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThirdStoreCompleteFavor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[286]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreCompleteFavor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreCompleteFavor(CThirdStoreCompleteFavor other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreCompleteFavor Clone() {
      return new CThirdStoreCompleteFavor(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThirdStoreCompleteFavor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThirdStoreCompleteFavor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThirdStoreCompleteFavor other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CThirdStoreInstantFillSalePoint : pb::IMessage<CThirdStoreInstantFillSalePoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThirdStoreInstantFillSalePoint> _parser = new pb::MessageParser<CThirdStoreInstantFillSalePoint>(() => new CThirdStoreInstantFillSalePoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThirdStoreInstantFillSalePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[287]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreInstantFillSalePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreInstantFillSalePoint(CThirdStoreInstantFillSalePoint other) : this() {
      _hasBits0 = other._hasBits0;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreInstantFillSalePoint Clone() {
      return new CThirdStoreInstantFillSalePoint(this);
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 1;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThirdStoreInstantFillSalePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThirdStoreInstantFillSalePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCash) {
        output.WriteRawTag(8);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCash) {
        output.WriteRawTag(8);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThirdStoreInstantFillSalePoint other) {
      if (other == null) {
        return;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CThirdStoreInstantFillFavor : pb::IMessage<CThirdStoreInstantFillFavor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThirdStoreInstantFillFavor> _parser = new pb::MessageParser<CThirdStoreInstantFillFavor>(() => new CThirdStoreInstantFillFavor());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThirdStoreInstantFillFavor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[288]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreInstantFillFavor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreInstantFillFavor(CThirdStoreInstantFillFavor other) : this() {
      _hasBits0 = other._hasBits0;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThirdStoreInstantFillFavor Clone() {
      return new CThirdStoreInstantFillFavor(this);
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 1;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 1) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThirdStoreInstantFillFavor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThirdStoreInstantFillFavor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCash) {
        output.WriteRawTag(8);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCash) {
        output.WriteRawTag(8);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThirdStoreInstantFillFavor other) {
      if (other == null) {
        return;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAddFavoriteFriend : pb::IMessage<CAddFavoriteFriend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAddFavoriteFriend> _parser = new pb::MessageParser<CAddFavoriteFriend>(() => new CAddFavoriteFriend());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAddFavoriteFriend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[289]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAddFavoriteFriend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAddFavoriteFriend(CAddFavoriteFriend other) : this() {
      _hasBits0 = other._hasBits0;
      frIds_ = other.frIds_;
      localData_ = other.localData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAddFavoriteFriend Clone() {
      return new CAddFavoriteFriend(this);
    }

    /// <summary>Field number for the "frIds" field.</summary>
    public const int FrIdsFieldNumber = 1;
    private readonly static string FrIdsDefaultValue = "";

    private string frIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrIds {
      get { return frIds_ ?? FrIdsDefaultValue; }
      set {
        frIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "frIds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFrIds {
      get { return frIds_ != null; }
    }
    /// <summary>Clears the value of the "frIds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFrIds() {
      frIds_ = null;
    }

    /// <summary>Field number for the "localData" field.</summary>
    public const int LocalDataFieldNumber = 2;
    private readonly static bool LocalDataDefaultValue = false;

    private bool localData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LocalData {
      get { if ((_hasBits0 & 1) != 0) { return localData_; } else { return LocalDataDefaultValue; } }
      set {
        _hasBits0 |= 1;
        localData_ = value;
      }
    }
    /// <summary>Gets whether the "localData" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocalData {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "localData" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalData() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAddFavoriteFriend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAddFavoriteFriend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrIds != other.FrIds) return false;
      if (LocalData != other.LocalData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFrIds) hash ^= FrIds.GetHashCode();
      if (HasLocalData) hash ^= LocalData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFrIds) {
        output.WriteRawTag(10);
        output.WriteString(FrIds);
      }
      if (HasLocalData) {
        output.WriteRawTag(16);
        output.WriteBool(LocalData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFrIds) {
        output.WriteRawTag(10);
        output.WriteString(FrIds);
      }
      if (HasLocalData) {
        output.WriteRawTag(16);
        output.WriteBool(LocalData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFrIds) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrIds);
      }
      if (HasLocalData) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAddFavoriteFriend other) {
      if (other == null) {
        return;
      }
      if (other.HasFrIds) {
        FrIds = other.FrIds;
      }
      if (other.HasLocalData) {
        LocalData = other.LocalData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FrIds = input.ReadString();
            break;
          }
          case 16: {
            LocalData = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FrIds = input.ReadString();
            break;
          }
          case 16: {
            LocalData = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRemoveFavoriteFriend : pb::IMessage<CRemoveFavoriteFriend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRemoveFavoriteFriend> _parser = new pb::MessageParser<CRemoveFavoriteFriend>(() => new CRemoveFavoriteFriend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRemoveFavoriteFriend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[290]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveFavoriteFriend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveFavoriteFriend(CRemoveFavoriteFriend other) : this() {
      frId_ = other.frId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRemoveFavoriteFriend Clone() {
      return new CRemoveFavoriteFriend(this);
    }

    /// <summary>Field number for the "frId" field.</summary>
    public const int FrIdFieldNumber = 1;
    private readonly static string FrIdDefaultValue = "";

    private string frId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrId {
      get { return frId_ ?? FrIdDefaultValue; }
      set {
        frId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "frId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFrId {
      get { return frId_ != null; }
    }
    /// <summary>Clears the value of the "frId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFrId() {
      frId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRemoveFavoriteFriend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRemoveFavoriteFriend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrId != other.FrId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFrId) hash ^= FrId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFrId) {
        output.WriteRawTag(10);
        output.WriteString(FrId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFrId) {
        output.WriteRawTag(10);
        output.WriteString(FrId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFrId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRemoveFavoriteFriend other) {
      if (other == null) {
        return;
      }
      if (other.HasFrId) {
        FrId = other.FrId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FrId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FrId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronMachineCall : pb::IMessage<CPatronMachineCall>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronMachineCall> _parser = new pb::MessageParser<CPatronMachineCall>(() => new CPatronMachineCall());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronMachineCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[291]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronMachineCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronMachineCall(CPatronMachineCall other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      itemId_ = other.itemId_;
      patronId_ = other.patronId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronMachineCall Clone() {
      return new CPatronMachineCall(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    /// <summary>Field number for the "patronId" field.</summary>
    public const int PatronIdFieldNumber = 3;
    private readonly static string PatronIdDefaultValue = "";

    private string patronId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatronId {
      get { return patronId_ ?? PatronIdDefaultValue; }
      set {
        patronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "patronId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPatronId {
      get { return patronId_ != null; }
    }
    /// <summary>Clears the value of the "patronId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPatronId() {
      patronId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronMachineCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronMachineCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (ItemId != other.ItemId) return false;
      if (PatronId != other.PatronId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (HasPatronId) hash ^= PatronId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (HasPatronId) {
        output.WriteRawTag(26);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasItemId) {
        output.WriteRawTag(18);
        output.WriteString(ItemId);
      }
      if (HasPatronId) {
        output.WriteRawTag(26);
        output.WriteString(PatronId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (HasPatronId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatronId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronMachineCall other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasPatronId) {
        PatronId = other.PatronId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 26: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            ItemId = input.ReadString();
            break;
          }
          case 26: {
            PatronId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPatronMachineFin : pb::IMessage<CPatronMachineFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPatronMachineFin> _parser = new pb::MessageParser<CPatronMachineFin>(() => new CPatronMachineFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPatronMachineFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[292]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronMachineFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronMachineFin(CPatronMachineFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPatronMachineFin Clone() {
      return new CPatronMachineFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPatronMachineFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPatronMachineFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPatronMachineFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CChargeCollection : pb::IMessage<CChargeCollection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CChargeCollection> _parser = new pb::MessageParser<CChargeCollection>(() => new CChargeCollection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CChargeCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[293]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargeCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargeCollection(CChargeCollection other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CChargeCollection Clone() {
      return new CChargeCollection(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CChargeCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CChargeCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CChargeCollection other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CReceiveChargeObj : pb::IMessage<CReceiveChargeObj>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CReceiveChargeObj> _parser = new pb::MessageParser<CReceiveChargeObj>(() => new CReceiveChargeObj());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CReceiveChargeObj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[294]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveChargeObj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveChargeObj(CReceiveChargeObj other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveChargeObj Clone() {
      return new CReceiveChargeObj(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CReceiveChargeObj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CReceiveChargeObj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CReceiveChargeObj other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CReceiveCollectionGift : pb::IMessage<CReceiveCollectionGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CReceiveCollectionGift> _parser = new pb::MessageParser<CReceiveCollectionGift>(() => new CReceiveCollectionGift());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CReceiveCollectionGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[295]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveCollectionGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveCollectionGift(CReceiveCollectionGift other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      order_ = other.order_;
      collectionType_ = other.collectionType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveCollectionGift Clone() {
      return new CReceiveCollectionGift(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private readonly static int OrderDefaultValue = 0;

    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { if ((_hasBits0 & 1) != 0) { return order_; } else { return OrderDefaultValue; } }
      set {
        _hasBits0 |= 1;
        order_ = value;
      }
    }
    /// <summary>Gets whether the "order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrder {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrder() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "collectionType" field.</summary>
    public const int CollectionTypeFieldNumber = 3;
    private readonly static string CollectionTypeDefaultValue = "";

    private string collectionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollectionType {
      get { return collectionType_ ?? CollectionTypeDefaultValue; }
      set {
        collectionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "collectionType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollectionType {
      get { return collectionType_ != null; }
    }
    /// <summary>Clears the value of the "collectionType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollectionType() {
      collectionType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CReceiveCollectionGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CReceiveCollectionGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Order != other.Order) return false;
      if (CollectionType != other.CollectionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasOrder) hash ^= Order.GetHashCode();
      if (HasCollectionType) hash ^= CollectionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasOrder) {
        output.WriteRawTag(16);
        output.WriteInt32(Order);
      }
      if (HasCollectionType) {
        output.WriteRawTag(26);
        output.WriteString(CollectionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasOrder) {
        output.WriteRawTag(16);
        output.WriteInt32(Order);
      }
      if (HasCollectionType) {
        output.WriteRawTag(26);
        output.WriteString(CollectionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasOrder) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      if (HasCollectionType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CReceiveCollectionGift other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasOrder) {
        Order = other.Order;
      }
      if (other.HasCollectionType) {
        CollectionType = other.CollectionType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Order = input.ReadInt32();
            break;
          }
          case 26: {
            CollectionType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Order = input.ReadInt32();
            break;
          }
          case 26: {
            CollectionType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CReceiveLevelUpReward : pb::IMessage<CReceiveLevelUpReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CReceiveLevelUpReward> _parser = new pb::MessageParser<CReceiveLevelUpReward>(() => new CReceiveLevelUpReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CReceiveLevelUpReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[296]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveLevelUpReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveLevelUpReward(CReceiveLevelUpReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CReceiveLevelUpReward Clone() {
      return new CReceiveLevelUpReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CReceiveLevelUpReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CReceiveLevelUpReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CReceiveLevelUpReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class COpenPointBox : pb::IMessage<COpenPointBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<COpenPointBox> _parser = new pb::MessageParser<COpenPointBox>(() => new COpenPointBox());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<COpenPointBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[297]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenPointBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenPointBox(COpenPointBox other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      boxNum_ = other.boxNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenPointBox Clone() {
      return new COpenPointBox(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    /// <summary>Field number for the "boxNum" field.</summary>
    public const int BoxNumFieldNumber = 2;
    private readonly static int BoxNumDefaultValue = 0;

    private int boxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxNum {
      get { if ((_hasBits0 & 1) != 0) { return boxNum_; } else { return BoxNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        boxNum_ = value;
      }
    }
    /// <summary>Gets whether the "boxNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBoxNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "boxNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBoxNum() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as COpenPointBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(COpenPointBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (BoxNum != other.BoxNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasBoxNum) hash ^= BoxNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasBoxNum) {
        output.WriteRawTag(16);
        output.WriteInt32(BoxNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasBoxNum) {
        output.WriteRawTag(16);
        output.WriteInt32(BoxNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (HasBoxNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(COpenPointBox other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasBoxNum) {
        BoxNum = other.BoxNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 16: {
            BoxNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 16: {
            BoxNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyBoxPoint : pb::IMessage<CBuyBoxPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyBoxPoint> _parser = new pb::MessageParser<CBuyBoxPoint>(() => new CBuyBoxPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyBoxPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[298]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyBoxPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyBoxPoint(CBuyBoxPoint other) : this() {
      _hasBits0 = other._hasBits0;
      eventId_ = other.eventId_;
      point_ = other.point_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyBoxPoint Clone() {
      return new CBuyBoxPoint(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private readonly static int PointDefaultValue = 0;

    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { if ((_hasBits0 & 1) != 0) { return point_; } else { return PointDefaultValue; } }
      set {
        _hasBits0 |= 1;
        point_ = value;
      }
    }
    /// <summary>Gets whether the "point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPoint {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoint() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyBoxPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyBoxPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (Point != other.Point) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasPoint) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasPoint) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (HasPoint) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (HasPoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyBoxPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasPoint) {
        Point = other.Point;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CDevTimeSet : pb::IMessage<CDevTimeSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CDevTimeSet> _parser = new pb::MessageParser<CDevTimeSet>(() => new CDevTimeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDevTimeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[299]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDevTimeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDevTimeSet(CDevTimeSet other) : this() {
      setTime_ = other.setTime_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDevTimeSet Clone() {
      return new CDevTimeSet(this);
    }

    /// <summary>Field number for the "setTime" field.</summary>
    public const int SetTimeFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_setTime_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> setTime_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SetTime {
      get { return setTime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDevTimeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDevTimeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!setTime_.Equals(other.setTime_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= setTime_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      setTime_.WriteTo(output, _repeated_setTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      setTime_.WriteTo(ref output, _repeated_setTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += setTime_.CalculateSize(_repeated_setTime_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDevTimeSet other) {
      if (other == null) {
        return;
      }
      setTime_.Add(other.setTime_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            setTime_.AddEntriesFrom(input, _repeated_setTime_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            setTime_.AddEntriesFrom(ref input, _repeated_setTime_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CXpReward : pb::IMessage<CXpReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CXpReward> _parser = new pb::MessageParser<CXpReward>(() => new CXpReward());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CXpReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[300]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CXpReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CXpReward(CXpReward other) : this() {
      _hasBits0 = other._hasBits0;
      isLevelUp_ = other.isLevelUp_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CXpReward Clone() {
      return new CXpReward(this);
    }

    /// <summary>Field number for the "isLevelUp" field.</summary>
    public const int IsLevelUpFieldNumber = 1;
    private readonly static bool IsLevelUpDefaultValue = false;

    private bool isLevelUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLevelUp {
      get { if ((_hasBits0 & 1) != 0) { return isLevelUp_; } else { return IsLevelUpDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isLevelUp_ = value;
      }
    }
    /// <summary>Gets whether the "isLevelUp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsLevelUp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "isLevelUp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsLevelUp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private readonly static int ExpDefaultValue = 0;

    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { if ((_hasBits0 & 2) != 0) { return exp_; } else { return ExpDefaultValue; } }
      set {
        _hasBits0 |= 2;
        exp_ = value;
      }
    }
    /// <summary>Gets whether the "exp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "exp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExp() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CXpReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CXpReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsLevelUp != other.IsLevelUp) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsLevelUp) hash ^= IsLevelUp.GetHashCode();
      if (HasExp) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsLevelUp) {
        output.WriteRawTag(8);
        output.WriteBool(IsLevelUp);
      }
      if (HasExp) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsLevelUp) {
        output.WriteRawTag(8);
        output.WriteBool(IsLevelUp);
      }
      if (HasExp) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIsLevelUp) {
        size += 1 + 1;
      }
      if (HasExp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CXpReward other) {
      if (other == null) {
        return;
      }
      if (other.HasIsLevelUp) {
        IsLevelUp = other.IsLevelUp;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsLevelUp = input.ReadBool();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsLevelUp = input.ReadBool();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CGetOnTimeBoxPoint : pb::IMessage<CGetOnTimeBoxPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetOnTimeBoxPoint> _parser = new pb::MessageParser<CGetOnTimeBoxPoint>(() => new CGetOnTimeBoxPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetOnTimeBoxPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[301]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetOnTimeBoxPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetOnTimeBoxPoint(CGetOnTimeBoxPoint other) : this() {
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetOnTimeBoxPoint Clone() {
      return new CGetOnTimeBoxPoint(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private readonly static string EventIdDefaultValue = "";

    private string eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_ ?? EventIdDefaultValue; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return eventId_ != null; }
    }
    /// <summary>Clears the value of the "eventId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      eventId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetOnTimeBoxPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetOnTimeBoxPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetOnTimeBoxPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetAwake : pb::IMessage<CPetAwake>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetAwake> _parser = new pb::MessageParser<CPetAwake>(() => new CPetAwake());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetAwake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[302]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetAwake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetAwake(CPetAwake other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      awake_ = other.awake_;
      cushionId_ = other.cushionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetAwake Clone() {
      return new CPetAwake(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "awake" field.</summary>
    public const int AwakeFieldNumber = 2;
    private readonly static bool AwakeDefaultValue = false;

    private bool awake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Awake {
      get { if ((_hasBits0 & 2) != 0) { return awake_; } else { return AwakeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        awake_ = value;
      }
    }
    /// <summary>Gets whether the "awake" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAwake {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "awake" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAwake() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cushionId" field.</summary>
    public const int CushionIdFieldNumber = 3;
    private readonly static string CushionIdDefaultValue = "";

    private string cushionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CushionId {
      get { return cushionId_ ?? CushionIdDefaultValue; }
      set {
        cushionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cushionId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCushionId {
      get { return cushionId_ != null; }
    }
    /// <summary>Clears the value of the "cushionId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCushionId() {
      cushionId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetAwake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetAwake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Awake != other.Awake) return false;
      if (CushionId != other.CushionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasAwake) hash ^= Awake.GetHashCode();
      if (HasCushionId) hash ^= CushionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasAwake) {
        output.WriteRawTag(16);
        output.WriteBool(Awake);
      }
      if (HasCushionId) {
        output.WriteRawTag(26);
        output.WriteString(CushionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasAwake) {
        output.WriteRawTag(16);
        output.WriteBool(Awake);
      }
      if (HasCushionId) {
        output.WriteRawTag(26);
        output.WriteString(CushionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasAwake) {
        size += 1 + 1;
      }
      if (HasCushionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CushionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetAwake other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasAwake) {
        Awake = other.Awake;
      }
      if (other.HasCushionId) {
        CushionId = other.CushionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Awake = input.ReadBool();
            break;
          }
          case 26: {
            CushionId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Awake = input.ReadBool();
            break;
          }
          case 26: {
            CushionId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetTreat : pb::IMessage<CPetTreat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetTreat> _parser = new pb::MessageParser<CPetTreat>(() => new CPetTreat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetTreat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[303]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetTreat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetTreat(CPetTreat other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetTreat Clone() {
      return new CPetTreat(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetTreat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetTreat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetTreat other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetCare : pb::IMessage<CPetCare>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetCare> _parser = new pb::MessageParser<CPetCare>(() => new CPetCare());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetCare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[304]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetCare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetCare(CPetCare other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetCare Clone() {
      return new CPetCare(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetCare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetCare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetCare other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetWithPlaying : pb::IMessage<CPetWithPlaying>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetWithPlaying> _parser = new pb::MessageParser<CPetWithPlaying>(() => new CPetWithPlaying());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetWithPlaying> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[305]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetWithPlaying() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetWithPlaying(CPetWithPlaying other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetWithPlaying Clone() {
      return new CPetWithPlaying(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetWithPlaying);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetWithPlaying other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetWithPlaying other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetStatusUpdate : pb::IMessage<CPetStatusUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetStatusUpdate> _parser = new pb::MessageParser<CPetStatusUpdate>(() => new CPetStatusUpdate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[306]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetStatusUpdate(CPetStatusUpdate other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetStatusUpdate Clone() {
      return new CPetStatusUpdate(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetStatusUpdate other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetPutStatusUpdate : pb::IMessage<CPetPutStatusUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetPutStatusUpdate> _parser = new pb::MessageParser<CPetPutStatusUpdate>(() => new CPetPutStatusUpdate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetPutStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[307]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPutStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPutStatusUpdate(CPetPutStatusUpdate other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPutStatusUpdate Clone() {
      return new CPetPutStatusUpdate(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetPutStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetPutStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetPutStatusUpdate other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetUserAction : pb::IMessage<CPetUserAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetUserAction> _parser = new pb::MessageParser<CPetUserAction>(() => new CPetUserAction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetUserAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[308]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUserAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUserAction(CPetUserAction other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUserAction Clone() {
      return new CPetUserAction(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetUserAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetUserAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetUserAction other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetEatSnack : pb::IMessage<CPetEatSnack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetEatSnack> _parser = new pb::MessageParser<CPetEatSnack>(() => new CPetEatSnack());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetEatSnack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[309]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetEatSnack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetEatSnack(CPetEatSnack other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      petId_ = other.petId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetEatSnack Clone() {
      return new CPetEatSnack(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static string OidDefaultValue = "";

    private string oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oid {
      get { return oid_ ?? OidDefaultValue; }
      set {
        oid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return oid_ != null; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      oid_ = null;
    }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 2;
    private readonly static int PetIdDefaultValue = 0;

    private int petId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PetId {
      get { if ((_hasBits0 & 1) != 0) { return petId_; } else { return PetIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        petId_ = value;
      }
    }
    /// <summary>Gets whether the "petId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPetId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "petId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPetId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetEatSnack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetEatSnack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (PetId != other.PetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasPetId) hash ^= PetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(10);
        output.WriteString(Oid);
      }
      if (HasPetId) {
        output.WriteRawTag(16);
        output.WriteInt32(PetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(10);
        output.WriteString(Oid);
      }
      if (HasPetId) {
        output.WriteRawTag(16);
        output.WriteInt32(PetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oid);
      }
      if (HasPetId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetEatSnack other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasPetId) {
        PetId = other.PetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Oid = input.ReadString();
            break;
          }
          case 16: {
            PetId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Oid = input.ReadString();
            break;
          }
          case 16: {
            PetId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetRevertBeforeHp : pb::IMessage<CPetRevertBeforeHp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetRevertBeforeHp> _parser = new pb::MessageParser<CPetRevertBeforeHp>(() => new CPetRevertBeforeHp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetRevertBeforeHp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[310]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetRevertBeforeHp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetRevertBeforeHp(CPetRevertBeforeHp other) : this() {
      _hasBits0 = other._hasBits0;
      petId_ = other.petId_;
      oid_ = other.oid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetRevertBeforeHp Clone() {
      return new CPetRevertBeforeHp(this);
    }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private readonly static int PetIdDefaultValue = 0;

    private int petId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PetId {
      get { if ((_hasBits0 & 1) != 0) { return petId_; } else { return PetIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        petId_ = value;
      }
    }
    /// <summary>Gets whether the "petId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPetId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "petId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPetId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 2;
    private readonly static string OidDefaultValue = "";

    private string oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oid {
      get { return oid_ ?? OidDefaultValue; }
      set {
        oid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return oid_ != null; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      oid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetRevertBeforeHp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetRevertBeforeHp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PetId != other.PetId) return false;
      if (Oid != other.Oid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPetId) hash ^= PetId.GetHashCode();
      if (HasOid) hash ^= Oid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPetId) {
        output.WriteRawTag(8);
        output.WriteInt32(PetId);
      }
      if (HasOid) {
        output.WriteRawTag(18);
        output.WriteString(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPetId) {
        output.WriteRawTag(8);
        output.WriteInt32(PetId);
      }
      if (HasOid) {
        output.WriteRawTag(18);
        output.WriteString(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPetId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PetId);
      }
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetRevertBeforeHp other) {
      if (other == null) {
        return;
      }
      if (other.HasPetId) {
        PetId = other.PetId;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PetId = input.ReadInt32();
            break;
          }
          case 18: {
            Oid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PetId = input.ReadInt32();
            break;
          }
          case 18: {
            Oid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetReNaming : pb::IMessage<CPetReNaming>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetReNaming> _parser = new pb::MessageParser<CPetReNaming>(() => new CPetReNaming());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetReNaming> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[311]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetReNaming() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetReNaming(CPetReNaming other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetReNaming Clone() {
      return new CPetReNaming(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetReNaming);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetReNaming other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetReNaming other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyPetItem : pb::IMessage<CBuyPetItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyPetItem> _parser = new pb::MessageParser<CBuyPetItem>(() => new CBuyPetItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyPetItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[312]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPetItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPetItem(CBuyPetItem other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyPetItem Clone() {
      return new CBuyPetItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyPetItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyPetItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyPetItem other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CFillPetFeed : pb::IMessage<CFillPetFeed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CFillPetFeed> _parser = new pb::MessageParser<CFillPetFeed>(() => new CFillPetFeed());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CFillPetFeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[313]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFillPetFeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFillPetFeed(CFillPetFeed other) : this() {
      _hasBits0 = other._hasBits0;
      feedId_ = other.feedId_;
      feedCount_ = other.feedCount_;
      storeKey_ = other.storeKey_;
      bowlOid_ = other.bowlOid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CFillPetFeed Clone() {
      return new CFillPetFeed(this);
    }

    /// <summary>Field number for the "feedId" field.</summary>
    public const int FeedIdFieldNumber = 1;
    private readonly static string FeedIdDefaultValue = "";

    private string feedId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeedId {
      get { return feedId_ ?? FeedIdDefaultValue; }
      set {
        feedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "feedId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeedId {
      get { return feedId_ != null; }
    }
    /// <summary>Clears the value of the "feedId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeedId() {
      feedId_ = null;
    }

    /// <summary>Field number for the "feedCount" field.</summary>
    public const int FeedCountFieldNumber = 2;
    private readonly static int FeedCountDefaultValue = 0;

    private int feedCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeedCount {
      get { if ((_hasBits0 & 1) != 0) { return feedCount_; } else { return FeedCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        feedCount_ = value;
      }
    }
    /// <summary>Gets whether the "feedCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFeedCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "feedCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFeedCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bowlOid" field.</summary>
    public const int BowlOidFieldNumber = 4;
    private readonly static int BowlOidDefaultValue = 0;

    private int bowlOid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BowlOid {
      get { if ((_hasBits0 & 4) != 0) { return bowlOid_; } else { return BowlOidDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bowlOid_ = value;
      }
    }
    /// <summary>Gets whether the "bowlOid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBowlOid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bowlOid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBowlOid() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CFillPetFeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CFillPetFeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeedId != other.FeedId) return false;
      if (FeedCount != other.FeedCount) return false;
      if (StoreKey != other.StoreKey) return false;
      if (BowlOid != other.BowlOid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFeedId) hash ^= FeedId.GetHashCode();
      if (HasFeedCount) hash ^= FeedCount.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasBowlOid) hash ^= BowlOid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFeedId) {
        output.WriteRawTag(10);
        output.WriteString(FeedId);
      }
      if (HasFeedCount) {
        output.WriteRawTag(16);
        output.WriteInt32(FeedCount);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasBowlOid) {
        output.WriteRawTag(32);
        output.WriteInt32(BowlOid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFeedId) {
        output.WriteRawTag(10);
        output.WriteString(FeedId);
      }
      if (HasFeedCount) {
        output.WriteRawTag(16);
        output.WriteInt32(FeedCount);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasBowlOid) {
        output.WriteRawTag(32);
        output.WriteInt32(BowlOid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFeedId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeedId);
      }
      if (HasFeedCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeedCount);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasBowlOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BowlOid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CFillPetFeed other) {
      if (other == null) {
        return;
      }
      if (other.HasFeedId) {
        FeedId = other.FeedId;
      }
      if (other.HasFeedCount) {
        FeedCount = other.FeedCount;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasBowlOid) {
        BowlOid = other.BowlOid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FeedId = input.ReadString();
            break;
          }
          case 16: {
            FeedCount = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 32: {
            BowlOid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FeedId = input.ReadString();
            break;
          }
          case 16: {
            FeedCount = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 32: {
            BowlOid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CClearPetFeed : pb::IMessage<CClearPetFeed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CClearPetFeed> _parser = new pb::MessageParser<CClearPetFeed>(() => new CClearPetFeed());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CClearPetFeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[314]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CClearPetFeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CClearPetFeed(CClearPetFeed other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      bowlOid_ = other.bowlOid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CClearPetFeed Clone() {
      return new CClearPetFeed(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bowlOid" field.</summary>
    public const int BowlOidFieldNumber = 2;
    private readonly static int BowlOidDefaultValue = 0;

    private int bowlOid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BowlOid {
      get { if ((_hasBits0 & 2) != 0) { return bowlOid_; } else { return BowlOidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bowlOid_ = value;
      }
    }
    /// <summary>Gets whether the "bowlOid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBowlOid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bowlOid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBowlOid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CClearPetFeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CClearPetFeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (BowlOid != other.BowlOid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasBowlOid) hash ^= BowlOid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasBowlOid) {
        output.WriteRawTag(16);
        output.WriteInt32(BowlOid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasBowlOid) {
        output.WriteRawTag(16);
        output.WriteInt32(BowlOid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasBowlOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BowlOid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CClearPetFeed other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasBowlOid) {
        BowlOid = other.BowlOid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            BowlOid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            BowlOid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetEatFeed : pb::IMessage<CPetEatFeed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetEatFeed> _parser = new pb::MessageParser<CPetEatFeed>(() => new CPetEatFeed());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetEatFeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[315]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetEatFeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetEatFeed(CPetEatFeed other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      bowlOid_ = other.bowlOid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetEatFeed Clone() {
      return new CPetEatFeed(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bowlOid" field.</summary>
    public const int BowlOidFieldNumber = 2;
    private readonly static int BowlOidDefaultValue = 0;

    private int bowlOid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BowlOid {
      get { if ((_hasBits0 & 2) != 0) { return bowlOid_; } else { return BowlOidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bowlOid_ = value;
      }
    }
    /// <summary>Gets whether the "bowlOid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBowlOid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bowlOid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBowlOid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetEatFeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetEatFeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (BowlOid != other.BowlOid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasBowlOid) hash ^= BowlOid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasBowlOid) {
        output.WriteRawTag(16);
        output.WriteInt32(BowlOid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasBowlOid) {
        output.WriteRawTag(16);
        output.WriteInt32(BowlOid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasBowlOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BowlOid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetEatFeed other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasBowlOid) {
        BowlOid = other.BowlOid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            BowlOid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            BowlOid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetPlayWithObj : pb::IMessage<CPetPlayWithObj>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetPlayWithObj> _parser = new pb::MessageParser<CPetPlayWithObj>(() => new CPetPlayWithObj());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetPlayWithObj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[316]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPlayWithObj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPlayWithObj(CPetPlayWithObj other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPlayWithObj Clone() {
      return new CPetPlayWithObj(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 2) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetPlayWithObj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetPlayWithObj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetPlayWithObj other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetDressUp : pb::IMessage<CPetDressUp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetDressUp> _parser = new pb::MessageParser<CPetDressUp>(() => new CPetDressUp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetDressUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[317]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetDressUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetDressUp(CPetDressUp other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      parts_ = other.parts_.Clone();
      fromInvens_ = other.fromInvens_.Clone();
      isWearing_ = other.isWearing_.Clone();
      storeKey_ = other.storeKey_;
      cost_ = other.cost_;
      cash_ = other.cash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetDressUp Clone() {
      return new CPetDressUp(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "parts" field.</summary>
    public const int PartsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_parts_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> parts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Parts {
      get { return parts_; }
    }

    /// <summary>Field number for the "fromInvens" field.</summary>
    public const int FromInvensFieldNumber = 3;
    private static readonly pb::FieldCodec<bool> _repeated_fromInvens_codec
        = pb::FieldCodec.ForBool(24);
    private readonly pbc::RepeatedField<bool> fromInvens_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> FromInvens {
      get { return fromInvens_; }
    }

    /// <summary>Field number for the "isWearing" field.</summary>
    public const int IsWearingFieldNumber = 4;
    private static readonly pb::FieldCodec<bool> _repeated_isWearing_codec
        = pb::FieldCodec.ForBool(32);
    private readonly pbc::RepeatedField<bool> isWearing_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> IsWearing {
      get { return isWearing_; }
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 5;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 6;
    private readonly static int CostDefaultValue = 0;

    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { if ((_hasBits0 & 4) != 0) { return cost_; } else { return CostDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cost_ = value;
      }
    }
    /// <summary>Gets whether the "cost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCost {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 7;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 8) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetDressUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetDressUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if(!parts_.Equals(other.parts_)) return false;
      if(!fromInvens_.Equals(other.fromInvens_)) return false;
      if(!isWearing_.Equals(other.isWearing_)) return false;
      if (StoreKey != other.StoreKey) return false;
      if (Cost != other.Cost) return false;
      if (Cash != other.Cash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      hash ^= parts_.GetHashCode();
      hash ^= fromInvens_.GetHashCode();
      hash ^= isWearing_.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasCost) hash ^= Cost.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      parts_.WriteTo(output, _repeated_parts_codec);
      fromInvens_.WriteTo(output, _repeated_fromInvens_codec);
      isWearing_.WriteTo(output, _repeated_isWearing_codec);
      if (HasStoreKey) {
        output.WriteRawTag(40);
        output.WriteInt32(StoreKey);
      }
      if (HasCost) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (HasCash) {
        output.WriteRawTag(56);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      parts_.WriteTo(ref output, _repeated_parts_codec);
      fromInvens_.WriteTo(ref output, _repeated_fromInvens_codec);
      isWearing_.WriteTo(ref output, _repeated_isWearing_codec);
      if (HasStoreKey) {
        output.WriteRawTag(40);
        output.WriteInt32(StoreKey);
      }
      if (HasCost) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (HasCash) {
        output.WriteRawTag(56);
        output.WriteInt32(Cash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      size += parts_.CalculateSize(_repeated_parts_codec);
      size += fromInvens_.CalculateSize(_repeated_fromInvens_codec);
      size += isWearing_.CalculateSize(_repeated_isWearing_codec);
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasCost) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetDressUp other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      parts_.Add(other.parts_);
      fromInvens_.Add(other.fromInvens_);
      isWearing_.Add(other.isWearing_);
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            parts_.AddEntriesFrom(input, _repeated_parts_codec);
            break;
          }
          case 26:
          case 24: {
            fromInvens_.AddEntriesFrom(input, _repeated_fromInvens_codec);
            break;
          }
          case 34:
          case 32: {
            isWearing_.AddEntriesFrom(input, _repeated_isWearing_codec);
            break;
          }
          case 40: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            parts_.AddEntriesFrom(ref input, _repeated_parts_codec);
            break;
          }
          case 26:
          case 24: {
            fromInvens_.AddEntriesFrom(ref input, _repeated_fromInvens_codec);
            break;
          }
          case 34:
          case 32: {
            isWearing_.AddEntriesFrom(ref input, _repeated_isWearing_codec);
            break;
          }
          case 40: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            Cash = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetAdopt : pb::IMessage<CPetAdopt>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetAdopt> _parser = new pb::MessageParser<CPetAdopt>(() => new CPetAdopt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetAdopt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[318]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetAdopt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetAdopt(CPetAdopt other) : this() {
      kind_ = other.kind_;
      name_ = other.name_;
      gender_ = other.gender_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetAdopt Clone() {
      return new CPetAdopt(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private readonly static string KindDefaultValue = "";

    private string kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_ ?? KindDefaultValue; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return kind_ != null; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kind_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 3;
    private readonly static string GenderDefaultValue = "";

    private string gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gender {
      get { return gender_ ?? GenderDefaultValue; }
      set {
        gender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gender" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGender {
      get { return gender_ != null; }
    }
    /// <summary>Clears the value of the "gender" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGender() {
      gender_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetAdopt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetAdopt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Name != other.Name) return false;
      if (Gender != other.Gender) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasGender) hash ^= Gender.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasGender) {
        output.WriteRawTag(26);
        output.WriteString(Gender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKind) {
        output.WriteRawTag(10);
        output.WriteString(Kind);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasGender) {
        output.WriteRawTag(26);
        output.WriteString(Gender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasGender) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gender);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetAdopt other) {
      if (other == null) {
        return;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasGender) {
        Gender = other.Gender;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Gender = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Kind = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Gender = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetPut : pb::IMessage<CPetPut>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetPut> _parser = new pb::MessageParser<CPetPut>(() => new CPetPut());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetPut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[319]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPut(CPetPut other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPut Clone() {
      return new CPetPut(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 2) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetPut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetPut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasPrice) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasPrice) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetPut other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetCure : pb::IMessage<CPetCure>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetCure> _parser = new pb::MessageParser<CPetCure>(() => new CPetCure());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetCure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[320]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetCure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetCure(CPetCure other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      price_ = other.price_;
      isUseCash_ = other.isUseCash_;
      isImmediatelyCure_ = other.isImmediatelyCure_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetCure Clone() {
      return new CPetCure(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 2) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "isUseCash" field.</summary>
    public const int IsUseCashFieldNumber = 3;
    private readonly static bool IsUseCashDefaultValue = false;

    private bool isUseCash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUseCash {
      get { if ((_hasBits0 & 4) != 0) { return isUseCash_; } else { return IsUseCashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isUseCash_ = value;
      }
    }
    /// <summary>Gets whether the "isUseCash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsUseCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "isUseCash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsUseCash() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "isImmediatelyCure" field.</summary>
    public const int IsImmediatelyCureFieldNumber = 4;
    private readonly static bool IsImmediatelyCureDefaultValue = false;

    private bool isImmediatelyCure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsImmediatelyCure {
      get { if ((_hasBits0 & 8) != 0) { return isImmediatelyCure_; } else { return IsImmediatelyCureDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isImmediatelyCure_ = value;
      }
    }
    /// <summary>Gets whether the "isImmediatelyCure" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsImmediatelyCure {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "isImmediatelyCure" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsImmediatelyCure() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetCure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetCure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Price != other.Price) return false;
      if (IsUseCash != other.IsUseCash) return false;
      if (IsImmediatelyCure != other.IsImmediatelyCure) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (HasIsUseCash) hash ^= IsUseCash.GetHashCode();
      if (HasIsImmediatelyCure) hash ^= IsImmediatelyCure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasPrice) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (HasIsUseCash) {
        output.WriteRawTag(24);
        output.WriteBool(IsUseCash);
      }
      if (HasIsImmediatelyCure) {
        output.WriteRawTag(32);
        output.WriteBool(IsImmediatelyCure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasPrice) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (HasIsUseCash) {
        output.WriteRawTag(24);
        output.WriteBool(IsUseCash);
      }
      if (HasIsImmediatelyCure) {
        output.WriteRawTag(32);
        output.WriteBool(IsImmediatelyCure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (HasIsUseCash) {
        size += 1 + 1;
      }
      if (HasIsImmediatelyCure) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetCure other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.HasIsUseCash) {
        IsUseCash = other.IsUseCash;
      }
      if (other.HasIsImmediatelyCure) {
        IsImmediatelyCure = other.IsImmediatelyCure;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
          case 24: {
            IsUseCash = input.ReadBool();
            break;
          }
          case 32: {
            IsImmediatelyCure = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
          case 24: {
            IsUseCash = input.ReadBool();
            break;
          }
          case 32: {
            IsImmediatelyCure = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetTake : pb::IMessage<CPetTake>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetTake> _parser = new pb::MessageParser<CPetTake>(() => new CPetTake());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetTake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[321]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetTake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetTake(CPetTake other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetTake Clone() {
      return new CPetTake(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetTake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetTake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetTake other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetPutSizeExpand : pb::IMessage<CPetPutSizeExpand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetPutSizeExpand> _parser = new pb::MessageParser<CPetPutSizeExpand>(() => new CPetPutSizeExpand());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetPutSizeExpand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[322]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPutSizeExpand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPutSizeExpand(CPetPutSizeExpand other) : this() {
      _hasBits0 = other._hasBits0;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetPutSizeExpand Clone() {
      return new CPetPutSizeExpand(this);
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 1;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 1) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetPutSizeExpand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetPutSizeExpand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPrice) {
        output.WriteRawTag(8);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPrice) {
        output.WriteRawTag(8);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetPutSizeExpand other) {
      if (other == null) {
        return;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetChange : pb::IMessage<CPetChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetChange> _parser = new pb::MessageParser<CPetChange>(() => new CPetChange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[323]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetChange(CPetChange other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetChange Clone() {
      return new CPetChange(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private readonly static int TimeDefaultValue = 0;

    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { if ((_hasBits0 & 1) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 2) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (HasPrice) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (HasPrice) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetChange other) {
      if (other == null) {
        return;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetLearnSecondSkill : pb::IMessage<CPetLearnSecondSkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetLearnSecondSkill> _parser = new pb::MessageParser<CPetLearnSecondSkill>(() => new CPetLearnSecondSkill());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetLearnSecondSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[324]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetLearnSecondSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetLearnSecondSkill(CPetLearnSecondSkill other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetLearnSecondSkill Clone() {
      return new CPetLearnSecondSkill(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetLearnSecondSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetLearnSecondSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetLearnSecondSkill other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetSkillChange : pb::IMessage<CPetSkillChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetSkillChange> _parser = new pb::MessageParser<CPetSkillChange>(() => new CPetSkillChange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetSkillChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[325]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetSkillChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetSkillChange(CPetSkillChange other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      slotIndex_ = other.slotIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetSkillChange Clone() {
      return new CPetSkillChange(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "slotIndex" field.</summary>
    public const int SlotIndexFieldNumber = 2;
    private readonly static int SlotIndexDefaultValue = 0;

    private int slotIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotIndex {
      get { if ((_hasBits0 & 2) != 0) { return slotIndex_; } else { return SlotIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        slotIndex_ = value;
      }
    }
    /// <summary>Gets whether the "slotIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "slotIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotIndex() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetSkillChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetSkillChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (SlotIndex != other.SlotIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasSlotIndex) hash ^= SlotIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasSlotIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasSlotIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasSlotIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetSkillChange other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasSlotIndex) {
        SlotIndex = other.SlotIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            SlotIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            SlotIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetUseSkill : pb::IMessage<CPetUseSkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetUseSkill> _parser = new pb::MessageParser<CPetUseSkill>(() => new CPetUseSkill());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[326]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkill(CPetUseSkill other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      oid_ = other.oid_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkill Clone() {
      return new CPetUseSkill(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 2;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 2) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private readonly static string SkillIdDefaultValue = "";

    private string skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillId {
      get { return skillId_ ?? SkillIdDefaultValue; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "skillId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillId {
      get { return skillId_ != null; }
    }
    /// <summary>Clears the value of the "skillId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillId() {
      skillId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (Oid != other.Oid) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasSkillId) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasOid) {
        output.WriteRawTag(16);
        output.WriteInt32(Oid);
      }
      if (HasSkillId) {
        output.WriteRawTag(26);
        output.WriteString(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasOid) {
        output.WriteRawTag(16);
        output.WriteInt32(Oid);
      }
      if (HasSkillId) {
        output.WriteRawTag(26);
        output.WriteString(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasSkillId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetUseSkill other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Oid = input.ReadInt32();
            break;
          }
          case 26: {
            SkillId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Oid = input.ReadInt32();
            break;
          }
          case 26: {
            SkillId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetUseSkillGetResource : pb::IMessage<CPetUseSkillGetResource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetUseSkillGetResource> _parser = new pb::MessageParser<CPetUseSkillGetResource>(() => new CPetUseSkillGetResource());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetUseSkillGetResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[327]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkillGetResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkillGetResource(CPetUseSkillGetResource other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkillGetResource Clone() {
      return new CPetUseSkillGetResource(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private readonly static string SkillIdDefaultValue = "";

    private string skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillId {
      get { return skillId_ ?? SkillIdDefaultValue; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "skillId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillId {
      get { return skillId_ != null; }
    }
    /// <summary>Clears the value of the "skillId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillId() {
      skillId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetUseSkillGetResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetUseSkillGetResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasSkillId) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasSkillId) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasSkillId) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasSkillId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetUseSkillGetResource other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPetUseSkillToutHint : pb::IMessage<CPetUseSkillToutHint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPetUseSkillToutHint> _parser = new pb::MessageParser<CPetUseSkillToutHint>(() => new CPetUseSkillToutHint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPetUseSkillToutHint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[328]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkillToutHint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkillToutHint(CPetUseSkillToutHint other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPetUseSkillToutHint Clone() {
      return new CPetUseSkillToutHint(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private readonly static string SkillIdDefaultValue = "";

    private string skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillId {
      get { return skillId_ ?? SkillIdDefaultValue; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "skillId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillId {
      get { return skillId_ != null; }
    }
    /// <summary>Clears the value of the "skillId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillId() {
      skillId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPetUseSkillToutHint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPetUseSkillToutHint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasSkillId) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasSkillId) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasSkillId) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasSkillId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPetUseSkillToutHint other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUseCherryRoulette : pb::IMessage<CUseCherryRoulette>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUseCherryRoulette> _parser = new pb::MessageParser<CUseCherryRoulette>(() => new CUseCherryRoulette());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUseCherryRoulette> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[329]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseCherryRoulette() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseCherryRoulette(CUseCherryRoulette other) : this() {
      _hasBits0 = other._hasBits0;
      useFree_ = other.useFree_;
      forced_ = other.forced_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseCherryRoulette Clone() {
      return new CUseCherryRoulette(this);
    }

    /// <summary>Field number for the "useFree" field.</summary>
    public const int UseFreeFieldNumber = 1;
    private readonly static bool UseFreeDefaultValue = false;

    private bool useFree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseFree {
      get { if ((_hasBits0 & 1) != 0) { return useFree_; } else { return UseFreeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        useFree_ = value;
      }
    }
    /// <summary>Gets whether the "useFree" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseFree {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "useFree" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseFree() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "forced" field.</summary>
    public const int ForcedFieldNumber = 2;
    private readonly static bool ForcedDefaultValue = false;

    private bool forced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Forced {
      get { if ((_hasBits0 & 2) != 0) { return forced_; } else { return ForcedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        forced_ = value;
      }
    }
    /// <summary>Gets whether the "forced" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForced {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "forced" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForced() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUseCherryRoulette);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUseCherryRoulette other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseFree != other.UseFree) return false;
      if (Forced != other.Forced) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUseFree) hash ^= UseFree.GetHashCode();
      if (HasForced) hash ^= Forced.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUseFree) {
        output.WriteRawTag(8);
        output.WriteBool(UseFree);
      }
      if (HasForced) {
        output.WriteRawTag(16);
        output.WriteBool(Forced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUseFree) {
        output.WriteRawTag(8);
        output.WriteBool(UseFree);
      }
      if (HasForced) {
        output.WriteRawTag(16);
        output.WriteBool(Forced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUseFree) {
        size += 1 + 1;
      }
      if (HasForced) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUseCherryRoulette other) {
      if (other == null) {
        return;
      }
      if (other.HasUseFree) {
        UseFree = other.UseFree;
      }
      if (other.HasForced) {
        Forced = other.Forced;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseFree = input.ReadBool();
            break;
          }
          case 16: {
            Forced = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UseFree = input.ReadBool();
            break;
          }
          case 16: {
            Forced = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyRouletteBean : pb::IMessage<CBuyRouletteBean>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyRouletteBean> _parser = new pb::MessageParser<CBuyRouletteBean>(() => new CBuyRouletteBean());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyRouletteBean> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[330]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyRouletteBean() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyRouletteBean(CBuyRouletteBean other) : this() {
      _hasBits0 = other._hasBits0;
      buffIndex_ = other.buffIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyRouletteBean Clone() {
      return new CBuyRouletteBean(this);
    }

    /// <summary>Field number for the "buffIndex" field.</summary>
    public const int BuffIndexFieldNumber = 1;
    private readonly static int BuffIndexDefaultValue = 0;

    private int buffIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffIndex {
      get { if ((_hasBits0 & 1) != 0) { return buffIndex_; } else { return BuffIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        buffIndex_ = value;
      }
    }
    /// <summary>Gets whether the "buffIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuffIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "buffIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuffIndex() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyRouletteBean);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyRouletteBean other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffIndex != other.BuffIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBuffIndex) hash ^= BuffIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBuffIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBuffIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBuffIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyRouletteBean other) {
      if (other == null) {
        return;
      }
      if (other.HasBuffIndex) {
        BuffIndex = other.BuffIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuffIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BuffIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSetCalendarGMT : pb::IMessage<CSetCalendarGMT>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSetCalendarGMT> _parser = new pb::MessageParser<CSetCalendarGMT>(() => new CSetCalendarGMT());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSetCalendarGMT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[331]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSetCalendarGMT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSetCalendarGMT(CSetCalendarGMT other) : this() {
      _hasBits0 = other._hasBits0;
      gMT_ = other.gMT_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSetCalendarGMT Clone() {
      return new CSetCalendarGMT(this);
    }

    /// <summary>Field number for the "GMT" field.</summary>
    public const int GMTFieldNumber = 1;
    private readonly static int GMTDefaultValue = 0;

    private int gMT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMT {
      get { if ((_hasBits0 & 1) != 0) { return gMT_; } else { return GMTDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gMT_ = value;
      }
    }
    /// <summary>Gets whether the "GMT" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGMT {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "GMT" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGMT() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSetCalendarGMT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSetCalendarGMT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GMT != other.GMT) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGMT) hash ^= GMT.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGMT) {
        output.WriteRawTag(8);
        output.WriteInt32(GMT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGMT) {
        output.WriteRawTag(8);
        output.WriteInt32(GMT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGMT) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMT);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSetCalendarGMT other) {
      if (other == null) {
        return;
      }
      if (other.HasGMT) {
        GMT = other.GMT;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GMT = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GMT = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CUseJukebox : pb::IMessage<CUseJukebox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CUseJukebox> _parser = new pb::MessageParser<CUseJukebox>(() => new CUseJukebox());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CUseJukebox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[332]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseJukebox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseJukebox(CUseJukebox other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      use_ = other.use_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CUseJukebox Clone() {
      return new CUseJukebox(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "use" field.</summary>
    public const int UseFieldNumber = 2;
    private readonly static bool UseDefaultValue = false;

    private bool use_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Use {
      get { if ((_hasBits0 & 2) != 0) { return use_; } else { return UseDefaultValue; } }
      set {
        _hasBits0 |= 2;
        use_ = value;
      }
    }
    /// <summary>Gets whether the "use" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUse {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "use" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUse() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CUseJukebox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CUseJukebox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (Use != other.Use) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasUse) hash ^= Use.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasUse) {
        output.WriteRawTag(16);
        output.WriteBool(Use);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasUse) {
        output.WriteRawTag(16);
        output.WriteBool(Use);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasUse) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CUseJukebox other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasUse) {
        Use = other.Use;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Use = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 16: {
            Use = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CRefreshDaisoItem : pb::IMessage<CRefreshDaisoItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CRefreshDaisoItem> _parser = new pb::MessageParser<CRefreshDaisoItem>(() => new CRefreshDaisoItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CRefreshDaisoItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[333]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRefreshDaisoItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRefreshDaisoItem(CRefreshDaisoItem other) : this() {
      _hasBits0 = other._hasBits0;
      instant_ = other.instant_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CRefreshDaisoItem Clone() {
      return new CRefreshDaisoItem(this);
    }

    /// <summary>Field number for the "instant" field.</summary>
    public const int InstantFieldNumber = 1;
    private readonly static bool InstantDefaultValue = false;

    private bool instant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Instant {
      get { if ((_hasBits0 & 1) != 0) { return instant_; } else { return InstantDefaultValue; } }
      set {
        _hasBits0 |= 1;
        instant_ = value;
      }
    }
    /// <summary>Gets whether the "instant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInstant {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "instant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInstant() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CRefreshDaisoItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CRefreshDaisoItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Instant != other.Instant) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasInstant) hash ^= Instant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasInstant) {
        output.WriteRawTag(8);
        output.WriteBool(Instant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasInstant) {
        output.WriteRawTag(8);
        output.WriteBool(Instant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasInstant) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CRefreshDaisoItem other) {
      if (other == null) {
        return;
      }
      if (other.HasInstant) {
        Instant = other.Instant;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Instant = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Instant = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyDaisoItem : pb::IMessage<CBuyDaisoItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyDaisoItem> _parser = new pb::MessageParser<CBuyDaisoItem>(() => new CBuyDaisoItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyDaisoItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[334]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyDaisoItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyDaisoItem(CBuyDaisoItem other) : this() {
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyDaisoItem Clone() {
      return new CBuyDaisoItem(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyDaisoItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyDaisoItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasItemId) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasItemId) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyDaisoItem other) {
      if (other == null) {
        return;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CBuyOpenLuckyBox : pb::IMessage<CBuyOpenLuckyBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CBuyOpenLuckyBox> _parser = new pb::MessageParser<CBuyOpenLuckyBox>(() => new CBuyOpenLuckyBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBuyOpenLuckyBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[335]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyOpenLuckyBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyOpenLuckyBox(CBuyOpenLuckyBox other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBuyOpenLuckyBox Clone() {
      return new CBuyOpenLuckyBox(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBuyOpenLuckyBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBuyOpenLuckyBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBuyOpenLuckyBox other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryRoasting : pb::IMessage<CCherryRoasting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryRoasting> _parser = new pb::MessageParser<CCherryRoasting>(() => new CCherryRoasting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryRoasting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[336]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoasting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoasting(CCherryRoasting other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      descId_ = other.descId_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoasting Clone() {
      return new CCherryRoasting(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 2;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryRoasting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryRoasting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (DescId != other.DescId) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasDescId) {
        output.WriteRawTag(18);
        output.WriteString(DescId);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryRoasting other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 18: {
            DescId = input.ReadString();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryRoastFin : pb::IMessage<CCherryRoastFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryRoastFin> _parser = new pb::MessageParser<CCherryRoastFin>(() => new CCherryRoastFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryRoastFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[337]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastFin(CCherryRoastFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      oneClick_ = other.oneClick_;
      trashBean_ = other.trashBean_;
      storeKey_ = other.storeKey_;
      descId_ = other.descId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastFin Clone() {
      return new CCherryRoastFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "oneClick" field.</summary>
    public const int OneClickFieldNumber = 2;
    private readonly static bool OneClickDefaultValue = false;

    private bool oneClick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OneClick {
      get { if ((_hasBits0 & 2) != 0) { return oneClick_; } else { return OneClickDefaultValue; } }
      set {
        _hasBits0 |= 2;
        oneClick_ = value;
      }
    }
    /// <summary>Gets whether the "oneClick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOneClick {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "oneClick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneClick() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trashBean" field.</summary>
    public const int TrashBeanFieldNumber = 3;
    private readonly static int TrashBeanDefaultValue = 0;

    private int trashBean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrashBean {
      get { if ((_hasBits0 & 4) != 0) { return trashBean_; } else { return TrashBeanDefaultValue; } }
      set {
        _hasBits0 |= 4;
        trashBean_ = value;
      }
    }
    /// <summary>Gets whether the "trashBean" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrashBean {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trashBean" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrashBean() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 5;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryRoastFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryRoastFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (OneClick != other.OneClick) return false;
      if (TrashBean != other.TrashBean) return false;
      if (StoreKey != other.StoreKey) return false;
      if (DescId != other.DescId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasOneClick) hash ^= OneClick.GetHashCode();
      if (HasTrashBean) hash ^= TrashBean.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasOneClick) {
        output.WriteRawTag(16);
        output.WriteBool(OneClick);
      }
      if (HasTrashBean) {
        output.WriteRawTag(24);
        output.WriteInt32(TrashBean);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (HasDescId) {
        output.WriteRawTag(42);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasOneClick) {
        output.WriteRawTag(16);
        output.WriteBool(OneClick);
      }
      if (HasTrashBean) {
        output.WriteRawTag(24);
        output.WriteInt32(TrashBean);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (HasDescId) {
        output.WriteRawTag(42);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasOneClick) {
        size += 1 + 1;
      }
      if (HasTrashBean) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrashBean);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryRoastFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasOneClick) {
        OneClick = other.OneClick;
      }
      if (other.HasTrashBean) {
        TrashBean = other.TrashBean;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            OneClick = input.ReadBool();
            break;
          }
          case 24: {
            TrashBean = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 42: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            OneClick = input.ReadBool();
            break;
          }
          case 24: {
            TrashBean = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 42: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryRoastRevive : pb::IMessage<CCherryRoastRevive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryRoastRevive> _parser = new pb::MessageParser<CCherryRoastRevive>(() => new CCherryRoastRevive());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryRoastRevive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[338]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastRevive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastRevive(CCherryRoastRevive other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      descId_ = other.descId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastRevive Clone() {
      return new CCherryRoastRevive(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 3;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryRoastRevive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryRoastRevive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      if (DescId != other.DescId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasDescId) {
        output.WriteRawTag(26);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasDescId) {
        output.WriteRawTag(26);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryRoastRevive other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryRoastShorten : pb::IMessage<CCherryRoastShorten>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryRoastShorten> _parser = new pb::MessageParser<CCherryRoastShorten>(() => new CCherryRoastShorten());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryRoastShorten> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[339]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastShorten() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastShorten(CCherryRoastShorten other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      leftSec_ = other.leftSec_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      descId_ = other.descId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastShorten Clone() {
      return new CCherryRoastShorten(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leftSec" field.</summary>
    public const int LeftSecFieldNumber = 2;
    private readonly static int LeftSecDefaultValue = 0;

    private int leftSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSec {
      get { if ((_hasBits0 & 2) != 0) { return leftSec_; } else { return LeftSecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        leftSec_ = value;
      }
    }
    /// <summary>Gets whether the "leftSec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftSec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "leftSec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftSec() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 3;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 4) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 4;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 8) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 5;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryRoastShorten);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryRoastShorten other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (LeftSec != other.LeftSec) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      if (DescId != other.DescId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasLeftSec) hash ^= LeftSec.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasLeftSec) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSec);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (HasDescId) {
        output.WriteRawTag(42);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasLeftSec) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSec);
      }
      if (HasCash) {
        output.WriteRawTag(24);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(32);
        output.WriteInt32(StoreKey);
      }
      if (HasDescId) {
        output.WriteRawTag(42);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasLeftSec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSec);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryRoastShorten other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasLeftSec) {
        LeftSec = other.LeftSec;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 42: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 24: {
            Cash = input.ReadInt32();
            break;
          }
          case 32: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 42: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CThemaCollectionListPointGet : pb::IMessage<CThemaCollectionListPointGet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThemaCollectionListPointGet> _parser = new pb::MessageParser<CThemaCollectionListPointGet>(() => new CThemaCollectionListPointGet());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThemaCollectionListPointGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[340]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionListPointGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionListPointGet(CThemaCollectionListPointGet other) : this() {
      _hasBits0 = other._hasBits0;
      order_ = other.order_;
      collectionId_ = other.collectionId_;
      collectionType_ = other.collectionType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionListPointGet Clone() {
      return new CThemaCollectionListPointGet(this);
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 1;
    private readonly static int OrderDefaultValue = 0;

    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { if ((_hasBits0 & 1) != 0) { return order_; } else { return OrderDefaultValue; } }
      set {
        _hasBits0 |= 1;
        order_ = value;
      }
    }
    /// <summary>Gets whether the "order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrder {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrder() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "collectionId" field.</summary>
    public const int CollectionIdFieldNumber = 2;
    private readonly static string CollectionIdDefaultValue = "";

    private string collectionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollectionId {
      get { return collectionId_ ?? CollectionIdDefaultValue; }
      set {
        collectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "collectionId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollectionId {
      get { return collectionId_ != null; }
    }
    /// <summary>Clears the value of the "collectionId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollectionId() {
      collectionId_ = null;
    }

    /// <summary>Field number for the "collectionType" field.</summary>
    public const int CollectionTypeFieldNumber = 3;
    private readonly static int CollectionTypeDefaultValue = 0;

    private int collectionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollectionType {
      get { if ((_hasBits0 & 2) != 0) { return collectionType_; } else { return CollectionTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        collectionType_ = value;
      }
    }
    /// <summary>Gets whether the "collectionType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollectionType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "collectionType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollectionType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThemaCollectionListPointGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThemaCollectionListPointGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Order != other.Order) return false;
      if (CollectionId != other.CollectionId) return false;
      if (CollectionType != other.CollectionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOrder) hash ^= Order.GetHashCode();
      if (HasCollectionId) hash ^= CollectionId.GetHashCode();
      if (HasCollectionType) hash ^= CollectionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOrder) {
        output.WriteRawTag(8);
        output.WriteInt32(Order);
      }
      if (HasCollectionId) {
        output.WriteRawTag(18);
        output.WriteString(CollectionId);
      }
      if (HasCollectionType) {
        output.WriteRawTag(24);
        output.WriteInt32(CollectionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOrder) {
        output.WriteRawTag(8);
        output.WriteInt32(Order);
      }
      if (HasCollectionId) {
        output.WriteRawTag(18);
        output.WriteString(CollectionId);
      }
      if (HasCollectionType) {
        output.WriteRawTag(24);
        output.WriteInt32(CollectionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOrder) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      if (HasCollectionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectionId);
      }
      if (HasCollectionType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollectionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThemaCollectionListPointGet other) {
      if (other == null) {
        return;
      }
      if (other.HasOrder) {
        Order = other.Order;
      }
      if (other.HasCollectionId) {
        CollectionId = other.CollectionId;
      }
      if (other.HasCollectionType) {
        CollectionType = other.CollectionType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Order = input.ReadInt32();
            break;
          }
          case 18: {
            CollectionId = input.ReadString();
            break;
          }
          case 24: {
            CollectionType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Order = input.ReadInt32();
            break;
          }
          case 18: {
            CollectionId = input.ReadString();
            break;
          }
          case 24: {
            CollectionType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CThemaCollectionRewardGet : pb::IMessage<CThemaCollectionRewardGet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThemaCollectionRewardGet> _parser = new pb::MessageParser<CThemaCollectionRewardGet>(() => new CThemaCollectionRewardGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThemaCollectionRewardGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[341]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionRewardGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionRewardGet(CThemaCollectionRewardGet other) : this() {
      rewardIdList_ = other.rewardIdList_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionRewardGet Clone() {
      return new CThemaCollectionRewardGet(this);
    }

    /// <summary>Field number for the "rewardIdList" field.</summary>
    public const int RewardIdListFieldNumber = 1;
    private readonly static string RewardIdListDefaultValue = "";

    private string rewardIdList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardIdList {
      get { return rewardIdList_ ?? RewardIdListDefaultValue; }
      set {
        rewardIdList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rewardIdList" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRewardIdList {
      get { return rewardIdList_ != null; }
    }
    /// <summary>Clears the value of the "rewardIdList" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRewardIdList() {
      rewardIdList_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThemaCollectionRewardGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThemaCollectionRewardGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RewardIdList != other.RewardIdList) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRewardIdList) hash ^= RewardIdList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRewardIdList) {
        output.WriteRawTag(10);
        output.WriteString(RewardIdList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRewardIdList) {
        output.WriteRawTag(10);
        output.WriteString(RewardIdList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRewardIdList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardIdList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThemaCollectionRewardGet other) {
      if (other == null) {
        return;
      }
      if (other.HasRewardIdList) {
        RewardIdList = other.RewardIdList;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RewardIdList = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RewardIdList = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CThemaCollectionQuestCheck : pb::IMessage<CThemaCollectionQuestCheck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CThemaCollectionQuestCheck> _parser = new pb::MessageParser<CThemaCollectionQuestCheck>(() => new CThemaCollectionQuestCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CThemaCollectionQuestCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[342]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionQuestCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionQuestCheck(CThemaCollectionQuestCheck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CThemaCollectionQuestCheck Clone() {
      return new CThemaCollectionQuestCheck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CThemaCollectionQuestCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CThemaCollectionQuestCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CThemaCollectionQuestCheck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CCherryRoastCancel : pb::IMessage<CCherryRoastCancel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCherryRoastCancel> _parser = new pb::MessageParser<CCherryRoastCancel>(() => new CCherryRoastCancel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCherryRoastCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[343]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastCancel(CCherryRoastCancel other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      descId_ = other.descId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCherryRoastCancel Clone() {
      return new CCherryRoastCancel(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 3;
    private readonly static string DescIdDefaultValue = "";

    private string descId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescId {
      get { return descId_ ?? DescIdDefaultValue; }
      set {
        descId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "descId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescId {
      get { return descId_ != null; }
    }
    /// <summary>Clears the value of the "descId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescId() {
      descId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCherryRoastCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCherryRoastCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      if (DescId != other.DescId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasDescId) hash ^= DescId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasDescId) {
        output.WriteRawTag(26);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (HasDescId) {
        output.WriteRawTag(26);
        output.WriteString(DescId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasDescId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCherryRoastCancel other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasDescId) {
        DescId = other.DescId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            DescId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSpecialOrderClear : pb::IMessage<CSpecialOrderClear>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSpecialOrderClear> _parser = new pb::MessageParser<CSpecialOrderClear>(() => new CSpecialOrderClear());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSpecialOrderClear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[344]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialOrderClear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialOrderClear(CSpecialOrderClear other) : this() {
      _hasBits0 = other._hasBits0;
      idx_ = other.idx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialOrderClear Clone() {
      return new CSpecialOrderClear(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private readonly static int IdxDefaultValue = 0;

    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { if ((_hasBits0 & 1) != 0) { return idx_; } else { return IdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        idx_ = value;
      }
    }
    /// <summary>Gets whether the "idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdx() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSpecialOrderClear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSpecialOrderClear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIdx) hash ^= Idx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSpecialOrderClear other) {
      if (other == null) {
        return;
      }
      if (other.HasIdx) {
        Idx = other.Idx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSpeicalOrderCancel : pb::IMessage<CSpeicalOrderCancel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSpeicalOrderCancel> _parser = new pb::MessageParser<CSpeicalOrderCancel>(() => new CSpeicalOrderCancel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSpeicalOrderCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[345]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpeicalOrderCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpeicalOrderCancel(CSpeicalOrderCancel other) : this() {
      _hasBits0 = other._hasBits0;
      idx_ = other.idx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpeicalOrderCancel Clone() {
      return new CSpeicalOrderCancel(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private readonly static int IdxDefaultValue = 0;

    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { if ((_hasBits0 & 1) != 0) { return idx_; } else { return IdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        idx_ = value;
      }
    }
    /// <summary>Gets whether the "idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdx() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSpeicalOrderCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSpeicalOrderCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIdx) hash ^= Idx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSpeicalOrderCancel other) {
      if (other == null) {
        return;
      }
      if (other.HasIdx) {
        Idx = other.Idx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSpecialOrderRenew : pb::IMessage<CSpecialOrderRenew>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSpecialOrderRenew> _parser = new pb::MessageParser<CSpecialOrderRenew>(() => new CSpecialOrderRenew());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSpecialOrderRenew> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[346]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialOrderRenew() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialOrderRenew(CSpecialOrderRenew other) : this() {
      _hasBits0 = other._hasBits0;
      idx_ = other.idx_;
      needCash_ = other.needCash_;
      remainTime_ = other.remainTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialOrderRenew Clone() {
      return new CSpecialOrderRenew(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private readonly static int IdxDefaultValue = 0;

    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { if ((_hasBits0 & 1) != 0) { return idx_; } else { return IdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        idx_ = value;
      }
    }
    /// <summary>Gets whether the "idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdx() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "needCash" field.</summary>
    public const int NeedCashFieldNumber = 2;
    private readonly static int NeedCashDefaultValue = 0;

    private int needCash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedCash {
      get { if ((_hasBits0 & 2) != 0) { return needCash_; } else { return NeedCashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        needCash_ = value;
      }
    }
    /// <summary>Gets whether the "needCash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNeedCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "needCash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNeedCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "remainTime" field.</summary>
    public const int RemainTimeFieldNumber = 3;
    private readonly static int RemainTimeDefaultValue = 0;

    private int remainTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { if ((_hasBits0 & 4) != 0) { return remainTime_; } else { return RemainTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        remainTime_ = value;
      }
    }
    /// <summary>Gets whether the "remainTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRemainTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "remainTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRemainTime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSpecialOrderRenew);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSpecialOrderRenew other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      if (NeedCash != other.NeedCash) return false;
      if (RemainTime != other.RemainTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIdx) hash ^= Idx.GetHashCode();
      if (HasNeedCash) hash ^= NeedCash.GetHashCode();
      if (HasRemainTime) hash ^= RemainTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (HasNeedCash) {
        output.WriteRawTag(16);
        output.WriteInt32(NeedCash);
      }
      if (HasRemainTime) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (HasNeedCash) {
        output.WriteRawTag(16);
        output.WriteInt32(NeedCash);
      }
      if (HasRemainTime) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (HasNeedCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedCash);
      }
      if (HasRemainTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSpecialOrderRenew other) {
      if (other == null) {
        return;
      }
      if (other.HasIdx) {
        Idx = other.Idx;
      }
      if (other.HasNeedCash) {
        NeedCash = other.NeedCash;
      }
      if (other.HasRemainTime) {
        RemainTime = other.RemainTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
          case 16: {
            NeedCash = input.ReadInt32();
            break;
          }
          case 24: {
            RemainTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
          case 16: {
            NeedCash = input.ReadInt32();
            break;
          }
          case 24: {
            RemainTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCashUseCashCheck : pb::IMessage<CCashUseCashCheck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCashUseCashCheck> _parser = new pb::MessageParser<CCashUseCashCheck>(() => new CCashUseCashCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCashUseCashCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[347]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashUseCashCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashUseCashCheck(CCashUseCashCheck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashUseCashCheck Clone() {
      return new CCashUseCashCheck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCashUseCashCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCashUseCashCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCashUseCashCheck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CCashUseRewardGet : pb::IMessage<CCashUseRewardGet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCashUseRewardGet> _parser = new pb::MessageParser<CCashUseRewardGet>(() => new CCashUseRewardGet());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCashUseRewardGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[348]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashUseRewardGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashUseRewardGet(CCashUseRewardGet other) : this() {
      _hasBits0 = other._hasBits0;
      rowId_ = other.rowId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCashUseRewardGet Clone() {
      return new CCashUseRewardGet(this);
    }

    /// <summary>Field number for the "rowId" field.</summary>
    public const int RowIdFieldNumber = 1;
    private readonly static int RowIdDefaultValue = 0;

    private int rowId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RowId {
      get { if ((_hasBits0 & 1) != 0) { return rowId_; } else { return RowIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rowId_ = value;
      }
    }
    /// <summary>Gets whether the "rowId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRowId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rowId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRowId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCashUseRewardGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCashUseRewardGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowId != other.RowId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRowId) hash ^= RowId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRowId) {
        output.WriteRawTag(8);
        output.WriteInt32(RowId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRowId) {
        output.WriteRawTag(8);
        output.WriteInt32(RowId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRowId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCashUseRewardGet other) {
      if (other == null) {
        return;
      }
      if (other.HasRowId) {
        RowId = other.RowId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RowId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RowId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSpecialPackage : pb::IMessage<CSpecialPackage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSpecialPackage> _parser = new pb::MessageParser<CSpecialPackage>(() => new CSpecialPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSpecialPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[349]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialPackage(CSpecialPackage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSpecialPackage Clone() {
      return new CSpecialPackage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSpecialPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSpecialPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSpecialPackage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CLvUpShopBuy : pb::IMessage<CLvUpShopBuy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLvUpShopBuy> _parser = new pb::MessageParser<CLvUpShopBuy>(() => new CLvUpShopBuy());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLvUpShopBuy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[350]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLvUpShopBuy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLvUpShopBuy(CLvUpShopBuy other) : this() {
      _hasBits0 = other._hasBits0;
      shopKey_ = other.shopKey_;
      idx_ = other.idx_;
      storeKey_ = other.storeKey_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLvUpShopBuy Clone() {
      return new CLvUpShopBuy(this);
    }

    /// <summary>Field number for the "shopKey" field.</summary>
    public const int ShopKeyFieldNumber = 1;
    private readonly static string ShopKeyDefaultValue = "";

    private string shopKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShopKey {
      get { return shopKey_ ?? ShopKeyDefaultValue; }
      set {
        shopKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shopKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShopKey {
      get { return shopKey_ != null; }
    }
    /// <summary>Clears the value of the "shopKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShopKey() {
      shopKey_ = null;
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 2;
    private readonly static int IdxDefaultValue = 0;

    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { if ((_hasBits0 & 1) != 0) { return idx_; } else { return IdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        idx_ = value;
      }
    }
    /// <summary>Gets whether the "idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdx() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 4;
    private readonly static string ItemIdDefaultValue = "";

    private string itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_ ?? ItemIdDefaultValue; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "itemId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemId {
      get { return itemId_ != null; }
    }
    /// <summary>Clears the value of the "itemId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemId() {
      itemId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLvUpShopBuy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLvUpShopBuy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopKey != other.ShopKey) return false;
      if (Idx != other.Idx) return false;
      if (StoreKey != other.StoreKey) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasShopKey) hash ^= ShopKey.GetHashCode();
      if (HasIdx) hash ^= Idx.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasItemId) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasShopKey) {
        output.WriteRawTag(10);
        output.WriteString(ShopKey);
      }
      if (HasIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(Idx);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasItemId) {
        output.WriteRawTag(34);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasShopKey) {
        output.WriteRawTag(10);
        output.WriteString(ShopKey);
      }
      if (HasIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(Idx);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (HasItemId) {
        output.WriteRawTag(34);
        output.WriteString(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasShopKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopKey);
      }
      if (HasIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasItemId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLvUpShopBuy other) {
      if (other == null) {
        return;
      }
      if (other.HasShopKey) {
        ShopKey = other.ShopKey;
      }
      if (other.HasIdx) {
        Idx = other.Idx;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ShopKey = input.ReadString();
            break;
          }
          case 16: {
            Idx = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 34: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ShopKey = input.ReadString();
            break;
          }
          case 16: {
            Idx = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 34: {
            ItemId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CLvUpShopPurchaseItemBuyCheck : pb::IMessage<CLvUpShopPurchaseItemBuyCheck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLvUpShopPurchaseItemBuyCheck> _parser = new pb::MessageParser<CLvUpShopPurchaseItemBuyCheck>(() => new CLvUpShopPurchaseItemBuyCheck());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLvUpShopPurchaseItemBuyCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[351]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLvUpShopPurchaseItemBuyCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLvUpShopPurchaseItemBuyCheck(CLvUpShopPurchaseItemBuyCheck other) : this() {
      _hasBits0 = other._hasBits0;
      shopKey_ = other.shopKey_;
      idx_ = other.idx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLvUpShopPurchaseItemBuyCheck Clone() {
      return new CLvUpShopPurchaseItemBuyCheck(this);
    }

    /// <summary>Field number for the "shopKey" field.</summary>
    public const int ShopKeyFieldNumber = 1;
    private readonly static string ShopKeyDefaultValue = "";

    private string shopKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShopKey {
      get { return shopKey_ ?? ShopKeyDefaultValue; }
      set {
        shopKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shopKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShopKey {
      get { return shopKey_ != null; }
    }
    /// <summary>Clears the value of the "shopKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShopKey() {
      shopKey_ = null;
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 2;
    private readonly static int IdxDefaultValue = 0;

    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { if ((_hasBits0 & 1) != 0) { return idx_; } else { return IdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        idx_ = value;
      }
    }
    /// <summary>Gets whether the "idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdx() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLvUpShopPurchaseItemBuyCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLvUpShopPurchaseItemBuyCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopKey != other.ShopKey) return false;
      if (Idx != other.Idx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasShopKey) hash ^= ShopKey.GetHashCode();
      if (HasIdx) hash ^= Idx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasShopKey) {
        output.WriteRawTag(10);
        output.WriteString(ShopKey);
      }
      if (HasIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasShopKey) {
        output.WriteRawTag(10);
        output.WriteString(ShopKey);
      }
      if (HasIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasShopKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopKey);
      }
      if (HasIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLvUpShopPurchaseItemBuyCheck other) {
      if (other == null) {
        return;
      }
      if (other.HasShopKey) {
        ShopKey = other.ShopKey;
      }
      if (other.HasIdx) {
        Idx = other.Idx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ShopKey = input.ReadString();
            break;
          }
          case 16: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ShopKey = input.ReadString();
            break;
          }
          case 16: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CExpandTopFloor : pb::IMessage<CExpandTopFloor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CExpandTopFloor> _parser = new pb::MessageParser<CExpandTopFloor>(() => new CExpandTopFloor());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExpandTopFloor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[352]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandTopFloor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandTopFloor(CExpandTopFloor other) : this() {
      _hasBits0 = other._hasBits0;
      storeKey_ = other.storeKey_;
      expandId_ = other.expandId_;
      useCash_ = other.useCash_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExpandTopFloor Clone() {
      return new CExpandTopFloor(this);
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 1;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 1) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expandId" field.</summary>
    public const int ExpandIdFieldNumber = 2;
    private readonly static string ExpandIdDefaultValue = "";

    private string expandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpandId {
      get { return expandId_ ?? ExpandIdDefaultValue; }
      set {
        expandId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expandId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpandId {
      get { return expandId_ != null; }
    }
    /// <summary>Clears the value of the "expandId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpandId() {
      expandId_ = null;
    }

    /// <summary>Field number for the "useCash" field.</summary>
    public const int UseCashFieldNumber = 3;
    private readonly static bool UseCashDefaultValue = false;

    private bool useCash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCash {
      get { if ((_hasBits0 & 2) != 0) { return useCash_; } else { return UseCashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        useCash_ = value;
      }
    }
    /// <summary>Gets whether the "useCash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "useCash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private readonly static int PriceDefaultValue = 0;

    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { if ((_hasBits0 & 4) != 0) { return price_; } else { return PriceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExpandTopFloor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExpandTopFloor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoreKey != other.StoreKey) return false;
      if (ExpandId != other.ExpandId) return false;
      if (UseCash != other.UseCash) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (HasExpandId) hash ^= ExpandId.GetHashCode();
      if (HasUseCash) hash ^= UseCash.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasExpandId) {
        output.WriteRawTag(18);
        output.WriteString(ExpandId);
      }
      if (HasUseCash) {
        output.WriteRawTag(24);
        output.WriteBool(UseCash);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStoreKey) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreKey);
      }
      if (HasExpandId) {
        output.WriteRawTag(18);
        output.WriteString(ExpandId);
      }
      if (HasUseCash) {
        output.WriteRawTag(24);
        output.WriteBool(UseCash);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (HasExpandId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpandId);
      }
      if (HasUseCash) {
        size += 1 + 1;
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExpandTopFloor other) {
      if (other == null) {
        return;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      if (other.HasExpandId) {
        ExpandId = other.ExpandId;
      }
      if (other.HasUseCash) {
        UseCash = other.UseCash;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            ExpandId = input.ReadString();
            break;
          }
          case 24: {
            UseCash = input.ReadBool();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 18: {
            ExpandId = input.ReadString();
            break;
          }
          case 24: {
            UseCash = input.ReadBool();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CNewBingoMissionGet : pb::IMessage<CNewBingoMissionGet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CNewBingoMissionGet> _parser = new pb::MessageParser<CNewBingoMissionGet>(() => new CNewBingoMissionGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNewBingoMissionGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[353]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewBingoMissionGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewBingoMissionGet(CNewBingoMissionGet other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewBingoMissionGet Clone() {
      return new CNewBingoMissionGet(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNewBingoMissionGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNewBingoMissionGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNewBingoMissionGet other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CNewPointMissionGet : pb::IMessage<CNewPointMissionGet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CNewPointMissionGet> _parser = new pb::MessageParser<CNewPointMissionGet>(() => new CNewPointMissionGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNewPointMissionGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[354]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewPointMissionGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewPointMissionGet(CNewPointMissionGet other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewPointMissionGet Clone() {
      return new CNewPointMissionGet(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNewPointMissionGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNewPointMissionGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNewPointMissionGet other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CNewPointBoxGet : pb::IMessage<CNewPointBoxGet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CNewPointBoxGet> _parser = new pb::MessageParser<CNewPointBoxGet>(() => new CNewPointBoxGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNewPointBoxGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[355]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewPointBoxGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewPointBoxGet(CNewPointBoxGet other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewPointBoxGet Clone() {
      return new CNewPointBoxGet(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNewPointBoxGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNewPointBoxGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNewPointBoxGet other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CNewGodOfManagerGet : pb::IMessage<CNewGodOfManagerGet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CNewGodOfManagerGet> _parser = new pb::MessageParser<CNewGodOfManagerGet>(() => new CNewGodOfManagerGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CNewGodOfManagerGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[356]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewGodOfManagerGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewGodOfManagerGet(CNewGodOfManagerGet other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CNewGodOfManagerGet Clone() {
      return new CNewGodOfManagerGet(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CNewGodOfManagerGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CNewGodOfManagerGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CNewGodOfManagerGet other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class COpenNewCoffeTruck : pb::IMessage<COpenNewCoffeTruck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<COpenNewCoffeTruck> _parser = new pb::MessageParser<COpenNewCoffeTruck>(() => new COpenNewCoffeTruck());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<COpenNewCoffeTruck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[357]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewCoffeTruck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewCoffeTruck(COpenNewCoffeTruck other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      useCash_ = other.useCash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenNewCoffeTruck Clone() {
      return new COpenNewCoffeTruck(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "useCash" field.</summary>
    public const int UseCashFieldNumber = 2;
    private readonly static bool UseCashDefaultValue = false;

    private bool useCash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCash {
      get { if ((_hasBits0 & 1) != 0) { return useCash_; } else { return UseCashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        useCash_ = value;
      }
    }
    /// <summary>Gets whether the "useCash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseCash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "useCash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseCash() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as COpenNewCoffeTruck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(COpenNewCoffeTruck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UseCash != other.UseCash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasUseCash) hash ^= UseCash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasUseCash) {
        output.WriteRawTag(16);
        output.WriteBool(UseCash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasUseCash) {
        output.WriteRawTag(16);
        output.WriteBool(UseCash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasUseCash) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(COpenNewCoffeTruck other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasUseCash) {
        UseCash = other.UseCash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            UseCash = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            UseCash = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffeeTruckGameFinish : pb::IMessage<CCoffeeTruckGameFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffeeTruckGameFinish> _parser = new pb::MessageParser<CCoffeeTruckGameFinish>(() => new CCoffeeTruckGameFinish());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffeeTruckGameFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[358]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckGameFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckGameFinish(CCoffeeTruckGameFinish other) : this() {
      _hasBits0 = other._hasBits0;
      visitingId_ = other.visitingId_;
      blockTable_ = other.blockTable_;
      triggerTable_ = other.triggerTable_;
      comboTable_ = other.comboTable_;
      fever_ = other.fever_;
      score_ = other.score_;
      customOrderPatron_ = other.customOrderPatron_;
      customOrder_ = other.customOrder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckGameFinish Clone() {
      return new CCoffeeTruckGameFinish(this);
    }

    /// <summary>Field number for the "visitingId" field.</summary>
    public const int VisitingIdFieldNumber = 1;
    private readonly static string VisitingIdDefaultValue = "";

    private string visitingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VisitingId {
      get { return visitingId_ ?? VisitingIdDefaultValue; }
      set {
        visitingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "visitingId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisitingId {
      get { return visitingId_ != null; }
    }
    /// <summary>Clears the value of the "visitingId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisitingId() {
      visitingId_ = null;
    }

    /// <summary>Field number for the "blockTable" field.</summary>
    public const int BlockTableFieldNumber = 2;
    private readonly static string BlockTableDefaultValue = "";

    private string blockTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockTable {
      get { return blockTable_ ?? BlockTableDefaultValue; }
      set {
        blockTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "blockTable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlockTable {
      get { return blockTable_ != null; }
    }
    /// <summary>Clears the value of the "blockTable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlockTable() {
      blockTable_ = null;
    }

    /// <summary>Field number for the "triggerTable" field.</summary>
    public const int TriggerTableFieldNumber = 3;
    private readonly static string TriggerTableDefaultValue = "";

    private string triggerTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerTable {
      get { return triggerTable_ ?? TriggerTableDefaultValue; }
      set {
        triggerTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "triggerTable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTriggerTable {
      get { return triggerTable_ != null; }
    }
    /// <summary>Clears the value of the "triggerTable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTriggerTable() {
      triggerTable_ = null;
    }

    /// <summary>Field number for the "comboTable" field.</summary>
    public const int ComboTableFieldNumber = 4;
    private readonly static string ComboTableDefaultValue = "";

    private string comboTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComboTable {
      get { return comboTable_ ?? ComboTableDefaultValue; }
      set {
        comboTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "comboTable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComboTable {
      get { return comboTable_ != null; }
    }
    /// <summary>Clears the value of the "comboTable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComboTable() {
      comboTable_ = null;
    }

    /// <summary>Field number for the "fever" field.</summary>
    public const int FeverFieldNumber = 5;
    private readonly static bool FeverDefaultValue = false;

    private bool fever_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fever {
      get { if ((_hasBits0 & 1) != 0) { return fever_; } else { return FeverDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fever_ = value;
      }
    }
    /// <summary>Gets whether the "fever" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFever {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fever" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFever() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private readonly static int ScoreDefaultValue = 0;

    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "customOrderPatron" field.</summary>
    public const int CustomOrderPatronFieldNumber = 7;
    private readonly static int CustomOrderPatronDefaultValue = 0;

    private int customOrderPatron_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomOrderPatron {
      get { if ((_hasBits0 & 4) != 0) { return customOrderPatron_; } else { return CustomOrderPatronDefaultValue; } }
      set {
        _hasBits0 |= 4;
        customOrderPatron_ = value;
      }
    }
    /// <summary>Gets whether the "customOrderPatron" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomOrderPatron {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "customOrderPatron" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomOrderPatron() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "customOrder" field.</summary>
    public const int CustomOrderFieldNumber = 8;
    private readonly static int CustomOrderDefaultValue = 0;

    private int customOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomOrder {
      get { if ((_hasBits0 & 8) != 0) { return customOrder_; } else { return CustomOrderDefaultValue; } }
      set {
        _hasBits0 |= 8;
        customOrder_ = value;
      }
    }
    /// <summary>Gets whether the "customOrder" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomOrder {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "customOrder" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomOrder() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffeeTruckGameFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffeeTruckGameFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisitingId != other.VisitingId) return false;
      if (BlockTable != other.BlockTable) return false;
      if (TriggerTable != other.TriggerTable) return false;
      if (ComboTable != other.ComboTable) return false;
      if (Fever != other.Fever) return false;
      if (Score != other.Score) return false;
      if (CustomOrderPatron != other.CustomOrderPatron) return false;
      if (CustomOrder != other.CustomOrder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVisitingId) hash ^= VisitingId.GetHashCode();
      if (HasBlockTable) hash ^= BlockTable.GetHashCode();
      if (HasTriggerTable) hash ^= TriggerTable.GetHashCode();
      if (HasComboTable) hash ^= ComboTable.GetHashCode();
      if (HasFever) hash ^= Fever.GetHashCode();
      if (HasScore) hash ^= Score.GetHashCode();
      if (HasCustomOrderPatron) hash ^= CustomOrderPatron.GetHashCode();
      if (HasCustomOrder) hash ^= CustomOrder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVisitingId) {
        output.WriteRawTag(10);
        output.WriteString(VisitingId);
      }
      if (HasBlockTable) {
        output.WriteRawTag(18);
        output.WriteString(BlockTable);
      }
      if (HasTriggerTable) {
        output.WriteRawTag(26);
        output.WriteString(TriggerTable);
      }
      if (HasComboTable) {
        output.WriteRawTag(34);
        output.WriteString(ComboTable);
      }
      if (HasFever) {
        output.WriteRawTag(40);
        output.WriteBool(Fever);
      }
      if (HasScore) {
        output.WriteRawTag(48);
        output.WriteInt32(Score);
      }
      if (HasCustomOrderPatron) {
        output.WriteRawTag(56);
        output.WriteInt32(CustomOrderPatron);
      }
      if (HasCustomOrder) {
        output.WriteRawTag(64);
        output.WriteInt32(CustomOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVisitingId) {
        output.WriteRawTag(10);
        output.WriteString(VisitingId);
      }
      if (HasBlockTable) {
        output.WriteRawTag(18);
        output.WriteString(BlockTable);
      }
      if (HasTriggerTable) {
        output.WriteRawTag(26);
        output.WriteString(TriggerTable);
      }
      if (HasComboTable) {
        output.WriteRawTag(34);
        output.WriteString(ComboTable);
      }
      if (HasFever) {
        output.WriteRawTag(40);
        output.WriteBool(Fever);
      }
      if (HasScore) {
        output.WriteRawTag(48);
        output.WriteInt32(Score);
      }
      if (HasCustomOrderPatron) {
        output.WriteRawTag(56);
        output.WriteInt32(CustomOrderPatron);
      }
      if (HasCustomOrder) {
        output.WriteRawTag(64);
        output.WriteInt32(CustomOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVisitingId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VisitingId);
      }
      if (HasBlockTable) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockTable);
      }
      if (HasTriggerTable) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerTable);
      }
      if (HasComboTable) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComboTable);
      }
      if (HasFever) {
        size += 1 + 1;
      }
      if (HasScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (HasCustomOrderPatron) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomOrderPatron);
      }
      if (HasCustomOrder) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomOrder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffeeTruckGameFinish other) {
      if (other == null) {
        return;
      }
      if (other.HasVisitingId) {
        VisitingId = other.VisitingId;
      }
      if (other.HasBlockTable) {
        BlockTable = other.BlockTable;
      }
      if (other.HasTriggerTable) {
        TriggerTable = other.TriggerTable;
      }
      if (other.HasComboTable) {
        ComboTable = other.ComboTable;
      }
      if (other.HasFever) {
        Fever = other.Fever;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      if (other.HasCustomOrderPatron) {
        CustomOrderPatron = other.CustomOrderPatron;
      }
      if (other.HasCustomOrder) {
        CustomOrder = other.CustomOrder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VisitingId = input.ReadString();
            break;
          }
          case 18: {
            BlockTable = input.ReadString();
            break;
          }
          case 26: {
            TriggerTable = input.ReadString();
            break;
          }
          case 34: {
            ComboTable = input.ReadString();
            break;
          }
          case 40: {
            Fever = input.ReadBool();
            break;
          }
          case 48: {
            Score = input.ReadInt32();
            break;
          }
          case 56: {
            CustomOrderPatron = input.ReadInt32();
            break;
          }
          case 64: {
            CustomOrder = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VisitingId = input.ReadString();
            break;
          }
          case 18: {
            BlockTable = input.ReadString();
            break;
          }
          case 26: {
            TriggerTable = input.ReadString();
            break;
          }
          case 34: {
            ComboTable = input.ReadString();
            break;
          }
          case 40: {
            Fever = input.ReadBool();
            break;
          }
          case 48: {
            Score = input.ReadInt32();
            break;
          }
          case 56: {
            CustomOrderPatron = input.ReadInt32();
            break;
          }
          case 64: {
            CustomOrder = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetCoffeeTruckGift : pb::IMessage<GetCoffeeTruckGift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetCoffeeTruckGift> _parser = new pb::MessageParser<GetCoffeeTruckGift>(() => new GetCoffeeTruckGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCoffeeTruckGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[359]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCoffeeTruckGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCoffeeTruckGift(GetCoffeeTruckGift other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCoffeeTruckGift Clone() {
      return new GetCoffeeTruckGift(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCoffeeTruckGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCoffeeTruckGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCoffeeTruckGift other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class BuyCoffeeTruckShopItem : pb::IMessage<BuyCoffeeTruckShopItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuyCoffeeTruckShopItem> _parser = new pb::MessageParser<BuyCoffeeTruckShopItem>(() => new BuyCoffeeTruckShopItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyCoffeeTruckShopItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[360]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCoffeeTruckShopItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCoffeeTruckShopItem(BuyCoffeeTruckShopItem other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCoffeeTruckShopItem Clone() {
      return new BuyCoffeeTruckShopItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyCoffeeTruckShopItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyCoffeeTruckShopItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyCoffeeTruckShopItem other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeCftCustomerItem : pb::IMessage<ChangeCftCustomerItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeCftCustomerItem> _parser = new pb::MessageParser<ChangeCftCustomerItem>(() => new ChangeCftCustomerItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCftCustomerItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[361]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCftCustomerItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCftCustomerItem(ChangeCftCustomerItem other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCftCustomerItem Clone() {
      return new ChangeCftCustomerItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCftCustomerItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCftCustomerItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCftCustomerItem other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffeeTruckSpecialOrderManager : pb::IMessage<CCoffeeTruckSpecialOrderManager>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffeeTruckSpecialOrderManager> _parser = new pb::MessageParser<CCoffeeTruckSpecialOrderManager>(() => new CCoffeeTruckSpecialOrderManager());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffeeTruckSpecialOrderManager> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[362]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderManager() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderManager(CCoffeeTruckSpecialOrderManager other) : this() {
      _hasBits0 = other._hasBits0;
      isTimeCheck_ = other.isTimeCheck_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderManager Clone() {
      return new CCoffeeTruckSpecialOrderManager(this);
    }

    /// <summary>Field number for the "isTimeCheck" field.</summary>
    public const int IsTimeCheckFieldNumber = 1;
    private readonly static bool IsTimeCheckDefaultValue = false;

    private bool isTimeCheck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimeCheck {
      get { if ((_hasBits0 & 1) != 0) { return isTimeCheck_; } else { return IsTimeCheckDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isTimeCheck_ = value;
      }
    }
    /// <summary>Gets whether the "isTimeCheck" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTimeCheck {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "isTimeCheck" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTimeCheck() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffeeTruckSpecialOrderManager);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffeeTruckSpecialOrderManager other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsTimeCheck != other.IsTimeCheck) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsTimeCheck) hash ^= IsTimeCheck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsTimeCheck) {
        output.WriteRawTag(8);
        output.WriteBool(IsTimeCheck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsTimeCheck) {
        output.WriteRawTag(8);
        output.WriteBool(IsTimeCheck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIsTimeCheck) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffeeTruckSpecialOrderManager other) {
      if (other == null) {
        return;
      }
      if (other.HasIsTimeCheck) {
        IsTimeCheck = other.IsTimeCheck;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsTimeCheck = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsTimeCheck = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffeeTruckSpecialOrderFinish : pb::IMessage<CCoffeeTruckSpecialOrderFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffeeTruckSpecialOrderFinish> _parser = new pb::MessageParser<CCoffeeTruckSpecialOrderFinish>(() => new CCoffeeTruckSpecialOrderFinish());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffeeTruckSpecialOrderFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[363]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderFinish(CCoffeeTruckSpecialOrderFinish other) : this() {
      _hasBits0 = other._hasBits0;
      idx_ = other.idx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderFinish Clone() {
      return new CCoffeeTruckSpecialOrderFinish(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private readonly static int IdxDefaultValue = 0;

    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { if ((_hasBits0 & 1) != 0) { return idx_; } else { return IdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        idx_ = value;
      }
    }
    /// <summary>Gets whether the "idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdx() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffeeTruckSpecialOrderFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffeeTruckSpecialOrderFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIdx) hash ^= Idx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffeeTruckSpecialOrderFinish other) {
      if (other == null) {
        return;
      }
      if (other.HasIdx) {
        Idx = other.Idx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffeeTruckSpecialOrderRenew : pb::IMessage<CCoffeeTruckSpecialOrderRenew>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffeeTruckSpecialOrderRenew> _parser = new pb::MessageParser<CCoffeeTruckSpecialOrderRenew>(() => new CCoffeeTruckSpecialOrderRenew());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffeeTruckSpecialOrderRenew> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[364]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderRenew() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderRenew(CCoffeeTruckSpecialOrderRenew other) : this() {
      _hasBits0 = other._hasBits0;
      idx_ = other.idx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckSpecialOrderRenew Clone() {
      return new CCoffeeTruckSpecialOrderRenew(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private readonly static int IdxDefaultValue = 0;

    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { if ((_hasBits0 & 1) != 0) { return idx_; } else { return IdxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        idx_ = value;
      }
    }
    /// <summary>Gets whether the "idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdx() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffeeTruckSpecialOrderRenew);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffeeTruckSpecialOrderRenew other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIdx) hash ^= Idx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIdx) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffeeTruckSpecialOrderRenew other) {
      if (other == null) {
        return;
      }
      if (other.HasIdx) {
        Idx = other.Idx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CCoffeeTruckGameStart : pb::IMessage<CCoffeeTruckGameStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCoffeeTruckGameStart> _parser = new pb::MessageParser<CCoffeeTruckGameStart>(() => new CCoffeeTruckGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCoffeeTruckGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[365]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckGameStart(CCoffeeTruckGameStart other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCoffeeTruckGameStart Clone() {
      return new CCoffeeTruckGameStart(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCoffeeTruckGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCoffeeTruckGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCoffeeTruckGameStart other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CGetCoffeeTruckRanking : pb::IMessage<CGetCoffeeTruckRanking>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGetCoffeeTruckRanking> _parser = new pb::MessageParser<CGetCoffeeTruckRanking>(() => new CGetCoffeeTruckRanking());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGetCoffeeTruckRanking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[366]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCoffeeTruckRanking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCoffeeTruckRanking(CGetCoffeeTruckRanking other) : this() {
      uidList_ = other.uidList_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGetCoffeeTruckRanking Clone() {
      return new CGetCoffeeTruckRanking(this);
    }

    /// <summary>Field number for the "uidList" field.</summary>
    public const int UidListFieldNumber = 1;
    private readonly static string UidListDefaultValue = "";

    private string uidList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UidList {
      get { return uidList_ ?? UidListDefaultValue; }
      set {
        uidList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uidList" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUidList {
      get { return uidList_ != null; }
    }
    /// <summary>Clears the value of the "uidList" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUidList() {
      uidList_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGetCoffeeTruckRanking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGetCoffeeTruckRanking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UidList != other.UidList) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUidList) hash ^= UidList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUidList) {
        output.WriteRawTag(10);
        output.WriteString(UidList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUidList) {
        output.WriteRawTag(10);
        output.WriteString(UidList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUidList) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UidList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGetCoffeeTruckRanking other) {
      if (other == null) {
        return;
      }
      if (other.HasUidList) {
        UidList = other.UidList;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UidList = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UidList = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class COpenLuckyBoxes : pb::IMessage<COpenLuckyBoxes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<COpenLuckyBoxes> _parser = new pb::MessageParser<COpenLuckyBoxes>(() => new COpenLuckyBoxes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<COpenLuckyBoxes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[367]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenLuckyBoxes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenLuckyBoxes(COpenLuckyBoxes other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public COpenLuckyBoxes Clone() {
      return new COpenLuckyBoxes(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private readonly static int CountDefaultValue = 0;

    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as COpenLuckyBoxes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(COpenLuckyBoxes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(COpenLuckyBoxes other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAutoTicketRoastingMachineStart : pb::IMessage<CAutoTicketRoastingMachineStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAutoTicketRoastingMachineStart> _parser = new pb::MessageParser<CAutoTicketRoastingMachineStart>(() => new CAutoTicketRoastingMachineStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAutoTicketRoastingMachineStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[368]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineStart(CAutoTicketRoastingMachineStart other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      descId_ = other.descId_.Clone();
      count_ = other.count_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineStart Clone() {
      return new CAutoTicketRoastingMachineStart(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "descId" field.</summary>
    public const int DescIdFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_descId_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> descId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DescId {
      get { return descId_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_count_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Count {
      get { return count_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAutoTicketRoastingMachineStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAutoTicketRoastingMachineStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      if(!descId_.Equals(other.descId_)) return false;
      if(!count_.Equals(other.count_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      hash ^= descId_.GetHashCode();
      hash ^= count_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      descId_.WriteTo(output, _repeated_descId_codec);
      count_.WriteTo(output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      descId_.WriteTo(ref output, _repeated_descId_codec);
      count_.WriteTo(ref output, _repeated_count_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      size += descId_.CalculateSize(_repeated_descId_codec);
      size += count_.CalculateSize(_repeated_count_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAutoTicketRoastingMachineStart other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      descId_.Add(other.descId_);
      count_.Add(other.count_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            descId_.AddEntriesFrom(input, _repeated_descId_codec);
            break;
          }
          case 34:
          case 32: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
          case 26: {
            descId_.AddEntriesFrom(ref input, _repeated_descId_codec);
            break;
          }
          case 34:
          case 32: {
            count_.AddEntriesFrom(ref input, _repeated_count_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAutoTicketRoastingMachineFin : pb::IMessage<CAutoTicketRoastingMachineFin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAutoTicketRoastingMachineFin> _parser = new pb::MessageParser<CAutoTicketRoastingMachineFin>(() => new CAutoTicketRoastingMachineFin());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAutoTicketRoastingMachineFin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[369]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineFin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineFin(CAutoTicketRoastingMachineFin other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineFin Clone() {
      return new CAutoTicketRoastingMachineFin(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAutoTicketRoastingMachineFin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAutoTicketRoastingMachineFin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAutoTicketRoastingMachineFin other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAutoTicketRoastingMachineShorten : pb::IMessage<CAutoTicketRoastingMachineShorten>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAutoTicketRoastingMachineShorten> _parser = new pb::MessageParser<CAutoTicketRoastingMachineShorten>(() => new CAutoTicketRoastingMachineShorten());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAutoTicketRoastingMachineShorten> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[370]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineShorten() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineShorten(CAutoTicketRoastingMachineShorten other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      cash_ = other.cash_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineShorten Clone() {
      return new CAutoTicketRoastingMachineShorten(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 2;
    private readonly static int CashDefaultValue = 0;

    private int cash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cash {
      get { if ((_hasBits0 & 2) != 0) { return cash_; } else { return CashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cash_ = value;
      }
    }
    /// <summary>Gets whether the "cash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 3;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 4) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAutoTicketRoastingMachineShorten);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAutoTicketRoastingMachineShorten other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (Cash != other.Cash) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasCash) hash ^= Cash.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasCash) {
        output.WriteRawTag(16);
        output.WriteInt32(Cash);
      }
      if (HasStoreKey) {
        output.WriteRawTag(24);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasCash) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAutoTicketRoastingMachineShorten other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            Cash = input.ReadInt32();
            break;
          }
          case 24: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CAutoTicketRoastingMachineRevive : pb::IMessage<CAutoTicketRoastingMachineRevive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAutoTicketRoastingMachineRevive> _parser = new pb::MessageParser<CAutoTicketRoastingMachineRevive>(() => new CAutoTicketRoastingMachineRevive());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAutoTicketRoastingMachineRevive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Network.Packet.GameReflection.Descriptor.MessageTypes[371]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineRevive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineRevive(CAutoTicketRoastingMachineRevive other) : this() {
      _hasBits0 = other._hasBits0;
      oid_ = other.oid_;
      storeKey_ = other.storeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAutoTicketRoastingMachineRevive Clone() {
      return new CAutoTicketRoastingMachineRevive(this);
    }

    /// <summary>Field number for the "oid" field.</summary>
    public const int OidFieldNumber = 1;
    private readonly static int OidDefaultValue = 0;

    private int oid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oid {
      get { if ((_hasBits0 & 1) != 0) { return oid_; } else { return OidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        oid_ = value;
      }
    }
    /// <summary>Gets whether the "oid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "oid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "storeKey" field.</summary>
    public const int StoreKeyFieldNumber = 2;
    private readonly static int StoreKeyDefaultValue = 0;

    private int storeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StoreKey {
      get { if ((_hasBits0 & 2) != 0) { return storeKey_; } else { return StoreKeyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        storeKey_ = value;
      }
    }
    /// <summary>Gets whether the "storeKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStoreKey {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "storeKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStoreKey() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAutoTicketRoastingMachineRevive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAutoTicketRoastingMachineRevive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oid != other.Oid) return false;
      if (StoreKey != other.StoreKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOid) hash ^= Oid.GetHashCode();
      if (HasStoreKey) hash ^= StoreKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOid) {
        output.WriteRawTag(8);
        output.WriteInt32(Oid);
      }
      if (HasStoreKey) {
        output.WriteRawTag(16);
        output.WriteInt32(StoreKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
      }
      if (HasStoreKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAutoTicketRoastingMachineRevive other) {
      if (other == null) {
        return;
      }
      if (other.HasOid) {
        Oid = other.Oid;
      }
      if (other.HasStoreKey) {
        StoreKey = other.StoreKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Oid = input.ReadInt32();
            break;
          }
          case 16: {
            StoreKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
